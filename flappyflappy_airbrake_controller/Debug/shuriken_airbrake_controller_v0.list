
shuriken_airbrake_controller_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080020f0  080020f0  000120f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002160  08002160  00012160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002168  08002168  00012168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800216c  0800216c  0001216c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000017e0  20000000  08002170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000007c  200017e0  08003950  000217e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000185c  08003950  0002185c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000217e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000bba5  00000000  00000000  00021810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ac0  00000000  00000000  0002d3b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002162  00000000  00000000  0002ee75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000508  00000000  00000000  00030fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000640  00000000  00000000  000314e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002f7f  00000000  00000000  00031b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000023c6  00000000  00000000  00034a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00036e65  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001044  00000000  00000000  00036ee4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200017e0 	.word	0x200017e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080020d8 	.word	0x080020d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200017e4 	.word	0x200017e4
 80001dc:	080020d8 	.word	0x080020d8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_InitTick+0x3c>)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_InitTick+0x40>)
{
 80005a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	7818      	ldrb	r0, [r3, #0]
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b8:	f000 f888 	bl	80006cc <HAL_SYSTICK_Config>
 80005bc:	4604      	mov	r4, r0
 80005be:	b958      	cbnz	r0, 80005d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c0:	2d0f      	cmp	r5, #15
 80005c2:	d809      	bhi.n	80005d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	4602      	mov	r2, r0
 80005c6:	4629      	mov	r1, r5
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f000 f84a 	bl	8000664 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <HAL_InitTick+0x44>)
 80005d2:	4620      	mov	r0, r4
 80005d4:	601d      	str	r5, [r3, #0]
 80005d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005d8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005da:	bd38      	pop	{r3, r4, r5, pc}
 80005dc:	20001778 	.word	0x20001778
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_Init>:
{
 80005e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_Init+0x30>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f81b 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc8 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 8000610:	f001 f864 	bl	80016dc <HAL_MspInit>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40023c00 	.word	0x40023c00

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_IncTick+0x14>)
 8000620:	6811      	ldr	r1, [r2, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20001808 	.word	0x20001808
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20001808 	.word	0x20001808

08000640 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000642:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000644:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000648:	041b      	lsls	r3, r3, #16
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000650:	0200      	lsls	r0, r0, #8
 8000652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000656:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800065a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800065c:	60d3      	str	r3, [r2, #12]
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000666:	b530      	push	{r4, r5, lr}
 8000668:	68dc      	ldr	r4, [r3, #12]
 800066a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000674:	2b04      	cmp	r3, #4
 8000676:	bf28      	it	cs
 8000678:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 0501 	mov.w	r5, #1
 8000680:	fa05 f303 	lsl.w	r3, r5, r3
 8000684:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000688:	bf8c      	ite	hi
 800068a:	3c03      	subhi	r4, #3
 800068c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068e:	4019      	ands	r1, r3
 8000690:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000692:	fa05 f404 	lsl.w	r4, r5, r4
 8000696:	3c01      	subs	r4, #1
 8000698:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800069a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	ea42 0201 	orr.w	r2, r2, r1
 80006a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	bfaf      	iteee	ge
 80006a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	f000 000f 	andlt.w	r0, r0, #15
 80006ae:	4b06      	ldrlt	r3, [pc, #24]	; (80006c8 <HAL_NVIC_SetPriority+0x64>)
 80006b0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	bfa5      	ittet	ge
 80006b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	e000ed14 	.word	0xe000ed14

080006cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006cc:	3801      	subs	r0, #1
 80006ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006d2:	d20a      	bcs.n	80006ea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	21f0      	movs	r1, #240	; 0xf0
 80006dc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000e010 	.word	0xe000e010
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006fa:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006fc:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006fe:	bf0c      	ite	eq
 8000700:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000704:	f022 0204 	bicne.w	r2, r2, #4
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	4770      	bx	lr
 800070c:	e000e010 	.word	0xe000e010

08000710 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000710:	4770      	bx	lr

08000712 <HAL_SYSTICK_IRQHandler>:
{
 8000712:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000714:	f7ff fffc 	bl	8000710 <HAL_SYSTICK_Callback>
 8000718:	bd08      	pop	{r3, pc}
	...

0800071c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800071c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000720:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000722:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000724:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80008c4 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000728:	4a64      	ldr	r2, [pc, #400]	; (80008bc <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800072a:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 800072c:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000730:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000732:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000734:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000738:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 800073c:	42b7      	cmp	r7, r6
 800073e:	f040 80ad 	bne.w	800089c <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000742:	684c      	ldr	r4, [r1, #4]
 8000744:	f024 0a10 	bic.w	sl, r4, #16
 8000748:	f1ba 0f02 	cmp.w	sl, #2
 800074c:	d116      	bne.n	800077c <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800074e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000752:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000756:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800075a:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800075e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000762:	f04f 0e0f 	mov.w	lr, #15
 8000766:	fa0e fe0b 	lsl.w	lr, lr, fp
 800076a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800076e:	690d      	ldr	r5, [r1, #16]
 8000770:	fa05 f50b 	lsl.w	r5, r5, fp
 8000774:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000778:	f8cc 5020 	str.w	r5, [ip, #32]
 800077c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000780:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000782:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000786:	fa05 f50c 	lsl.w	r5, r5, ip
 800078a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800078c:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000790:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000794:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000798:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800079c:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007a0:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a4:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80007a6:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007aa:	d815      	bhi.n	80007d8 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80007ac:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007b0:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007b4:	68cd      	ldr	r5, [r1, #12]
 80007b6:	fa05 fa0c 	lsl.w	sl, r5, ip
 80007ba:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80007be:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80007c2:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007c6:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007ca:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80007ce:	fa0e fe03 	lsl.w	lr, lr, r3
 80007d2:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80007d6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007d8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007da:	9d00      	ldr	r5, [sp, #0]
 80007dc:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007de:	688f      	ldr	r7, [r1, #8]
 80007e0:	fa07 f70c 	lsl.w	r7, r7, ip
 80007e4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007e6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007e8:	00e5      	lsls	r5, r4, #3
 80007ea:	d557      	bpl.n	800089c <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ec:	f04f 0b00 	mov.w	fp, #0
 80007f0:	f8cd b00c 	str.w	fp, [sp, #12]
 80007f4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007f8:	4d31      	ldr	r5, [pc, #196]	; (80008c0 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007fe:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000802:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000806:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800080a:	9703      	str	r7, [sp, #12]
 800080c:	9f03      	ldr	r7, [sp, #12]
 800080e:	f023 0703 	bic.w	r7, r3, #3
 8000812:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000816:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800081a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800081e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000822:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000826:	f04f 0e0f 	mov.w	lr, #15
 800082a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800082e:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000830:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000834:	d039      	beq.n	80008aa <HAL_GPIO_Init+0x18e>
 8000836:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800083a:	42a8      	cmp	r0, r5
 800083c:	d037      	beq.n	80008ae <HAL_GPIO_Init+0x192>
 800083e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000842:	42a8      	cmp	r0, r5
 8000844:	d035      	beq.n	80008b2 <HAL_GPIO_Init+0x196>
 8000846:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800084a:	42a8      	cmp	r0, r5
 800084c:	d033      	beq.n	80008b6 <HAL_GPIO_Init+0x19a>
 800084e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000852:	42a8      	cmp	r0, r5
 8000854:	bf14      	ite	ne
 8000856:	2507      	movne	r5, #7
 8000858:	2504      	moveq	r5, #4
 800085a:	fa05 f50c 	lsl.w	r5, r5, ip
 800085e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000862:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000864:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000866:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000868:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800086c:	bf0c      	ite	eq
 800086e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000870:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000872:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000874:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000876:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800087a:	bf0c      	ite	eq
 800087c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800087e:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000880:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000882:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000884:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000888:	bf0c      	ite	eq
 800088a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800088c:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800088e:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000890:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000892:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000894:	bf54      	ite	pl
 8000896:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000898:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800089a:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800089c:	3301      	adds	r3, #1
 800089e:	2b10      	cmp	r3, #16
 80008a0:	f47f af47 	bne.w	8000732 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008a4:	b005      	add	sp, #20
 80008a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008aa:	465d      	mov	r5, fp
 80008ac:	e7d5      	b.n	800085a <HAL_GPIO_Init+0x13e>
 80008ae:	2501      	movs	r5, #1
 80008b0:	e7d3      	b.n	800085a <HAL_GPIO_Init+0x13e>
 80008b2:	2502      	movs	r5, #2
 80008b4:	e7d1      	b.n	800085a <HAL_GPIO_Init+0x13e>
 80008b6:	2503      	movs	r5, #3
 80008b8:	e7cf      	b.n	800085a <HAL_GPIO_Init+0x13e>
 80008ba:	bf00      	nop
 80008bc:	40013c00 	.word	0x40013c00
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40023800 	.word	0x40023800

080008c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008c8:	b10a      	cbz	r2, 80008ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008ca:	6181      	str	r1, [r0, #24]
 80008cc:	4770      	bx	lr
 80008ce:	0409      	lsls	r1, r1, #16
 80008d0:	e7fb      	b.n	80008ca <HAL_GPIO_WritePin+0x2>
	...

080008d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008d8:	4604      	mov	r4, r0
 80008da:	b918      	cbnz	r0, 80008e4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80008dc:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008de:	b002      	add	sp, #8
 80008e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008e4:	6803      	ldr	r3, [r0, #0]
 80008e6:	07dd      	lsls	r5, r3, #31
 80008e8:	d410      	bmi.n	800090c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	0798      	lsls	r0, r3, #30
 80008ee:	d458      	bmi.n	80009a2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008f0:	6823      	ldr	r3, [r4, #0]
 80008f2:	071a      	lsls	r2, r3, #28
 80008f4:	f100 809a 	bmi.w	8000a2c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008f8:	6823      	ldr	r3, [r4, #0]
 80008fa:	075b      	lsls	r3, r3, #29
 80008fc:	f100 80b8 	bmi.w	8000a70 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000900:	69a2      	ldr	r2, [r4, #24]
 8000902:	2a00      	cmp	r2, #0
 8000904:	f040 8119 	bne.w	8000b3a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000908:	2000      	movs	r0, #0
 800090a:	e7e8      	b.n	80008de <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800090c:	4ba6      	ldr	r3, [pc, #664]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	f002 020c 	and.w	r2, r2, #12
 8000914:	2a04      	cmp	r2, #4
 8000916:	d007      	beq.n	8000928 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800091e:	2a08      	cmp	r2, #8
 8000920:	d10a      	bne.n	8000938 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	0259      	lsls	r1, r3, #9
 8000926:	d507      	bpl.n	8000938 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000928:	4b9f      	ldr	r3, [pc, #636]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	039a      	lsls	r2, r3, #14
 800092e:	d5dc      	bpl.n	80008ea <HAL_RCC_OscConfig+0x16>
 8000930:	6863      	ldr	r3, [r4, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1d9      	bne.n	80008ea <HAL_RCC_OscConfig+0x16>
 8000936:	e7d1      	b.n	80008dc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000938:	6863      	ldr	r3, [r4, #4]
 800093a:	4d9b      	ldr	r5, [pc, #620]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 800093c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000940:	d111      	bne.n	8000966 <HAL_RCC_OscConfig+0x92>
 8000942:	682b      	ldr	r3, [r5, #0]
 8000944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000948:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800094a:	f7ff fe73 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800094e:	4d96      	ldr	r5, [pc, #600]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000950:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000952:	682b      	ldr	r3, [r5, #0]
 8000954:	039b      	lsls	r3, r3, #14
 8000956:	d4c8      	bmi.n	80008ea <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000958:	f7ff fe6c 	bl	8000634 <HAL_GetTick>
 800095c:	1b80      	subs	r0, r0, r6
 800095e:	2864      	cmp	r0, #100	; 0x64
 8000960:	d9f7      	bls.n	8000952 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000962:	2003      	movs	r0, #3
 8000964:	e7bb      	b.n	80008de <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000966:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800096a:	d104      	bne.n	8000976 <HAL_RCC_OscConfig+0xa2>
 800096c:	682b      	ldr	r3, [r5, #0]
 800096e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000972:	602b      	str	r3, [r5, #0]
 8000974:	e7e5      	b.n	8000942 <HAL_RCC_OscConfig+0x6e>
 8000976:	682a      	ldr	r2, [r5, #0]
 8000978:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800097c:	602a      	str	r2, [r5, #0]
 800097e:	682a      	ldr	r2, [r5, #0]
 8000980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000984:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1df      	bne.n	800094a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800098a:	f7ff fe53 	bl	8000634 <HAL_GetTick>
 800098e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	039f      	lsls	r7, r3, #14
 8000994:	d5a9      	bpl.n	80008ea <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000996:	f7ff fe4d 	bl	8000634 <HAL_GetTick>
 800099a:	1b80      	subs	r0, r0, r6
 800099c:	2864      	cmp	r0, #100	; 0x64
 800099e:	d9f7      	bls.n	8000990 <HAL_RCC_OscConfig+0xbc>
 80009a0:	e7df      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009a2:	4b81      	ldr	r3, [pc, #516]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 80009a4:	689a      	ldr	r2, [r3, #8]
 80009a6:	f012 0f0c 	tst.w	r2, #12
 80009aa:	d007      	beq.n	80009bc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009b2:	2a08      	cmp	r2, #8
 80009b4:	d111      	bne.n	80009da <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	025e      	lsls	r6, r3, #9
 80009ba:	d40e      	bmi.n	80009da <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009bc:	4b7a      	ldr	r3, [pc, #488]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	0795      	lsls	r5, r2, #30
 80009c2:	d502      	bpl.n	80009ca <HAL_RCC_OscConfig+0xf6>
 80009c4:	68e2      	ldr	r2, [r4, #12]
 80009c6:	2a01      	cmp	r2, #1
 80009c8:	d188      	bne.n	80008dc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	6921      	ldr	r1, [r4, #16]
 80009ce:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009d2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009d6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009d8:	e78a      	b.n	80008f0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009da:	68e2      	ldr	r2, [r4, #12]
 80009dc:	4b73      	ldr	r3, [pc, #460]	; (8000bac <HAL_RCC_OscConfig+0x2d8>)
 80009de:	b1b2      	cbz	r2, 8000a0e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009e0:	2201      	movs	r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009e4:	f7ff fe26 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e8:	4d6f      	ldr	r5, [pc, #444]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ec:	682b      	ldr	r3, [r5, #0]
 80009ee:	0798      	lsls	r0, r3, #30
 80009f0:	d507      	bpl.n	8000a02 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009f2:	682b      	ldr	r3, [r5, #0]
 80009f4:	6922      	ldr	r2, [r4, #16]
 80009f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009fa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009fe:	602b      	str	r3, [r5, #0]
 8000a00:	e776      	b.n	80008f0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a02:	f7ff fe17 	bl	8000634 <HAL_GetTick>
 8000a06:	1b80      	subs	r0, r0, r6
 8000a08:	2802      	cmp	r0, #2
 8000a0a:	d9ef      	bls.n	80009ec <HAL_RCC_OscConfig+0x118>
 8000a0c:	e7a9      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a10:	f7ff fe10 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a14:	4d64      	ldr	r5, [pc, #400]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a18:	682b      	ldr	r3, [r5, #0]
 8000a1a:	0799      	lsls	r1, r3, #30
 8000a1c:	f57f af68 	bpl.w	80008f0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a20:	f7ff fe08 	bl	8000634 <HAL_GetTick>
 8000a24:	1b80      	subs	r0, r0, r6
 8000a26:	2802      	cmp	r0, #2
 8000a28:	d9f6      	bls.n	8000a18 <HAL_RCC_OscConfig+0x144>
 8000a2a:	e79a      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a2c:	6962      	ldr	r2, [r4, #20]
 8000a2e:	4b60      	ldr	r3, [pc, #384]	; (8000bb0 <HAL_RCC_OscConfig+0x2dc>)
 8000a30:	b17a      	cbz	r2, 8000a52 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a36:	f7ff fdfd 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a3a:	4d5b      	ldr	r5, [pc, #364]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a3c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a3e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a40:	079f      	lsls	r7, r3, #30
 8000a42:	f53f af59 	bmi.w	80008f8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a46:	f7ff fdf5 	bl	8000634 <HAL_GetTick>
 8000a4a:	1b80      	subs	r0, r0, r6
 8000a4c:	2802      	cmp	r0, #2
 8000a4e:	d9f6      	bls.n	8000a3e <HAL_RCC_OscConfig+0x16a>
 8000a50:	e787      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a52:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a54:	f7ff fdee 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a58:	4d53      	ldr	r5, [pc, #332]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a5a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a5c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a5e:	0798      	lsls	r0, r3, #30
 8000a60:	f57f af4a 	bpl.w	80008f8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a64:	f7ff fde6 	bl	8000634 <HAL_GetTick>
 8000a68:	1b80      	subs	r0, r0, r6
 8000a6a:	2802      	cmp	r0, #2
 8000a6c:	d9f6      	bls.n	8000a5c <HAL_RCC_OscConfig+0x188>
 8000a6e:	e778      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a70:	4b4d      	ldr	r3, [pc, #308]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 8000a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a74:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a78:	d128      	bne.n	8000acc <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	9201      	str	r2, [sp, #4]
 8000a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a82:	641a      	str	r2, [r3, #64]	; 0x40
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a8e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a90:	4d48      	ldr	r5, [pc, #288]	; (8000bb4 <HAL_RCC_OscConfig+0x2e0>)
 8000a92:	682b      	ldr	r3, [r5, #0]
 8000a94:	05d9      	lsls	r1, r3, #23
 8000a96:	d51b      	bpl.n	8000ad0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a98:	68a3      	ldr	r3, [r4, #8]
 8000a9a:	4d43      	ldr	r5, [pc, #268]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d127      	bne.n	8000af0 <HAL_RCC_OscConfig+0x21c>
 8000aa0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000aa8:	f7ff fdc4 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aac:	4d3e      	ldr	r5, [pc, #248]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000aae:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ab4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ab6:	079b      	lsls	r3, r3, #30
 8000ab8:	d539      	bpl.n	8000b2e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	f43f af20 	beq.w	8000900 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ac0:	4a39      	ldr	r2, [pc, #228]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 8000ac2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	e719      	b.n	8000900 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000acc:	2600      	movs	r6, #0
 8000ace:	e7df      	b.n	8000a90 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ad0:	682b      	ldr	r3, [r5, #0]
 8000ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ad8:	f7ff fdac 	bl	8000634 <HAL_GetTick>
 8000adc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ade:	682b      	ldr	r3, [r5, #0]
 8000ae0:	05da      	lsls	r2, r3, #23
 8000ae2:	d4d9      	bmi.n	8000a98 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ae4:	f7ff fda6 	bl	8000634 <HAL_GetTick>
 8000ae8:	1bc0      	subs	r0, r0, r7
 8000aea:	2802      	cmp	r0, #2
 8000aec:	d9f7      	bls.n	8000ade <HAL_RCC_OscConfig+0x20a>
 8000aee:	e738      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af0:	2b05      	cmp	r3, #5
 8000af2:	d104      	bne.n	8000afe <HAL_RCC_OscConfig+0x22a>
 8000af4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	672b      	str	r3, [r5, #112]	; 0x70
 8000afc:	e7d0      	b.n	8000aa0 <HAL_RCC_OscConfig+0x1cc>
 8000afe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b00:	f022 0201 	bic.w	r2, r2, #1
 8000b04:	672a      	str	r2, [r5, #112]	; 0x70
 8000b06:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b08:	f022 0204 	bic.w	r2, r2, #4
 8000b0c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1ca      	bne.n	8000aa8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b12:	f7ff fd8f 	bl	8000634 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b16:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b1a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b1e:	0798      	lsls	r0, r3, #30
 8000b20:	d5cb      	bpl.n	8000aba <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b22:	f7ff fd87 	bl	8000634 <HAL_GetTick>
 8000b26:	1bc0      	subs	r0, r0, r7
 8000b28:	4540      	cmp	r0, r8
 8000b2a:	d9f7      	bls.n	8000b1c <HAL_RCC_OscConfig+0x248>
 8000b2c:	e719      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fd81 	bl	8000634 <HAL_GetTick>
 8000b32:	1bc0      	subs	r0, r0, r7
 8000b34:	4540      	cmp	r0, r8
 8000b36:	d9bd      	bls.n	8000ab4 <HAL_RCC_OscConfig+0x1e0>
 8000b38:	e713      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b3a:	4d1b      	ldr	r5, [pc, #108]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 8000b3c:	68ab      	ldr	r3, [r5, #8]
 8000b3e:	f003 030c 	and.w	r3, r3, #12
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	f43f aeca 	beq.w	80008dc <HAL_RCC_OscConfig+0x8>
 8000b48:	4e1b      	ldr	r6, [pc, #108]	; (8000bb8 <HAL_RCC_OscConfig+0x2e4>)
 8000b4a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b4c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b4e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b50:	d134      	bne.n	8000bbc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b52:	f7ff fd6f 	bl	8000634 <HAL_GetTick>
 8000b56:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b58:	682b      	ldr	r3, [r5, #0]
 8000b5a:	0199      	lsls	r1, r3, #6
 8000b5c:	d41e      	bmi.n	8000b9c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b5e:	6a22      	ldr	r2, [r4, #32]
 8000b60:	69e3      	ldr	r3, [r4, #28]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b66:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b70:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b72:	4c0d      	ldr	r4, [pc, #52]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b74:	0852      	lsrs	r2, r2, #1
 8000b76:	3a01      	subs	r2, #1
 8000b78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b7c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b7e:	2301      	movs	r3, #1
 8000b80:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b82:	f7ff fd57 	bl	8000634 <HAL_GetTick>
 8000b86:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b88:	6823      	ldr	r3, [r4, #0]
 8000b8a:	019a      	lsls	r2, r3, #6
 8000b8c:	f53f aebc 	bmi.w	8000908 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b90:	f7ff fd50 	bl	8000634 <HAL_GetTick>
 8000b94:	1b40      	subs	r0, r0, r5
 8000b96:	2802      	cmp	r0, #2
 8000b98:	d9f6      	bls.n	8000b88 <HAL_RCC_OscConfig+0x2b4>
 8000b9a:	e6e2      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b9c:	f7ff fd4a 	bl	8000634 <HAL_GetTick>
 8000ba0:	1bc0      	subs	r0, r0, r7
 8000ba2:	2802      	cmp	r0, #2
 8000ba4:	d9d8      	bls.n	8000b58 <HAL_RCC_OscConfig+0x284>
 8000ba6:	e6dc      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	42470000 	.word	0x42470000
 8000bb0:	42470e80 	.word	0x42470e80
 8000bb4:	40007000 	.word	0x40007000
 8000bb8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000bbc:	f7ff fd3a 	bl	8000634 <HAL_GetTick>
 8000bc0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bc2:	682b      	ldr	r3, [r5, #0]
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	f57f ae9f 	bpl.w	8000908 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bca:	f7ff fd33 	bl	8000634 <HAL_GetTick>
 8000bce:	1b00      	subs	r0, r0, r4
 8000bd0:	2802      	cmp	r0, #2
 8000bd2:	d9f6      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x2ee>
 8000bd4:	e6c5      	b.n	8000962 <HAL_RCC_OscConfig+0x8e>
 8000bd6:	bf00      	nop

08000bd8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bd8:	4913      	ldr	r1, [pc, #76]	; (8000c28 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bda:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bdc:	688b      	ldr	r3, [r1, #8]
 8000bde:	f003 030c 	and.w	r3, r3, #12
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	d003      	beq.n	8000bee <HAL_RCC_GetSysClockFreq+0x16>
 8000be6:	2b08      	cmp	r3, #8
 8000be8:	d003      	beq.n	8000bf2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bea:	4810      	ldr	r0, [pc, #64]	; (8000c2c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bec:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bee:	4810      	ldr	r0, [pc, #64]	; (8000c30 <HAL_RCC_GetSysClockFreq+0x58>)
 8000bf0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bf2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bf4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bf6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bf8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bfc:	bf14      	ite	ne
 8000bfe:	480c      	ldrne	r0, [pc, #48]	; (8000c30 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c00:	480a      	ldreq	r0, [pc, #40]	; (8000c2c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c02:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c06:	bf18      	it	ne
 8000c08:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c0e:	fba1 0100 	umull	r0, r1, r1, r0
 8000c12:	f7ff fb3d 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c1e:	3301      	adds	r3, #1
 8000c20:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c22:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c26:	bd08      	pop	{r3, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	00f42400 	.word	0x00f42400
 8000c30:	007a1200 	.word	0x007a1200

08000c34 <HAL_RCC_ClockConfig>:
{
 8000c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c38:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	b910      	cbnz	r0, 8000c44 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c3e:	2001      	movs	r0, #1
 8000c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c44:	4b44      	ldr	r3, [pc, #272]	; (8000d58 <HAL_RCC_ClockConfig+0x124>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	f002 020f 	and.w	r2, r2, #15
 8000c4c:	428a      	cmp	r2, r1
 8000c4e:	d328      	bcc.n	8000ca2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c50:	6821      	ldr	r1, [r4, #0]
 8000c52:	078f      	lsls	r7, r1, #30
 8000c54:	d42d      	bmi.n	8000cb2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c56:	07c8      	lsls	r0, r1, #31
 8000c58:	d440      	bmi.n	8000cdc <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c5a:	4b3f      	ldr	r3, [pc, #252]	; (8000d58 <HAL_RCC_ClockConfig+0x124>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	f002 020f 	and.w	r2, r2, #15
 8000c62:	4295      	cmp	r5, r2
 8000c64:	d366      	bcc.n	8000d34 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c66:	6822      	ldr	r2, [r4, #0]
 8000c68:	0751      	lsls	r1, r2, #29
 8000c6a:	d46c      	bmi.n	8000d46 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c6c:	0713      	lsls	r3, r2, #28
 8000c6e:	d507      	bpl.n	8000c80 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c70:	4a3a      	ldr	r2, [pc, #232]	; (8000d5c <HAL_RCC_ClockConfig+0x128>)
 8000c72:	6921      	ldr	r1, [r4, #16]
 8000c74:	6893      	ldr	r3, [r2, #8]
 8000c76:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c7a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c7e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c80:	f7ff ffaa 	bl	8000bd8 <HAL_RCC_GetSysClockFreq>
 8000c84:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <HAL_RCC_ClockConfig+0x128>)
 8000c86:	4a36      	ldr	r2, [pc, #216]	; (8000d60 <HAL_RCC_ClockConfig+0x12c>)
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c8e:	5cd3      	ldrb	r3, [r2, r3]
 8000c90:	40d8      	lsrs	r0, r3
 8000c92:	4b34      	ldr	r3, [pc, #208]	; (8000d64 <HAL_RCC_ClockConfig+0x130>)
 8000c94:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff fc82 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ca2:	b2ca      	uxtb	r2, r1
 8000ca4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 030f 	and.w	r3, r3, #15
 8000cac:	4299      	cmp	r1, r3
 8000cae:	d1c6      	bne.n	8000c3e <HAL_RCC_ClockConfig+0xa>
 8000cb0:	e7ce      	b.n	8000c50 <HAL_RCC_ClockConfig+0x1c>
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cb4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cb8:	bf1e      	ittt	ne
 8000cba:	689a      	ldrne	r2, [r3, #8]
 8000cbc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000cc0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cc4:	bf42      	ittt	mi
 8000cc6:	689a      	ldrmi	r2, [r3, #8]
 8000cc8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000ccc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	68a0      	ldr	r0, [r4, #8]
 8000cd2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cd6:	4302      	orrs	r2, r0
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	e7bc      	b.n	8000c56 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cdc:	6862      	ldr	r2, [r4, #4]
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <HAL_RCC_ClockConfig+0x128>)
 8000ce0:	2a01      	cmp	r2, #1
 8000ce2:	d11d      	bne.n	8000d20 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cea:	d0a8      	beq.n	8000c3e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cec:	4e1b      	ldr	r6, [pc, #108]	; (8000d5c <HAL_RCC_ClockConfig+0x128>)
 8000cee:	68b3      	ldr	r3, [r6, #8]
 8000cf0:	f023 0303 	bic.w	r3, r3, #3
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cf8:	f7ff fc9c 	bl	8000634 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cfc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d00:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d02:	68b3      	ldr	r3, [r6, #8]
 8000d04:	6862      	ldr	r2, [r4, #4]
 8000d06:	f003 030c 	and.w	r3, r3, #12
 8000d0a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d0e:	d0a4      	beq.n	8000c5a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d10:	f7ff fc90 	bl	8000634 <HAL_GetTick>
 8000d14:	1bc0      	subs	r0, r0, r7
 8000d16:	4540      	cmp	r0, r8
 8000d18:	d9f3      	bls.n	8000d02 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d1a:	2003      	movs	r0, #3
}
 8000d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d20:	1e91      	subs	r1, r2, #2
 8000d22:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d24:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d26:	d802      	bhi.n	8000d2e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d28:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d2c:	e7dd      	b.n	8000cea <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2e:	f013 0f02 	tst.w	r3, #2
 8000d32:	e7da      	b.n	8000cea <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d34:	b2ea      	uxtb	r2, r5
 8000d36:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	429d      	cmp	r5, r3
 8000d40:	f47f af7d 	bne.w	8000c3e <HAL_RCC_ClockConfig+0xa>
 8000d44:	e78f      	b.n	8000c66 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d46:	4905      	ldr	r1, [pc, #20]	; (8000d5c <HAL_RCC_ClockConfig+0x128>)
 8000d48:	68e0      	ldr	r0, [r4, #12]
 8000d4a:	688b      	ldr	r3, [r1, #8]
 8000d4c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d50:	4303      	orrs	r3, r0
 8000d52:	608b      	str	r3, [r1, #8]
 8000d54:	e78a      	b.n	8000c6c <HAL_RCC_ClockConfig+0x38>
 8000d56:	bf00      	nop
 8000d58:	40023c00 	.word	0x40023c00
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	08002112 	.word	0x08002112
 8000d64:	20001778 	.word	0x20001778

08000d68 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d68:	4b01      	ldr	r3, [pc, #4]	; (8000d70 <HAL_RCC_GetHCLKFreq+0x8>)
 8000d6a:	6818      	ldr	r0, [r3, #0]
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20001778 	.word	0x20001778

08000d74 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d7e:	5cd3      	ldrb	r3, [r2, r3]
 8000d80:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d82:	6810      	ldr	r0, [r2, #0]
}
 8000d84:	40d8      	lsrs	r0, r3
 8000d86:	4770      	bx	lr
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	08002122 	.word	0x08002122
 8000d90:	20001778 	.word	0x20001778

08000d94 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d9e:	5cd3      	ldrb	r3, [r2, r3]
 8000da0:	4a03      	ldr	r2, [pc, #12]	; (8000db0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000da2:	6810      	ldr	r0, [r2, #0]
}
 8000da4:	40d8      	lsrs	r0, r3
 8000da6:	4770      	bx	lr
 8000da8:	40023800 	.word	0x40023800
 8000dac:	08002122 	.word	0x08002122
 8000db0:	20001778 	.word	0x20001778

08000db4 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000db8:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000dba:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8000dbc:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000dbe:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000dc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000dc4:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000dc6:	6133      	str	r3, [r6, #16]
{
 8000dc8:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000dca:	6883      	ldr	r3, [r0, #8]
 8000dcc:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8000dce:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000dd0:	4303      	orrs	r3, r0
 8000dd2:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000dd4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000dd8:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000dda:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000dde:	430b      	orrs	r3, r1
 8000de0:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000de2:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000de4:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000de6:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8000dec:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000dee:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8000df2:	6173      	str	r3, [r6, #20]
 8000df4:	4b7a      	ldr	r3, [pc, #488]	; (8000fe0 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000df6:	d17c      	bne.n	8000ef2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000df8:	429e      	cmp	r6, r3
 8000dfa:	d003      	beq.n	8000e04 <UART_SetConfig+0x50>
 8000dfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e00:	429e      	cmp	r6, r3
 8000e02:	d144      	bne.n	8000e8e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000e04:	f7ff ffc6 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
 8000e08:	2519      	movs	r5, #25
 8000e0a:	fb05 f300 	mul.w	r3, r5, r0
 8000e0e:	6860      	ldr	r0, [r4, #4]
 8000e10:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000e14:	0040      	lsls	r0, r0, #1
 8000e16:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e1a:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e1e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000e22:	f7ff ffb7 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
 8000e26:	6863      	ldr	r3, [r4, #4]
 8000e28:	4368      	muls	r0, r5
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e30:	f7ff ffb0 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
 8000e34:	6863      	ldr	r3, [r4, #4]
 8000e36:	4368      	muls	r0, r5
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e3e:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e42:	fb09 7313 	mls	r3, r9, r3, r7
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	3332      	adds	r3, #50	; 0x32
 8000e4a:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000e54:	f7ff ff9e 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
 8000e58:	6862      	ldr	r2, [r4, #4]
 8000e5a:	4368      	muls	r0, r5
 8000e5c:	0052      	lsls	r2, r2, #1
 8000e5e:	fbb0 faf2 	udiv	sl, r0, r2
 8000e62:	f7ff ff97 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e66:	6863      	ldr	r3, [r4, #4]
 8000e68:	4368      	muls	r0, r5
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e70:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e74:	fb09 a313 	mls	r3, r9, r3, sl
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	3332      	adds	r3, #50	; 0x32
 8000e7c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e80:	f003 0307 	and.w	r3, r3, #7
 8000e84:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e86:	443b      	add	r3, r7
 8000e88:	60b3      	str	r3, [r6, #8]
 8000e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e8e:	f7ff ff71 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000e92:	2519      	movs	r5, #25
 8000e94:	fb05 f300 	mul.w	r3, r5, r0
 8000e98:	6860      	ldr	r0, [r4, #4]
 8000e9a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000e9e:	0040      	lsls	r0, r0, #1
 8000ea0:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ea4:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ea8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000eac:	f7ff ff62 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000eb0:	6863      	ldr	r3, [r4, #4]
 8000eb2:	4368      	muls	r0, r5
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fbb0 f7f3 	udiv	r7, r0, r3
 8000eba:	f7ff ff5b 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000ebe:	6863      	ldr	r3, [r4, #4]
 8000ec0:	4368      	muls	r0, r5
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ec8:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ecc:	fb09 7313 	mls	r3, r9, r3, r7
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	3332      	adds	r3, #50	; 0x32
 8000ed4:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000ede:	f7ff ff49 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000ee2:	6862      	ldr	r2, [r4, #4]
 8000ee4:	4368      	muls	r0, r5
 8000ee6:	0052      	lsls	r2, r2, #1
 8000ee8:	fbb0 faf2 	udiv	sl, r0, r2
 8000eec:	f7ff ff42 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000ef0:	e7b9      	b.n	8000e66 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000ef2:	429e      	cmp	r6, r3
 8000ef4:	d002      	beq.n	8000efc <UART_SetConfig+0x148>
 8000ef6:	4b3b      	ldr	r3, [pc, #236]	; (8000fe4 <UART_SetConfig+0x230>)
 8000ef8:	429e      	cmp	r6, r3
 8000efa:	d140      	bne.n	8000f7e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000efc:	f7ff ff4a 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
 8000f00:	6867      	ldr	r7, [r4, #4]
 8000f02:	2519      	movs	r5, #25
 8000f04:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000f08:	fb05 f300 	mul.w	r3, r5, r0
 8000f0c:	00bf      	lsls	r7, r7, #2
 8000f0e:	fbb3 f3f7 	udiv	r3, r3, r7
 8000f12:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f16:	011f      	lsls	r7, r3, #4
 8000f18:	f7ff ff3c 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
 8000f1c:	6863      	ldr	r3, [r4, #4]
 8000f1e:	4368      	muls	r0, r5
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	fbb0 f8f3 	udiv	r8, r0, r3
 8000f26:	f7ff ff35 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
 8000f2a:	6863      	ldr	r3, [r4, #4]
 8000f2c:	4368      	muls	r0, r5
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f34:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f38:	fb09 8313 	mls	r3, r9, r3, r8
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	3332      	adds	r3, #50	; 0x32
 8000f40:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f44:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8000f48:	f7ff ff24 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
 8000f4c:	6862      	ldr	r2, [r4, #4]
 8000f4e:	4368      	muls	r0, r5
 8000f50:	0092      	lsls	r2, r2, #2
 8000f52:	fbb0 faf2 	udiv	sl, r0, r2
 8000f56:	f7ff ff1d 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f5a:	6863      	ldr	r3, [r4, #4]
 8000f5c:	4368      	muls	r0, r5
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f64:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f68:	fb09 a313 	mls	r3, r9, r3, sl
 8000f6c:	011b      	lsls	r3, r3, #4
 8000f6e:	3332      	adds	r3, #50	; 0x32
 8000f70:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f74:	f003 030f 	and.w	r3, r3, #15
 8000f78:	ea43 0308 	orr.w	r3, r3, r8
 8000f7c:	e783      	b.n	8000e86 <UART_SetConfig+0xd2>
 8000f7e:	f7ff fef9 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000f82:	6867      	ldr	r7, [r4, #4]
 8000f84:	2519      	movs	r5, #25
 8000f86:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000f8a:	fb05 f300 	mul.w	r3, r5, r0
 8000f8e:	00bf      	lsls	r7, r7, #2
 8000f90:	fbb3 f3f7 	udiv	r3, r3, r7
 8000f94:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f98:	011f      	lsls	r7, r3, #4
 8000f9a:	f7ff feeb 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000f9e:	6863      	ldr	r3, [r4, #4]
 8000fa0:	4368      	muls	r0, r5
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	fbb0 f8f3 	udiv	r8, r0, r3
 8000fa8:	f7ff fee4 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000fac:	6863      	ldr	r3, [r4, #4]
 8000fae:	4368      	muls	r0, r5
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fb6:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fba:	fb09 8313 	mls	r3, r9, r3, r8
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	3332      	adds	r3, #50	; 0x32
 8000fc2:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fc6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8000fca:	f7ff fed3 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000fce:	6862      	ldr	r2, [r4, #4]
 8000fd0:	4368      	muls	r0, r5
 8000fd2:	0092      	lsls	r2, r2, #2
 8000fd4:	fbb0 faf2 	udiv	sl, r0, r2
 8000fd8:	f7ff fecc 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000fdc:	e7bd      	b.n	8000f5a <UART_SetConfig+0x1a6>
 8000fde:	bf00      	nop
 8000fe0:	40011000 	.word	0x40011000
 8000fe4:	40011400 	.word	0x40011400

08000fe8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fea:	4604      	mov	r4, r0
 8000fec:	460e      	mov	r6, r1
 8000fee:	4617      	mov	r7, r2
 8000ff0:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000ff2:	6821      	ldr	r1, [r4, #0]
 8000ff4:	680b      	ldr	r3, [r1, #0]
 8000ff6:	ea36 0303 	bics.w	r3, r6, r3
 8000ffa:	d101      	bne.n	8001000 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000ffc:	2000      	movs	r0, #0
}
 8000ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001000:	1c6b      	adds	r3, r5, #1
 8001002:	d0f7      	beq.n	8000ff4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001004:	b995      	cbnz	r5, 800102c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800100e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001010:	695a      	ldr	r2, [r3, #20]
 8001012:	f022 0201 	bic.w	r2, r2, #1
 8001016:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001018:	2320      	movs	r3, #32
 800101a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800101e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001022:	2300      	movs	r3, #0
 8001024:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001028:	2003      	movs	r0, #3
 800102a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800102c:	f7ff fb02 	bl	8000634 <HAL_GetTick>
 8001030:	1bc0      	subs	r0, r0, r7
 8001032:	4285      	cmp	r5, r0
 8001034:	d2dd      	bcs.n	8000ff2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001036:	e7e6      	b.n	8001006 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001038 <HAL_UART_Init>:
{
 8001038:	b510      	push	{r4, lr}
  if(huart == NULL)
 800103a:	4604      	mov	r4, r0
 800103c:	b340      	cbz	r0, 8001090 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800103e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001042:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001046:	b91b      	cbnz	r3, 8001050 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001048:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800104c:	f000 fb76 	bl	800173c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001050:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001052:	2324      	movs	r3, #36	; 0x24
 8001054:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001058:	68d3      	ldr	r3, [r2, #12]
 800105a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800105e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001060:	4620      	mov	r0, r4
 8001062:	f7ff fea7 	bl	8000db4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800106e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001070:	695a      	ldr	r2, [r3, #20]
 8001072:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001076:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800107e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001080:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001082:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001084:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001086:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800108a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800108e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001090:	2001      	movs	r0, #1
}
 8001092:	bd10      	pop	{r4, pc}

08001094 <HAL_UART_Transmit>:
{
 8001094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001098:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 800109a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800109e:	2b20      	cmp	r3, #32
{
 80010a0:	4604      	mov	r4, r0
 80010a2:	460d      	mov	r5, r1
 80010a4:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80010a6:	d14f      	bne.n	8001148 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80010a8:	2900      	cmp	r1, #0
 80010aa:	d04a      	beq.n	8001142 <HAL_UART_Transmit+0xae>
 80010ac:	2a00      	cmp	r2, #0
 80010ae:	d048      	beq.n	8001142 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80010b0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d047      	beq.n	8001148 <HAL_UART_Transmit+0xb4>
 80010b8:	2301      	movs	r3, #1
 80010ba:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010be:	2300      	movs	r3, #0
 80010c0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010c2:	2321      	movs	r3, #33	; 0x21
 80010c4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80010c8:	f7ff fab4 	bl	8000634 <HAL_GetTick>
    huart->TxXferSize = Size;
 80010cc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80010d0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80010d2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80010d6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80010d8:	b29b      	uxth	r3, r3
 80010da:	b96b      	cbnz	r3, 80010f8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	4632      	mov	r2, r6
 80010e0:	2140      	movs	r1, #64	; 0x40
 80010e2:	4620      	mov	r0, r4
 80010e4:	f7ff ff80 	bl	8000fe8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010e8:	b9b0      	cbnz	r0, 8001118 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 80010ea:	2320      	movs	r3, #32
 80010ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80010f0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80010f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80010f8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80010fa:	3b01      	subs	r3, #1
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001100:	68a3      	ldr	r3, [r4, #8]
 8001102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001106:	4632      	mov	r2, r6
 8001108:	463b      	mov	r3, r7
 800110a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800110e:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001110:	d10e      	bne.n	8001130 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001112:	f7ff ff69 	bl	8000fe8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001116:	b110      	cbz	r0, 800111e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001118:	2003      	movs	r0, #3
 800111a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800111e:	882b      	ldrh	r3, [r5, #0]
 8001120:	6822      	ldr	r2, [r4, #0]
 8001122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001126:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001128:	6923      	ldr	r3, [r4, #16]
 800112a:	b943      	cbnz	r3, 800113e <HAL_UART_Transmit+0xaa>
          pData +=2U;
 800112c:	3502      	adds	r5, #2
 800112e:	e7d2      	b.n	80010d6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001130:	f7ff ff5a 	bl	8000fe8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001134:	2800      	cmp	r0, #0
 8001136:	d1ef      	bne.n	8001118 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001138:	6823      	ldr	r3, [r4, #0]
 800113a:	782a      	ldrb	r2, [r5, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	3501      	adds	r5, #1
 8001140:	e7c9      	b.n	80010d6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001142:	2001      	movs	r0, #1
 8001144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001148:	2002      	movs	r0, #2
}
 800114a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001150 <do_string_command>:
    int inc = (int)(degrees_angle*215000/360); //3000 inc/evolution, 1:25reductor, 15:43 ratio between central gear and wings
    return inc;
}

void do_string_command(char first, char second, int number)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	603a      	str	r2, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	460b      	mov	r3, r1
 800115e:	71bb      	strb	r3, [r7, #6]
	for(int i = 0; i< sizeof(command_string); i++){
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	e007      	b.n	8001176 <do_string_command+0x26>
		command_string[i] = 0;
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <do_string_command+0x50>)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i< sizeof(command_string); i++){
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3301      	adds	r3, #1
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2b09      	cmp	r3, #9
 800117a:	d9f4      	bls.n	8001166 <do_string_command+0x16>
	}
	command_string[0] = first;
 800117c:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <do_string_command+0x50>)
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	7013      	strb	r3, [r2, #0]
	command_string[1] = second;
 8001182:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <do_string_command+0x50>)
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	7053      	strb	r3, [r2, #1]
	char* commandIncStart = (char*)(&command_string[2]);
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <do_string_command+0x54>)
 800118a:	60bb      	str	r3, [r7, #8]
	sprintf(commandIncStart, "%d", number);
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	4906      	ldr	r1, [pc, #24]	; (80011a8 <do_string_command+0x58>)
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f000 fb75 	bl	8001880 <siprintf>
	return command_string;
 8001196:	bf00      	nop
}
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000180c 	.word	0x2000180c
 80011a4:	2000180e 	.word	0x2000180e
 80011a8:	080020f0 	.word	0x080020f0

080011ac <angle_tab>:
    correction_margin_last_error = inc_error;
    motor_goto_position_inc(command_inc);
    return;
}

float angle_tab(float altitude, float speed) {
 80011ac:	b480      	push	{r7}
 80011ae:	b08f      	sub	sp, #60	; 0x3c
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80011b6:	edc7 0a00 	vstr	s1, [r7]
	int index_altitude=0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
	if(altitude < look_up_tab[0][0])
 80011be:	4b7f      	ldr	r3, [pc, #508]	; (80013bc <angle_tab+0x210>)
 80011c0:	ed93 7a00 	vldr	s14, [r3]
 80011c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d0:	dd02      	ble.n	80011d8 <angle_tab+0x2c>
	{
		return 0.0;
 80011d2:	f04f 0300 	mov.w	r3, #0
 80011d6:	e0e8      	b.n	80013aa <angle_tab+0x1fe>
	}
	else if(altitude > look_up_tab[TABLE_LENGTH-1][0])
 80011d8:	4b78      	ldr	r3, [pc, #480]	; (80013bc <angle_tab+0x210>)
 80011da:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80011de:	3304      	adds	r3, #4
 80011e0:	ed93 7a00 	vldr	s14, [r3]
 80011e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	d501      	bpl.n	80011f6 <angle_tab+0x4a>
	{
		return MAX_OPENING_DEG;
 80011f2:	4b73      	ldr	r3, [pc, #460]	; (80013c0 <angle_tab+0x214>)
 80011f4:	e0d9      	b.n	80013aa <angle_tab+0x1fe>
	}
	else
	{
		int j;
		float mean_speed_vector[TABLE_DIFF_SPEEDS_SAME_ALTITUDE];
		while(look_up_tab[index_altitude][0] < altitude)
 80011f6:	e002      	b.n	80011fe <angle_tab+0x52>
		{
			index_altitude += TABLE_DIFF_SPEEDS_SAME_ALTITUDE;
 80011f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fa:	3305      	adds	r3, #5
 80011fc:	637b      	str	r3, [r7, #52]	; 0x34
		while(look_up_tab[index_altitude][0] < altitude)
 80011fe:	496f      	ldr	r1, [pc, #444]	; (80013bc <angle_tab+0x210>)
 8001200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	ed93 7a00 	vldr	s14, [r3]
 8001210:	edd7 7a01 	vldr	s15, [r7, #4]
 8001214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	d4ec      	bmi.n	80011f8 <angle_tab+0x4c>
		}
		float phi = (altitude - look_up_tab[index_altitude-TABLE_DIFF_SPEEDS_SAME_ALTITUDE][0])/(look_up_tab[index_altitude][0] - look_up_tab[index_altitude-TABLE_DIFF_SPEEDS_SAME_ALTITUDE][0]);
 800121e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001220:	1f5a      	subs	r2, r3, #5
 8001222:	4966      	ldr	r1, [pc, #408]	; (80013bc <angle_tab+0x210>)
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ed97 7a01 	vldr	s14, [r7, #4]
 8001236:	ee77 6a67 	vsub.f32	s13, s14, s15
 800123a:	4960      	ldr	r1, [pc, #384]	; (80013bc <angle_tab+0x210>)
 800123c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	ed93 7a00 	vldr	s14, [r3]
 800124c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800124e:	1f5a      	subs	r2, r3, #5
 8001250:	495a      	ldr	r1, [pc, #360]	; (80013bc <angle_tab+0x210>)
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001268:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		for(j=0;j<TABLE_DIFF_SPEEDS_SAME_ALTITUDE; j++)
 800126c:	2300      	movs	r3, #0
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
 8001270:	e031      	b.n	80012d6 <angle_tab+0x12a>
		{
			mean_speed_vector[j] = phi*look_up_tab[index_altitude-TABLE_DIFF_SPEEDS_SAME_ALTITUDE+j][1] + (1-phi)*look_up_tab[index_altitude+j][1];
 8001272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001274:	1f5a      	subs	r2, r3, #5
 8001276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001278:	441a      	add	r2, r3
 800127a:	4950      	ldr	r1, [pc, #320]	; (80013bc <angle_tab+0x210>)
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	3304      	adds	r3, #4
 8001288:	ed93 7a00 	vldr	s14, [r3]
 800128c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001290:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001294:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001298:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800129c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a4:	441a      	add	r2, r3
 80012a6:	4945      	ldr	r1, [pc, #276]	; (80013bc <angle_tab+0x210>)
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	3304      	adds	r3, #4
 80012b4:	edd3 7a00 	vldr	s15, [r3]
 80012b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80012c8:	4413      	add	r3, r2
 80012ca:	3b2c      	subs	r3, #44	; 0x2c
 80012cc:	edc3 7a00 	vstr	s15, [r3]
		for(j=0;j<TABLE_DIFF_SPEEDS_SAME_ALTITUDE; j++)
 80012d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d2:	3301      	adds	r3, #1
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
 80012d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d8:	2b04      	cmp	r3, #4
 80012da:	ddca      	ble.n	8001272 <angle_tab+0xc6>
		}

		int index_speed = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(speed < mean_speed_vector[0])
 80012e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80012e4:	edd7 7a00 	vldr	s15, [r7]
 80012e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f0:	dd02      	ble.n	80012f8 <angle_tab+0x14c>
		{
			return 0.0;
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	e058      	b.n	80013aa <angle_tab+0x1fe>
		}
		else if(speed > mean_speed_vector[TABLE_DIFF_SPEEDS_SAME_ALTITUDE-1])
 80012f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80012fc:	edd7 7a00 	vldr	s15, [r7]
 8001300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001308:	d501      	bpl.n	800130e <angle_tab+0x162>
		{
			return MAX_OPENING_DEG;
 800130a:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <angle_tab+0x214>)
 800130c:	e04d      	b.n	80013aa <angle_tab+0x1fe>
		}
		else
		{
			while(mean_speed_vector[index_speed] < speed)
 800130e:	e002      	b.n	8001316 <angle_tab+0x16a>
			{
				index_speed += 1;
 8001310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001312:	3301      	adds	r3, #1
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(mean_speed_vector[index_speed] < speed)
 8001316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800131e:	4413      	add	r3, r2
 8001320:	3b2c      	subs	r3, #44	; 0x2c
 8001322:	ed93 7a00 	vldr	s14, [r3]
 8001326:	edd7 7a00 	vldr	s15, [r7]
 800132a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001332:	d4ed      	bmi.n	8001310 <angle_tab+0x164>
			}
			float theta = (speed - mean_speed_vector[index_speed-1])/(mean_speed_vector[index_speed]);
 8001334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001336:	3b01      	subs	r3, #1
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800133e:	4413      	add	r3, r2
 8001340:	3b2c      	subs	r3, #44	; 0x2c
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	ed97 7a00 	vldr	s14, [r7]
 800134a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800134e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001356:	4413      	add	r3, r2
 8001358:	3b2c      	subs	r3, #44	; 0x2c
 800135a:	ed93 7a00 	vldr	s14, [r3]
 800135e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001362:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			float mean_angle = theta*mean_speed_vector[index_speed-1] + (1-theta)*mean_speed_vector[index_speed];
 8001366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001368:	3b01      	subs	r3, #1
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001370:	4413      	add	r3, r2
 8001372:	3b2c      	subs	r3, #44	; 0x2c
 8001374:	ed93 7a00 	vldr	s14, [r3]
 8001378:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800137c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001380:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001384:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001388:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001394:	4413      	add	r3, r2
 8001396:	3b2c      	subs	r3, #44	; 0x2c
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a4:	edc7 7a08 	vstr	s15, [r7, #32]
			return mean_angle;
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	ee07 3a90 	vmov	s15, r3
				closest_speed_lower_altitude_higher = look_up_table[index_altitude + index_speed - 1][1];
				closest_speed_higher_altitude_higher = look_up_table[index_altitude + index_speed][1];
			}
			//COMPUTE THE ANGLE BY 2D interpolation
*/
}
 80013ae:	eeb0 0a67 	vmov.f32	s0, s15
 80013b2:	373c      	adds	r7, #60	; 0x3c
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	20000008 	.word	0x20000008
 80013c0:	433e0000 	.word	0x433e0000

080013c4 <debug>:
 void debug(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
		float test1 = angle_tab(200, 100); // should be 0
 80013ca:	eddf 0a56 	vldr	s1, [pc, #344]	; 8001524 <debug+0x160>
 80013ce:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8001528 <debug+0x164>
 80013d2:	f7ff feeb 	bl	80011ac <angle_tab>
 80013d6:	ed87 0a05 	vstr	s0, [r7, #20]
		float test2 = angle_tab(1500, 50); // should be full open
 80013da:	eddf 0a54 	vldr	s1, [pc, #336]	; 800152c <debug+0x168>
 80013de:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001530 <debug+0x16c>
 80013e2:	f7ff fee3 	bl	80011ac <angle_tab>
 80013e6:	ed87 0a04 	vstr	s0, [r7, #16]
		float test3 = angle_tab(238, 131); // should be somewhewere in between
 80013ea:	eddf 0a52 	vldr	s1, [pc, #328]	; 8001534 <debug+0x170>
 80013ee:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8001538 <debug+0x174>
 80013f2:	f7ff fedb 	bl	80011ac <angle_tab>
 80013f6:	ed87 0a03 	vstr	s0, [r7, #12]
		float test4 = angle_tab(250, 150); // should be full open
 80013fa:	eddf 0a50 	vldr	s1, [pc, #320]	; 800153c <debug+0x178>
 80013fe:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001540 <debug+0x17c>
 8001402:	f7ff fed3 	bl	80011ac <angle_tab>
 8001406:	ed87 0a02 	vstr	s0, [r7, #8]
		float test5 = angle_tab(250, 100); // should be 0
 800140a:	eddf 0a46 	vldr	s1, [pc, #280]	; 8001524 <debug+0x160>
 800140e:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8001540 <debug+0x17c>
 8001412:	f7ff fecb 	bl	80011ac <angle_tab>
 8001416:	ed87 0a01 	vstr	s0, [r7, #4]
		float test6 = angle_tab(446, 110); // should be somewhere in between
 800141a:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8001544 <debug+0x180>
 800141e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8001548 <debug+0x184>
 8001422:	f7ff fec3 	bl	80011ac <angle_tab>
 8001426:	ed87 0a00 	vstr	s0, [r7]

		do_string_command('L', 'A', (int)test1);
 800142a:	edd7 7a05 	vldr	s15, [r7, #20]
 800142e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001432:	ee17 2a90 	vmov	r2, s15
 8001436:	2141      	movs	r1, #65	; 0x41
 8001438:	204c      	movs	r0, #76	; 0x4c
 800143a:	f7ff fe89 	bl	8001150 <do_string_command>
		HAL_UART_Transmit(&huart2, command_string, strlen(command_string), 30);
 800143e:	4843      	ldr	r0, [pc, #268]	; (800154c <debug+0x188>)
 8001440:	f7fe fece 	bl	80001e0 <strlen>
 8001444:	4603      	mov	r3, r0
 8001446:	b29a      	uxth	r2, r3
 8001448:	231e      	movs	r3, #30
 800144a:	4940      	ldr	r1, [pc, #256]	; (800154c <debug+0x188>)
 800144c:	4840      	ldr	r0, [pc, #256]	; (8001550 <debug+0x18c>)
 800144e:	f7ff fe21 	bl	8001094 <HAL_UART_Transmit>
		do_string_command('L', 'A', (int)test2);
 8001452:	edd7 7a04 	vldr	s15, [r7, #16]
 8001456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800145a:	ee17 2a90 	vmov	r2, s15
 800145e:	2141      	movs	r1, #65	; 0x41
 8001460:	204c      	movs	r0, #76	; 0x4c
 8001462:	f7ff fe75 	bl	8001150 <do_string_command>
		HAL_UART_Transmit(&huart2, command_string, strlen(command_string), 30);
 8001466:	4839      	ldr	r0, [pc, #228]	; (800154c <debug+0x188>)
 8001468:	f7fe feba 	bl	80001e0 <strlen>
 800146c:	4603      	mov	r3, r0
 800146e:	b29a      	uxth	r2, r3
 8001470:	231e      	movs	r3, #30
 8001472:	4936      	ldr	r1, [pc, #216]	; (800154c <debug+0x188>)
 8001474:	4836      	ldr	r0, [pc, #216]	; (8001550 <debug+0x18c>)
 8001476:	f7ff fe0d 	bl	8001094 <HAL_UART_Transmit>
		do_string_command('L', 'A', (int)test3);
 800147a:	edd7 7a03 	vldr	s15, [r7, #12]
 800147e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001482:	ee17 2a90 	vmov	r2, s15
 8001486:	2141      	movs	r1, #65	; 0x41
 8001488:	204c      	movs	r0, #76	; 0x4c
 800148a:	f7ff fe61 	bl	8001150 <do_string_command>
		HAL_UART_Transmit(&huart2, command_string, strlen(command_string), 30);
 800148e:	482f      	ldr	r0, [pc, #188]	; (800154c <debug+0x188>)
 8001490:	f7fe fea6 	bl	80001e0 <strlen>
 8001494:	4603      	mov	r3, r0
 8001496:	b29a      	uxth	r2, r3
 8001498:	231e      	movs	r3, #30
 800149a:	492c      	ldr	r1, [pc, #176]	; (800154c <debug+0x188>)
 800149c:	482c      	ldr	r0, [pc, #176]	; (8001550 <debug+0x18c>)
 800149e:	f7ff fdf9 	bl	8001094 <HAL_UART_Transmit>
		do_string_command('L', 'A', (int)test4);
 80014a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80014a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014aa:	ee17 2a90 	vmov	r2, s15
 80014ae:	2141      	movs	r1, #65	; 0x41
 80014b0:	204c      	movs	r0, #76	; 0x4c
 80014b2:	f7ff fe4d 	bl	8001150 <do_string_command>
		HAL_UART_Transmit(&huart2, command_string, strlen(command_string), 30);
 80014b6:	4825      	ldr	r0, [pc, #148]	; (800154c <debug+0x188>)
 80014b8:	f7fe fe92 	bl	80001e0 <strlen>
 80014bc:	4603      	mov	r3, r0
 80014be:	b29a      	uxth	r2, r3
 80014c0:	231e      	movs	r3, #30
 80014c2:	4922      	ldr	r1, [pc, #136]	; (800154c <debug+0x188>)
 80014c4:	4822      	ldr	r0, [pc, #136]	; (8001550 <debug+0x18c>)
 80014c6:	f7ff fde5 	bl	8001094 <HAL_UART_Transmit>
		do_string_command('L', 'A', (int)test5);
 80014ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d2:	ee17 2a90 	vmov	r2, s15
 80014d6:	2141      	movs	r1, #65	; 0x41
 80014d8:	204c      	movs	r0, #76	; 0x4c
 80014da:	f7ff fe39 	bl	8001150 <do_string_command>
		HAL_UART_Transmit(&huart2, command_string, strlen(command_string), 30);
 80014de:	481b      	ldr	r0, [pc, #108]	; (800154c <debug+0x188>)
 80014e0:	f7fe fe7e 	bl	80001e0 <strlen>
 80014e4:	4603      	mov	r3, r0
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	231e      	movs	r3, #30
 80014ea:	4918      	ldr	r1, [pc, #96]	; (800154c <debug+0x188>)
 80014ec:	4818      	ldr	r0, [pc, #96]	; (8001550 <debug+0x18c>)
 80014ee:	f7ff fdd1 	bl	8001094 <HAL_UART_Transmit>
		do_string_command('L', 'A', (int)test6);
 80014f2:	edd7 7a00 	vldr	s15, [r7]
 80014f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014fa:	ee17 2a90 	vmov	r2, s15
 80014fe:	2141      	movs	r1, #65	; 0x41
 8001500:	204c      	movs	r0, #76	; 0x4c
 8001502:	f7ff fe25 	bl	8001150 <do_string_command>
		HAL_UART_Transmit(&huart2, command_string, strlen(command_string), 30);
 8001506:	4811      	ldr	r0, [pc, #68]	; (800154c <debug+0x188>)
 8001508:	f7fe fe6a 	bl	80001e0 <strlen>
 800150c:	4603      	mov	r3, r0
 800150e:	b29a      	uxth	r2, r3
 8001510:	231e      	movs	r3, #30
 8001512:	490e      	ldr	r1, [pc, #56]	; (800154c <debug+0x188>)
 8001514:	480e      	ldr	r0, [pc, #56]	; (8001550 <debug+0x18c>)
 8001516:	f7ff fdbd 	bl	8001094 <HAL_UART_Transmit>
		return;
 800151a:	bf00      	nop
}
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	42c80000 	.word	0x42c80000
 8001528:	43480000 	.word	0x43480000
 800152c:	42480000 	.word	0x42480000
 8001530:	44bb8000 	.word	0x44bb8000
 8001534:	43030000 	.word	0x43030000
 8001538:	436e0000 	.word	0x436e0000
 800153c:	43160000 	.word	0x43160000
 8001540:	437a0000 	.word	0x437a0000
 8001544:	42dc0000 	.word	0x42dc0000
 8001548:	43df0000 	.word	0x43df0000
 800154c:	2000180c 	.word	0x2000180c
 8001550:	20001818 	.word	0x20001818

08001554 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001554:	b530      	push	{r4, r5, lr}
 8001556:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8001558:	2200      	movs	r2, #0
 800155a:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <SystemClock_Config+0xa4>)
 800155c:	9201      	str	r2, [sp, #4]
 800155e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001560:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001564:	6419      	str	r1, [r3, #64]	; 0x40
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001568:	4924      	ldr	r1, [pc, #144]	; (80015fc <SystemClock_Config+0xa8>)
	__HAL_RCC_PWR_CLK_ENABLE()
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001572:	9202      	str	r2, [sp, #8]
 8001574:	680b      	ldr	r3, [r1, #0]
 8001576:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800157a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800157e:	600b      	str	r3, [r1, #0]
 8001580:	680b      	ldr	r3, [r1, #0]
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001582:	920f      	str	r2, [sp, #60]	; 0x3c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001588:	9302      	str	r3, [sp, #8]
 800158a:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158c:	2301      	movs	r3, #1
 800158e:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8001590:	2310      	movs	r3, #16
 8001592:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001594:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001596:	f44f 73a8 	mov.w	r3, #336	; 0x150
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800159a:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLN = 336;
 800159c:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800159e:	2504      	movs	r5, #4
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80015a0:	2307      	movs	r3, #7
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80015a2:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a4:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a6:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015a8:	9512      	str	r5, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80015aa:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80015ac:	f7ff f992 	bl	80008d4 <HAL_RCC_OscConfig>
 80015b0:	b100      	cbz	r0, 80015b4 <SystemClock_Config+0x60>
 80015b2:	e7fe      	b.n	80015b2 <SystemClock_Config+0x5e>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80015b4:	230f      	movs	r3, #15
 80015b6:	9303      	str	r3, [sp, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b8:	9005      	str	r0, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015be:	9007      	str	r0, [sp, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80015c0:	4621      	mov	r1, r4
 80015c2:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c4:	9404      	str	r4, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015c6:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80015c8:	f7ff fb34 	bl	8000c34 <HAL_RCC_ClockConfig>
 80015cc:	4604      	mov	r4, r0
 80015ce:	b100      	cbz	r0, 80015d2 <SystemClock_Config+0x7e>
 80015d0:	e7fe      	b.n	80015d0 <SystemClock_Config+0x7c>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 80015d2:	f7ff fbc9 	bl	8000d68 <HAL_RCC_GetHCLKFreq>
 80015d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015da:	fbb0 f0f3 	udiv	r0, r0, r3
 80015de:	f7ff f875 	bl	80006cc <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80015e2:	4628      	mov	r0, r5
 80015e4:	f7ff f888 	bl	80006f8 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80015e8:	4622      	mov	r2, r4
 80015ea:	4621      	mov	r1, r4
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f7ff f838 	bl	8000664 <HAL_NVIC_SetPriority>
}
 80015f4:	b015      	add	sp, #84	; 0x54
 80015f6:	bd30      	pop	{r4, r5, pc}
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000

08001600 <main>:
int main(void) {
 8001600:	b500      	push	{lr}
 8001602:	b08b      	sub	sp, #44	; 0x2c
static void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001604:	2400      	movs	r4, #0
	HAL_Init();
 8001606:	f7fe ffef 	bl	80005e8 <HAL_Init>
	SystemClock_Config();
 800160a:	f7ff ffa3 	bl	8001554 <SystemClock_Config>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800160e:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <main+0xc4>)
 8001610:	9401      	str	r4, [sp, #4]
 8001612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001614:	482c      	ldr	r0, [pc, #176]	; (80016c8 <main+0xc8>)
	huart2.Instance = USART2;
 8001616:	4d2d      	ldr	r5, [pc, #180]	; (80016cc <main+0xcc>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001618:	f042 0204 	orr.w	r2, r2, #4
 800161c:	631a      	str	r2, [r3, #48]	; 0x30
 800161e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001620:	f002 0204 	and.w	r2, r2, #4
 8001624:	9201      	str	r2, [sp, #4]
 8001626:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8001628:	9402      	str	r4, [sp, #8]
 800162a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800162c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001630:	631a      	str	r2, [r3, #48]	; 0x30
 8001632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001634:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001638:	9202      	str	r2, [sp, #8]
 800163a:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800163c:	9403      	str	r4, [sp, #12]
 800163e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001640:	f042 0201 	orr.w	r2, r2, #1
 8001644:	631a      	str	r2, [r3, #48]	; 0x30
 8001646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001648:	f002 0201 	and.w	r2, r2, #1
 800164c:	9203      	str	r2, [sp, #12]
 800164e:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001650:	9404      	str	r4, [sp, #16]
 8001652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001654:	f042 0202 	orr.w	r2, r2, #2
 8001658:	631a      	str	r2, [r3, #48]	; 0x30
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	f003 0302 	and.w	r3, r3, #2
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001660:	4622      	mov	r2, r4
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001662:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001664:	2120      	movs	r1, #32
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001666:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001668:	f7ff f92e 	bl	80008c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800166c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001670:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001672:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <main+0xd0>)
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001676:	4817      	ldr	r0, [pc, #92]	; (80016d4 <main+0xd4>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001678:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800167c:	f7ff f84e 	bl	800071c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001680:	2320      	movs	r3, #32
 8001682:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001684:	4810      	ldr	r0, [pc, #64]	; (80016c8 <main+0xc8>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800168a:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001690:	f7ff f844 	bl	800071c <HAL_GPIO_Init>
	huart2.Init.BaudRate = 115200;
 8001694:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <main+0xd8>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	60ac      	str	r4, [r5, #8]
	huart2.Init.BaudRate = 115200;
 8001698:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800169c:	e885 000c 	stmia.w	r5, {r2, r3}
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80016a0:	4628      	mov	r0, r5
	huart2.Init.Mode = UART_MODE_TX_RX;
 80016a2:	230c      	movs	r3, #12
	huart2.Init.StopBits = UART_STOPBITS_1;
 80016a4:	60ec      	str	r4, [r5, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80016a6:	612c      	str	r4, [r5, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80016a8:	616b      	str	r3, [r5, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	61ac      	str	r4, [r5, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	61ec      	str	r4, [r5, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80016ae:	f7ff fcc3 	bl	8001038 <HAL_UART_Init>
 80016b2:	b100      	cbz	r0, 80016b6 <main+0xb6>
 80016b4:	e7fe      	b.n	80016b4 <main+0xb4>
	HAL_UART_Init(&huart2);
 80016b6:	4628      	mov	r0, r5
 80016b8:	f7ff fcbe 	bl	8001038 <HAL_UART_Init>
	debug();
 80016bc:	f7ff fe82 	bl	80013c4 <debug>
 80016c0:	e7fe      	b.n	80016c0 <main+0xc0>
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020000 	.word	0x40020000
 80016cc:	20001818 	.word	0x20001818
 80016d0:	10210000 	.word	0x10210000
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40004400 	.word	0x40004400

080016dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016de:	2007      	movs	r0, #7
 80016e0:	f7fe ffae 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	4611      	mov	r1, r2
 80016e8:	f06f 000b 	mvn.w	r0, #11
 80016ec:	f7fe ffba 	bl	8000664 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	4611      	mov	r1, r2
 80016f4:	f06f 000a 	mvn.w	r0, #10
 80016f8:	f7fe ffb4 	bl	8000664 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80016fc:	2200      	movs	r2, #0
 80016fe:	4611      	mov	r1, r2
 8001700:	f06f 0009 	mvn.w	r0, #9
 8001704:	f7fe ffae 	bl	8000664 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	4611      	mov	r1, r2
 800170c:	f06f 0004 	mvn.w	r0, #4
 8001710:	f7fe ffa8 	bl	8000664 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	4611      	mov	r1, r2
 8001718:	f06f 0003 	mvn.w	r0, #3
 800171c:	f7fe ffa2 	bl	8000664 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	4611      	mov	r1, r2
 8001724:	f06f 0001 	mvn.w	r0, #1
 8001728:	f7fe ff9c 	bl	8000664 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	4611      	mov	r1, r2
 8001730:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001734:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001738:	f7fe bf94 	b.w	8000664 <HAL_NVIC_SetPriority>

0800173c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800173c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800173e:	6802      	ldr	r2, [r0, #0]
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_UART_MspInit+0x40>)
 8001742:	429a      	cmp	r2, r3
 8001744:	d117      	bne.n	8001776 <HAL_UART_MspInit+0x3a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <HAL_UART_MspInit+0x44>)
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	6c11      	ldr	r1, [r2, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	480d      	ldr	r0, [pc, #52]	; (8001784 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001750:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001754:	6411      	str	r1, [r2, #64]	; 0x40
 8001756:	6c12      	ldr	r2, [r2, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	9303      	str	r3, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 800175a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800175e:	9200      	str	r2, [sp, #0]
 8001760:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001764:	220c      	movs	r2, #12
 8001766:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001768:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001770:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f7fe ffd3 	bl	800071c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001776:	b007      	add	sp, #28
 8001778:	f85d fb04 	ldr.w	pc, [sp], #4
 800177c:	40004400 	.word	0x40004400
 8001780:	40023800 	.word	0x40023800
 8001784:	40020000 	.word	0x40020000

08001788 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001788:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178a:	f7fe ff47 	bl	800061c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001792:	f7fe bfbe 	b.w	8000712 <HAL_SYSTICK_IRQHandler>
	...

08001798 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001798:	490f      	ldr	r1, [pc, #60]	; (80017d8 <SystemInit+0x40>)
 800179a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800179e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <SystemInit+0x44>)
 80017a8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017aa:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80017ac:	f042 0201 	orr.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80017b2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80017ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017be:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80017c0:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <SystemInit+0x48>)
 80017c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017ca:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80017cc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80017d2:	608b      	str	r3, [r1, #8]
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00
 80017dc:	40023800 	.word	0x40023800
 80017e0:	24003010 	.word	0x24003010

080017e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800181c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017ea:	e003      	b.n	80017f4 <LoopCopyDataInit>

080017ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017f2:	3104      	adds	r1, #4

080017f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017f4:	480b      	ldr	r0, [pc, #44]	; (8001824 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017fc:	d3f6      	bcc.n	80017ec <CopyDataInit>
  ldr  r2, =_sbss
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001800:	e002      	b.n	8001808 <LoopFillZerobss>

08001802 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001802:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001804:	f842 3b04 	str.w	r3, [r2], #4

08001808 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800180a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800180c:	d3f9      	bcc.n	8001802 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800180e:	f7ff ffc3 	bl	8001798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001812:	f000 f811 	bl	8001838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001816:	f7ff fef3 	bl	8001600 <main>
  bx  lr    
 800181a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800181c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001820:	08002170 	.word	0x08002170
  ldr  r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001828:	200017e0 	.word	0x200017e0
  ldr  r2, =_sbss
 800182c:	200017e0 	.word	0x200017e0
  ldr  r3, = _ebss
 8001830:	2000185c 	.word	0x2000185c

08001834 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <ADC_IRQHandler>
	...

08001838 <__libc_init_array>:
 8001838:	b570      	push	{r4, r5, r6, lr}
 800183a:	4e0d      	ldr	r6, [pc, #52]	; (8001870 <__libc_init_array+0x38>)
 800183c:	4c0d      	ldr	r4, [pc, #52]	; (8001874 <__libc_init_array+0x3c>)
 800183e:	1ba4      	subs	r4, r4, r6
 8001840:	10a4      	asrs	r4, r4, #2
 8001842:	2500      	movs	r5, #0
 8001844:	42a5      	cmp	r5, r4
 8001846:	d109      	bne.n	800185c <__libc_init_array+0x24>
 8001848:	4e0b      	ldr	r6, [pc, #44]	; (8001878 <__libc_init_array+0x40>)
 800184a:	4c0c      	ldr	r4, [pc, #48]	; (800187c <__libc_init_array+0x44>)
 800184c:	f000 fc44 	bl	80020d8 <_init>
 8001850:	1ba4      	subs	r4, r4, r6
 8001852:	10a4      	asrs	r4, r4, #2
 8001854:	2500      	movs	r5, #0
 8001856:	42a5      	cmp	r5, r4
 8001858:	d105      	bne.n	8001866 <__libc_init_array+0x2e>
 800185a:	bd70      	pop	{r4, r5, r6, pc}
 800185c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001860:	4798      	blx	r3
 8001862:	3501      	adds	r5, #1
 8001864:	e7ee      	b.n	8001844 <__libc_init_array+0xc>
 8001866:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800186a:	4798      	blx	r3
 800186c:	3501      	adds	r5, #1
 800186e:	e7f2      	b.n	8001856 <__libc_init_array+0x1e>
 8001870:	08002168 	.word	0x08002168
 8001874:	08002168 	.word	0x08002168
 8001878:	08002168 	.word	0x08002168
 800187c:	0800216c 	.word	0x0800216c

08001880 <siprintf>:
 8001880:	b40e      	push	{r1, r2, r3}
 8001882:	b500      	push	{lr}
 8001884:	b09c      	sub	sp, #112	; 0x70
 8001886:	f44f 7102 	mov.w	r1, #520	; 0x208
 800188a:	ab1d      	add	r3, sp, #116	; 0x74
 800188c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001890:	9002      	str	r0, [sp, #8]
 8001892:	9006      	str	r0, [sp, #24]
 8001894:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001898:	480a      	ldr	r0, [pc, #40]	; (80018c4 <siprintf+0x44>)
 800189a:	9104      	str	r1, [sp, #16]
 800189c:	9107      	str	r1, [sp, #28]
 800189e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80018a6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80018aa:	6800      	ldr	r0, [r0, #0]
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	a902      	add	r1, sp, #8
 80018b0:	f000 f866 	bl	8001980 <_svfiprintf_r>
 80018b4:	9b02      	ldr	r3, [sp, #8]
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
 80018ba:	b01c      	add	sp, #112	; 0x70
 80018bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80018c0:	b003      	add	sp, #12
 80018c2:	4770      	bx	lr
 80018c4:	2000177c 	.word	0x2000177c

080018c8 <__ssputs_r>:
 80018c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018cc:	688e      	ldr	r6, [r1, #8]
 80018ce:	429e      	cmp	r6, r3
 80018d0:	4682      	mov	sl, r0
 80018d2:	460c      	mov	r4, r1
 80018d4:	4691      	mov	r9, r2
 80018d6:	4698      	mov	r8, r3
 80018d8:	d835      	bhi.n	8001946 <__ssputs_r+0x7e>
 80018da:	898a      	ldrh	r2, [r1, #12]
 80018dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80018e0:	d031      	beq.n	8001946 <__ssputs_r+0x7e>
 80018e2:	6825      	ldr	r5, [r4, #0]
 80018e4:	6909      	ldr	r1, [r1, #16]
 80018e6:	1a6f      	subs	r7, r5, r1
 80018e8:	6965      	ldr	r5, [r4, #20]
 80018ea:	2302      	movs	r3, #2
 80018ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80018f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80018f4:	f108 0301 	add.w	r3, r8, #1
 80018f8:	443b      	add	r3, r7
 80018fa:	429d      	cmp	r5, r3
 80018fc:	bf38      	it	cc
 80018fe:	461d      	movcc	r5, r3
 8001900:	0553      	lsls	r3, r2, #21
 8001902:	d531      	bpl.n	8001968 <__ssputs_r+0xa0>
 8001904:	4629      	mov	r1, r5
 8001906:	f000 fb39 	bl	8001f7c <_malloc_r>
 800190a:	4606      	mov	r6, r0
 800190c:	b950      	cbnz	r0, 8001924 <__ssputs_r+0x5c>
 800190e:	230c      	movs	r3, #12
 8001910:	f8ca 3000 	str.w	r3, [sl]
 8001914:	89a3      	ldrh	r3, [r4, #12]
 8001916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800191a:	81a3      	strh	r3, [r4, #12]
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001924:	463a      	mov	r2, r7
 8001926:	6921      	ldr	r1, [r4, #16]
 8001928:	f000 fab4 	bl	8001e94 <memcpy>
 800192c:	89a3      	ldrh	r3, [r4, #12]
 800192e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001936:	81a3      	strh	r3, [r4, #12]
 8001938:	6126      	str	r6, [r4, #16]
 800193a:	6165      	str	r5, [r4, #20]
 800193c:	443e      	add	r6, r7
 800193e:	1bed      	subs	r5, r5, r7
 8001940:	6026      	str	r6, [r4, #0]
 8001942:	60a5      	str	r5, [r4, #8]
 8001944:	4646      	mov	r6, r8
 8001946:	4546      	cmp	r6, r8
 8001948:	bf28      	it	cs
 800194a:	4646      	movcs	r6, r8
 800194c:	4632      	mov	r2, r6
 800194e:	4649      	mov	r1, r9
 8001950:	6820      	ldr	r0, [r4, #0]
 8001952:	f000 faaa 	bl	8001eaa <memmove>
 8001956:	68a3      	ldr	r3, [r4, #8]
 8001958:	1b9b      	subs	r3, r3, r6
 800195a:	60a3      	str	r3, [r4, #8]
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	441e      	add	r6, r3
 8001960:	6026      	str	r6, [r4, #0]
 8001962:	2000      	movs	r0, #0
 8001964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001968:	462a      	mov	r2, r5
 800196a:	f000 fb65 	bl	8002038 <_realloc_r>
 800196e:	4606      	mov	r6, r0
 8001970:	2800      	cmp	r0, #0
 8001972:	d1e1      	bne.n	8001938 <__ssputs_r+0x70>
 8001974:	6921      	ldr	r1, [r4, #16]
 8001976:	4650      	mov	r0, sl
 8001978:	f000 fab2 	bl	8001ee0 <_free_r>
 800197c:	e7c7      	b.n	800190e <__ssputs_r+0x46>
	...

08001980 <_svfiprintf_r>:
 8001980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001984:	b09d      	sub	sp, #116	; 0x74
 8001986:	4680      	mov	r8, r0
 8001988:	9303      	str	r3, [sp, #12]
 800198a:	898b      	ldrh	r3, [r1, #12]
 800198c:	061c      	lsls	r4, r3, #24
 800198e:	460d      	mov	r5, r1
 8001990:	4616      	mov	r6, r2
 8001992:	d50f      	bpl.n	80019b4 <_svfiprintf_r+0x34>
 8001994:	690b      	ldr	r3, [r1, #16]
 8001996:	b96b      	cbnz	r3, 80019b4 <_svfiprintf_r+0x34>
 8001998:	2140      	movs	r1, #64	; 0x40
 800199a:	f000 faef 	bl	8001f7c <_malloc_r>
 800199e:	6028      	str	r0, [r5, #0]
 80019a0:	6128      	str	r0, [r5, #16]
 80019a2:	b928      	cbnz	r0, 80019b0 <_svfiprintf_r+0x30>
 80019a4:	230c      	movs	r3, #12
 80019a6:	f8c8 3000 	str.w	r3, [r8]
 80019aa:	f04f 30ff 	mov.w	r0, #4294967295
 80019ae:	e0c5      	b.n	8001b3c <_svfiprintf_r+0x1bc>
 80019b0:	2340      	movs	r3, #64	; 0x40
 80019b2:	616b      	str	r3, [r5, #20]
 80019b4:	2300      	movs	r3, #0
 80019b6:	9309      	str	r3, [sp, #36]	; 0x24
 80019b8:	2320      	movs	r3, #32
 80019ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019be:	2330      	movs	r3, #48	; 0x30
 80019c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019c4:	f04f 0b01 	mov.w	fp, #1
 80019c8:	4637      	mov	r7, r6
 80019ca:	463c      	mov	r4, r7
 80019cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d13c      	bne.n	8001a4e <_svfiprintf_r+0xce>
 80019d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80019d8:	d00b      	beq.n	80019f2 <_svfiprintf_r+0x72>
 80019da:	4653      	mov	r3, sl
 80019dc:	4632      	mov	r2, r6
 80019de:	4629      	mov	r1, r5
 80019e0:	4640      	mov	r0, r8
 80019e2:	f7ff ff71 	bl	80018c8 <__ssputs_r>
 80019e6:	3001      	adds	r0, #1
 80019e8:	f000 80a3 	beq.w	8001b32 <_svfiprintf_r+0x1b2>
 80019ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019ee:	4453      	add	r3, sl
 80019f0:	9309      	str	r3, [sp, #36]	; 0x24
 80019f2:	783b      	ldrb	r3, [r7, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 809c 	beq.w	8001b32 <_svfiprintf_r+0x1b2>
 80019fa:	2300      	movs	r3, #0
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	9304      	str	r3, [sp, #16]
 8001a02:	9307      	str	r3, [sp, #28]
 8001a04:	9205      	str	r2, [sp, #20]
 8001a06:	9306      	str	r3, [sp, #24]
 8001a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8001a0e:	2205      	movs	r2, #5
 8001a10:	7821      	ldrb	r1, [r4, #0]
 8001a12:	4850      	ldr	r0, [pc, #320]	; (8001b54 <_svfiprintf_r+0x1d4>)
 8001a14:	f7fe fbec 	bl	80001f0 <memchr>
 8001a18:	1c67      	adds	r7, r4, #1
 8001a1a:	9b04      	ldr	r3, [sp, #16]
 8001a1c:	b9d8      	cbnz	r0, 8001a56 <_svfiprintf_r+0xd6>
 8001a1e:	06d9      	lsls	r1, r3, #27
 8001a20:	bf44      	itt	mi
 8001a22:	2220      	movmi	r2, #32
 8001a24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a28:	071a      	lsls	r2, r3, #28
 8001a2a:	bf44      	itt	mi
 8001a2c:	222b      	movmi	r2, #43	; 0x2b
 8001a2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a32:	7822      	ldrb	r2, [r4, #0]
 8001a34:	2a2a      	cmp	r2, #42	; 0x2a
 8001a36:	d016      	beq.n	8001a66 <_svfiprintf_r+0xe6>
 8001a38:	9a07      	ldr	r2, [sp, #28]
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	200a      	movs	r0, #10
 8001a3e:	4627      	mov	r7, r4
 8001a40:	3401      	adds	r4, #1
 8001a42:	783b      	ldrb	r3, [r7, #0]
 8001a44:	3b30      	subs	r3, #48	; 0x30
 8001a46:	2b09      	cmp	r3, #9
 8001a48:	d951      	bls.n	8001aee <_svfiprintf_r+0x16e>
 8001a4a:	b1c9      	cbz	r1, 8001a80 <_svfiprintf_r+0x100>
 8001a4c:	e011      	b.n	8001a72 <_svfiprintf_r+0xf2>
 8001a4e:	2b25      	cmp	r3, #37	; 0x25
 8001a50:	d0c0      	beq.n	80019d4 <_svfiprintf_r+0x54>
 8001a52:	4627      	mov	r7, r4
 8001a54:	e7b9      	b.n	80019ca <_svfiprintf_r+0x4a>
 8001a56:	4a3f      	ldr	r2, [pc, #252]	; (8001b54 <_svfiprintf_r+0x1d4>)
 8001a58:	1a80      	subs	r0, r0, r2
 8001a5a:	fa0b f000 	lsl.w	r0, fp, r0
 8001a5e:	4318      	orrs	r0, r3
 8001a60:	9004      	str	r0, [sp, #16]
 8001a62:	463c      	mov	r4, r7
 8001a64:	e7d3      	b.n	8001a0e <_svfiprintf_r+0x8e>
 8001a66:	9a03      	ldr	r2, [sp, #12]
 8001a68:	1d11      	adds	r1, r2, #4
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	9103      	str	r1, [sp, #12]
 8001a6e:	2a00      	cmp	r2, #0
 8001a70:	db01      	blt.n	8001a76 <_svfiprintf_r+0xf6>
 8001a72:	9207      	str	r2, [sp, #28]
 8001a74:	e004      	b.n	8001a80 <_svfiprintf_r+0x100>
 8001a76:	4252      	negs	r2, r2
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	9207      	str	r2, [sp, #28]
 8001a7e:	9304      	str	r3, [sp, #16]
 8001a80:	783b      	ldrb	r3, [r7, #0]
 8001a82:	2b2e      	cmp	r3, #46	; 0x2e
 8001a84:	d10e      	bne.n	8001aa4 <_svfiprintf_r+0x124>
 8001a86:	787b      	ldrb	r3, [r7, #1]
 8001a88:	2b2a      	cmp	r3, #42	; 0x2a
 8001a8a:	f107 0101 	add.w	r1, r7, #1
 8001a8e:	d132      	bne.n	8001af6 <_svfiprintf_r+0x176>
 8001a90:	9b03      	ldr	r3, [sp, #12]
 8001a92:	1d1a      	adds	r2, r3, #4
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	9203      	str	r2, [sp, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bfb8      	it	lt
 8001a9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001aa0:	3702      	adds	r7, #2
 8001aa2:	9305      	str	r3, [sp, #20]
 8001aa4:	4c2c      	ldr	r4, [pc, #176]	; (8001b58 <_svfiprintf_r+0x1d8>)
 8001aa6:	7839      	ldrb	r1, [r7, #0]
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7fe fba0 	bl	80001f0 <memchr>
 8001ab0:	b138      	cbz	r0, 8001ac2 <_svfiprintf_r+0x142>
 8001ab2:	2340      	movs	r3, #64	; 0x40
 8001ab4:	1b00      	subs	r0, r0, r4
 8001ab6:	fa03 f000 	lsl.w	r0, r3, r0
 8001aba:	9b04      	ldr	r3, [sp, #16]
 8001abc:	4303      	orrs	r3, r0
 8001abe:	9304      	str	r3, [sp, #16]
 8001ac0:	3701      	adds	r7, #1
 8001ac2:	7839      	ldrb	r1, [r7, #0]
 8001ac4:	4825      	ldr	r0, [pc, #148]	; (8001b5c <_svfiprintf_r+0x1dc>)
 8001ac6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001aca:	2206      	movs	r2, #6
 8001acc:	1c7e      	adds	r6, r7, #1
 8001ace:	f7fe fb8f 	bl	80001f0 <memchr>
 8001ad2:	2800      	cmp	r0, #0
 8001ad4:	d035      	beq.n	8001b42 <_svfiprintf_r+0x1c2>
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <_svfiprintf_r+0x1e0>)
 8001ad8:	b9fb      	cbnz	r3, 8001b1a <_svfiprintf_r+0x19a>
 8001ada:	9b03      	ldr	r3, [sp, #12]
 8001adc:	3307      	adds	r3, #7
 8001ade:	f023 0307 	bic.w	r3, r3, #7
 8001ae2:	3308      	adds	r3, #8
 8001ae4:	9303      	str	r3, [sp, #12]
 8001ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ae8:	444b      	add	r3, r9
 8001aea:	9309      	str	r3, [sp, #36]	; 0x24
 8001aec:	e76c      	b.n	80019c8 <_svfiprintf_r+0x48>
 8001aee:	fb00 3202 	mla	r2, r0, r2, r3
 8001af2:	2101      	movs	r1, #1
 8001af4:	e7a3      	b.n	8001a3e <_svfiprintf_r+0xbe>
 8001af6:	2300      	movs	r3, #0
 8001af8:	9305      	str	r3, [sp, #20]
 8001afa:	4618      	mov	r0, r3
 8001afc:	240a      	movs	r4, #10
 8001afe:	460f      	mov	r7, r1
 8001b00:	3101      	adds	r1, #1
 8001b02:	783a      	ldrb	r2, [r7, #0]
 8001b04:	3a30      	subs	r2, #48	; 0x30
 8001b06:	2a09      	cmp	r2, #9
 8001b08:	d903      	bls.n	8001b12 <_svfiprintf_r+0x192>
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0ca      	beq.n	8001aa4 <_svfiprintf_r+0x124>
 8001b0e:	9005      	str	r0, [sp, #20]
 8001b10:	e7c8      	b.n	8001aa4 <_svfiprintf_r+0x124>
 8001b12:	fb04 2000 	mla	r0, r4, r0, r2
 8001b16:	2301      	movs	r3, #1
 8001b18:	e7f1      	b.n	8001afe <_svfiprintf_r+0x17e>
 8001b1a:	ab03      	add	r3, sp, #12
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	462a      	mov	r2, r5
 8001b20:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <_svfiprintf_r+0x1e4>)
 8001b22:	a904      	add	r1, sp, #16
 8001b24:	4640      	mov	r0, r8
 8001b26:	f3af 8000 	nop.w
 8001b2a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001b2e:	4681      	mov	r9, r0
 8001b30:	d1d9      	bne.n	8001ae6 <_svfiprintf_r+0x166>
 8001b32:	89ab      	ldrh	r3, [r5, #12]
 8001b34:	065b      	lsls	r3, r3, #25
 8001b36:	f53f af38 	bmi.w	80019aa <_svfiprintf_r+0x2a>
 8001b3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b3c:	b01d      	add	sp, #116	; 0x74
 8001b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b42:	ab03      	add	r3, sp, #12
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	462a      	mov	r2, r5
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <_svfiprintf_r+0x1e4>)
 8001b4a:	a904      	add	r1, sp, #16
 8001b4c:	4640      	mov	r0, r8
 8001b4e:	f000 f881 	bl	8001c54 <_printf_i>
 8001b52:	e7ea      	b.n	8001b2a <_svfiprintf_r+0x1aa>
 8001b54:	0800212a 	.word	0x0800212a
 8001b58:	08002130 	.word	0x08002130
 8001b5c:	08002134 	.word	0x08002134
 8001b60:	00000000 	.word	0x00000000
 8001b64:	080018c9 	.word	0x080018c9

08001b68 <_printf_common>:
 8001b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b6c:	4691      	mov	r9, r2
 8001b6e:	461f      	mov	r7, r3
 8001b70:	688a      	ldr	r2, [r1, #8]
 8001b72:	690b      	ldr	r3, [r1, #16]
 8001b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	bfb8      	it	lt
 8001b7c:	4613      	movlt	r3, r2
 8001b7e:	f8c9 3000 	str.w	r3, [r9]
 8001b82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b86:	4606      	mov	r6, r0
 8001b88:	460c      	mov	r4, r1
 8001b8a:	b112      	cbz	r2, 8001b92 <_printf_common+0x2a>
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f8c9 3000 	str.w	r3, [r9]
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	0699      	lsls	r1, r3, #26
 8001b96:	bf42      	ittt	mi
 8001b98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001b9c:	3302      	addmi	r3, #2
 8001b9e:	f8c9 3000 	strmi.w	r3, [r9]
 8001ba2:	6825      	ldr	r5, [r4, #0]
 8001ba4:	f015 0506 	ands.w	r5, r5, #6
 8001ba8:	d107      	bne.n	8001bba <_printf_common+0x52>
 8001baa:	f104 0a19 	add.w	sl, r4, #25
 8001bae:	68e3      	ldr	r3, [r4, #12]
 8001bb0:	f8d9 2000 	ldr.w	r2, [r9]
 8001bb4:	1a9b      	subs	r3, r3, r2
 8001bb6:	429d      	cmp	r5, r3
 8001bb8:	db29      	blt.n	8001c0e <_printf_common+0xa6>
 8001bba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001bbe:	6822      	ldr	r2, [r4, #0]
 8001bc0:	3300      	adds	r3, #0
 8001bc2:	bf18      	it	ne
 8001bc4:	2301      	movne	r3, #1
 8001bc6:	0692      	lsls	r2, r2, #26
 8001bc8:	d42e      	bmi.n	8001c28 <_printf_common+0xc0>
 8001bca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001bce:	4639      	mov	r1, r7
 8001bd0:	4630      	mov	r0, r6
 8001bd2:	47c0      	blx	r8
 8001bd4:	3001      	adds	r0, #1
 8001bd6:	d021      	beq.n	8001c1c <_printf_common+0xb4>
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	68e5      	ldr	r5, [r4, #12]
 8001bdc:	f8d9 2000 	ldr.w	r2, [r9]
 8001be0:	f003 0306 	and.w	r3, r3, #6
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	bf08      	it	eq
 8001be8:	1aad      	subeq	r5, r5, r2
 8001bea:	68a3      	ldr	r3, [r4, #8]
 8001bec:	6922      	ldr	r2, [r4, #16]
 8001bee:	bf0c      	ite	eq
 8001bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001bf4:	2500      	movne	r5, #0
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	bfc4      	itt	gt
 8001bfa:	1a9b      	subgt	r3, r3, r2
 8001bfc:	18ed      	addgt	r5, r5, r3
 8001bfe:	f04f 0900 	mov.w	r9, #0
 8001c02:	341a      	adds	r4, #26
 8001c04:	454d      	cmp	r5, r9
 8001c06:	d11b      	bne.n	8001c40 <_printf_common+0xd8>
 8001c08:	2000      	movs	r0, #0
 8001c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c0e:	2301      	movs	r3, #1
 8001c10:	4652      	mov	r2, sl
 8001c12:	4639      	mov	r1, r7
 8001c14:	4630      	mov	r0, r6
 8001c16:	47c0      	blx	r8
 8001c18:	3001      	adds	r0, #1
 8001c1a:	d103      	bne.n	8001c24 <_printf_common+0xbc>
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c24:	3501      	adds	r5, #1
 8001c26:	e7c2      	b.n	8001bae <_printf_common+0x46>
 8001c28:	18e1      	adds	r1, r4, r3
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	2030      	movs	r0, #48	; 0x30
 8001c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c32:	4422      	add	r2, r4
 8001c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	e7c4      	b.n	8001bca <_printf_common+0x62>
 8001c40:	2301      	movs	r3, #1
 8001c42:	4622      	mov	r2, r4
 8001c44:	4639      	mov	r1, r7
 8001c46:	4630      	mov	r0, r6
 8001c48:	47c0      	blx	r8
 8001c4a:	3001      	adds	r0, #1
 8001c4c:	d0e6      	beq.n	8001c1c <_printf_common+0xb4>
 8001c4e:	f109 0901 	add.w	r9, r9, #1
 8001c52:	e7d7      	b.n	8001c04 <_printf_common+0x9c>

08001c54 <_printf_i>:
 8001c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c58:	4617      	mov	r7, r2
 8001c5a:	7e0a      	ldrb	r2, [r1, #24]
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	2a6e      	cmp	r2, #110	; 0x6e
 8001c60:	4698      	mov	r8, r3
 8001c62:	4606      	mov	r6, r0
 8001c64:	460c      	mov	r4, r1
 8001c66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001c68:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001c6c:	f000 80bc 	beq.w	8001de8 <_printf_i+0x194>
 8001c70:	d81a      	bhi.n	8001ca8 <_printf_i+0x54>
 8001c72:	2a63      	cmp	r2, #99	; 0x63
 8001c74:	d02e      	beq.n	8001cd4 <_printf_i+0x80>
 8001c76:	d80a      	bhi.n	8001c8e <_printf_i+0x3a>
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	f000 80c8 	beq.w	8001e0e <_printf_i+0x1ba>
 8001c7e:	2a58      	cmp	r2, #88	; 0x58
 8001c80:	f000 808a 	beq.w	8001d98 <_printf_i+0x144>
 8001c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c88:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001c8c:	e02a      	b.n	8001ce4 <_printf_i+0x90>
 8001c8e:	2a64      	cmp	r2, #100	; 0x64
 8001c90:	d001      	beq.n	8001c96 <_printf_i+0x42>
 8001c92:	2a69      	cmp	r2, #105	; 0x69
 8001c94:	d1f6      	bne.n	8001c84 <_printf_i+0x30>
 8001c96:	6821      	ldr	r1, [r4, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001c9e:	d023      	beq.n	8001ce8 <_printf_i+0x94>
 8001ca0:	1d11      	adds	r1, r2, #4
 8001ca2:	6019      	str	r1, [r3, #0]
 8001ca4:	6813      	ldr	r3, [r2, #0]
 8001ca6:	e027      	b.n	8001cf8 <_printf_i+0xa4>
 8001ca8:	2a73      	cmp	r2, #115	; 0x73
 8001caa:	f000 80b4 	beq.w	8001e16 <_printf_i+0x1c2>
 8001cae:	d808      	bhi.n	8001cc2 <_printf_i+0x6e>
 8001cb0:	2a6f      	cmp	r2, #111	; 0x6f
 8001cb2:	d02a      	beq.n	8001d0a <_printf_i+0xb6>
 8001cb4:	2a70      	cmp	r2, #112	; 0x70
 8001cb6:	d1e5      	bne.n	8001c84 <_printf_i+0x30>
 8001cb8:	680a      	ldr	r2, [r1, #0]
 8001cba:	f042 0220 	orr.w	r2, r2, #32
 8001cbe:	600a      	str	r2, [r1, #0]
 8001cc0:	e003      	b.n	8001cca <_printf_i+0x76>
 8001cc2:	2a75      	cmp	r2, #117	; 0x75
 8001cc4:	d021      	beq.n	8001d0a <_printf_i+0xb6>
 8001cc6:	2a78      	cmp	r2, #120	; 0x78
 8001cc8:	d1dc      	bne.n	8001c84 <_printf_i+0x30>
 8001cca:	2278      	movs	r2, #120	; 0x78
 8001ccc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001cd0:	496e      	ldr	r1, [pc, #440]	; (8001e8c <_printf_i+0x238>)
 8001cd2:	e064      	b.n	8001d9e <_printf_i+0x14a>
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001cda:	1d11      	adds	r1, r2, #4
 8001cdc:	6019      	str	r1, [r3, #0]
 8001cde:	6813      	ldr	r3, [r2, #0]
 8001ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0a3      	b.n	8001e30 <_printf_i+0x1dc>
 8001ce8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001cec:	f102 0104 	add.w	r1, r2, #4
 8001cf0:	6019      	str	r1, [r3, #0]
 8001cf2:	d0d7      	beq.n	8001ca4 <_printf_i+0x50>
 8001cf4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	da03      	bge.n	8001d04 <_printf_i+0xb0>
 8001cfc:	222d      	movs	r2, #45	; 0x2d
 8001cfe:	425b      	negs	r3, r3
 8001d00:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001d04:	4962      	ldr	r1, [pc, #392]	; (8001e90 <_printf_i+0x23c>)
 8001d06:	220a      	movs	r2, #10
 8001d08:	e017      	b.n	8001d3a <_printf_i+0xe6>
 8001d0a:	6820      	ldr	r0, [r4, #0]
 8001d0c:	6819      	ldr	r1, [r3, #0]
 8001d0e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001d12:	d003      	beq.n	8001d1c <_printf_i+0xc8>
 8001d14:	1d08      	adds	r0, r1, #4
 8001d16:	6018      	str	r0, [r3, #0]
 8001d18:	680b      	ldr	r3, [r1, #0]
 8001d1a:	e006      	b.n	8001d2a <_printf_i+0xd6>
 8001d1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d20:	f101 0004 	add.w	r0, r1, #4
 8001d24:	6018      	str	r0, [r3, #0]
 8001d26:	d0f7      	beq.n	8001d18 <_printf_i+0xc4>
 8001d28:	880b      	ldrh	r3, [r1, #0]
 8001d2a:	4959      	ldr	r1, [pc, #356]	; (8001e90 <_printf_i+0x23c>)
 8001d2c:	2a6f      	cmp	r2, #111	; 0x6f
 8001d2e:	bf14      	ite	ne
 8001d30:	220a      	movne	r2, #10
 8001d32:	2208      	moveq	r2, #8
 8001d34:	2000      	movs	r0, #0
 8001d36:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001d3a:	6865      	ldr	r5, [r4, #4]
 8001d3c:	60a5      	str	r5, [r4, #8]
 8001d3e:	2d00      	cmp	r5, #0
 8001d40:	f2c0 809c 	blt.w	8001e7c <_printf_i+0x228>
 8001d44:	6820      	ldr	r0, [r4, #0]
 8001d46:	f020 0004 	bic.w	r0, r0, #4
 8001d4a:	6020      	str	r0, [r4, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d13f      	bne.n	8001dd0 <_printf_i+0x17c>
 8001d50:	2d00      	cmp	r5, #0
 8001d52:	f040 8095 	bne.w	8001e80 <_printf_i+0x22c>
 8001d56:	4675      	mov	r5, lr
 8001d58:	2a08      	cmp	r2, #8
 8001d5a:	d10b      	bne.n	8001d74 <_printf_i+0x120>
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	07da      	lsls	r2, r3, #31
 8001d60:	d508      	bpl.n	8001d74 <_printf_i+0x120>
 8001d62:	6923      	ldr	r3, [r4, #16]
 8001d64:	6862      	ldr	r2, [r4, #4]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	bfde      	ittt	le
 8001d6a:	2330      	movle	r3, #48	; 0x30
 8001d6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001d74:	ebae 0305 	sub.w	r3, lr, r5
 8001d78:	6123      	str	r3, [r4, #16]
 8001d7a:	f8cd 8000 	str.w	r8, [sp]
 8001d7e:	463b      	mov	r3, r7
 8001d80:	aa03      	add	r2, sp, #12
 8001d82:	4621      	mov	r1, r4
 8001d84:	4630      	mov	r0, r6
 8001d86:	f7ff feef 	bl	8001b68 <_printf_common>
 8001d8a:	3001      	adds	r0, #1
 8001d8c:	d155      	bne.n	8001e3a <_printf_i+0x1e6>
 8001d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d92:	b005      	add	sp, #20
 8001d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d98:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001d9c:	493c      	ldr	r1, [pc, #240]	; (8001e90 <_printf_i+0x23c>)
 8001d9e:	6822      	ldr	r2, [r4, #0]
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001da6:	f100 0504 	add.w	r5, r0, #4
 8001daa:	601d      	str	r5, [r3, #0]
 8001dac:	d001      	beq.n	8001db2 <_printf_i+0x15e>
 8001dae:	6803      	ldr	r3, [r0, #0]
 8001db0:	e002      	b.n	8001db8 <_printf_i+0x164>
 8001db2:	0655      	lsls	r5, r2, #25
 8001db4:	d5fb      	bpl.n	8001dae <_printf_i+0x15a>
 8001db6:	8803      	ldrh	r3, [r0, #0]
 8001db8:	07d0      	lsls	r0, r2, #31
 8001dba:	bf44      	itt	mi
 8001dbc:	f042 0220 	orrmi.w	r2, r2, #32
 8001dc0:	6022      	strmi	r2, [r4, #0]
 8001dc2:	b91b      	cbnz	r3, 8001dcc <_printf_i+0x178>
 8001dc4:	6822      	ldr	r2, [r4, #0]
 8001dc6:	f022 0220 	bic.w	r2, r2, #32
 8001dca:	6022      	str	r2, [r4, #0]
 8001dcc:	2210      	movs	r2, #16
 8001dce:	e7b1      	b.n	8001d34 <_printf_i+0xe0>
 8001dd0:	4675      	mov	r5, lr
 8001dd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8001dd6:	fb02 3310 	mls	r3, r2, r0, r3
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001de0:	4603      	mov	r3, r0
 8001de2:	2800      	cmp	r0, #0
 8001de4:	d1f5      	bne.n	8001dd2 <_printf_i+0x17e>
 8001de6:	e7b7      	b.n	8001d58 <_printf_i+0x104>
 8001de8:	6808      	ldr	r0, [r1, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	6949      	ldr	r1, [r1, #20]
 8001dee:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001df2:	d004      	beq.n	8001dfe <_printf_i+0x1aa>
 8001df4:	1d10      	adds	r0, r2, #4
 8001df6:	6018      	str	r0, [r3, #0]
 8001df8:	6813      	ldr	r3, [r2, #0]
 8001dfa:	6019      	str	r1, [r3, #0]
 8001dfc:	e007      	b.n	8001e0e <_printf_i+0x1ba>
 8001dfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e02:	f102 0004 	add.w	r0, r2, #4
 8001e06:	6018      	str	r0, [r3, #0]
 8001e08:	6813      	ldr	r3, [r2, #0]
 8001e0a:	d0f6      	beq.n	8001dfa <_printf_i+0x1a6>
 8001e0c:	8019      	strh	r1, [r3, #0]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	6123      	str	r3, [r4, #16]
 8001e12:	4675      	mov	r5, lr
 8001e14:	e7b1      	b.n	8001d7a <_printf_i+0x126>
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	1d11      	adds	r1, r2, #4
 8001e1a:	6019      	str	r1, [r3, #0]
 8001e1c:	6815      	ldr	r5, [r2, #0]
 8001e1e:	6862      	ldr	r2, [r4, #4]
 8001e20:	2100      	movs	r1, #0
 8001e22:	4628      	mov	r0, r5
 8001e24:	f7fe f9e4 	bl	80001f0 <memchr>
 8001e28:	b108      	cbz	r0, 8001e2e <_printf_i+0x1da>
 8001e2a:	1b40      	subs	r0, r0, r5
 8001e2c:	6060      	str	r0, [r4, #4]
 8001e2e:	6863      	ldr	r3, [r4, #4]
 8001e30:	6123      	str	r3, [r4, #16]
 8001e32:	2300      	movs	r3, #0
 8001e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e38:	e79f      	b.n	8001d7a <_printf_i+0x126>
 8001e3a:	6923      	ldr	r3, [r4, #16]
 8001e3c:	462a      	mov	r2, r5
 8001e3e:	4639      	mov	r1, r7
 8001e40:	4630      	mov	r0, r6
 8001e42:	47c0      	blx	r8
 8001e44:	3001      	adds	r0, #1
 8001e46:	d0a2      	beq.n	8001d8e <_printf_i+0x13a>
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	079b      	lsls	r3, r3, #30
 8001e4c:	d507      	bpl.n	8001e5e <_printf_i+0x20a>
 8001e4e:	2500      	movs	r5, #0
 8001e50:	f104 0919 	add.w	r9, r4, #25
 8001e54:	68e3      	ldr	r3, [r4, #12]
 8001e56:	9a03      	ldr	r2, [sp, #12]
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	429d      	cmp	r5, r3
 8001e5c:	db05      	blt.n	8001e6a <_printf_i+0x216>
 8001e5e:	68e0      	ldr	r0, [r4, #12]
 8001e60:	9b03      	ldr	r3, [sp, #12]
 8001e62:	4298      	cmp	r0, r3
 8001e64:	bfb8      	it	lt
 8001e66:	4618      	movlt	r0, r3
 8001e68:	e793      	b.n	8001d92 <_printf_i+0x13e>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	464a      	mov	r2, r9
 8001e6e:	4639      	mov	r1, r7
 8001e70:	4630      	mov	r0, r6
 8001e72:	47c0      	blx	r8
 8001e74:	3001      	adds	r0, #1
 8001e76:	d08a      	beq.n	8001d8e <_printf_i+0x13a>
 8001e78:	3501      	adds	r5, #1
 8001e7a:	e7eb      	b.n	8001e54 <_printf_i+0x200>
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1a7      	bne.n	8001dd0 <_printf_i+0x17c>
 8001e80:	780b      	ldrb	r3, [r1, #0]
 8001e82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e8a:	e765      	b.n	8001d58 <_printf_i+0x104>
 8001e8c:	0800214c 	.word	0x0800214c
 8001e90:	0800213b 	.word	0x0800213b

08001e94 <memcpy>:
 8001e94:	b510      	push	{r4, lr}
 8001e96:	1e43      	subs	r3, r0, #1
 8001e98:	440a      	add	r2, r1
 8001e9a:	4291      	cmp	r1, r2
 8001e9c:	d100      	bne.n	8001ea0 <memcpy+0xc>
 8001e9e:	bd10      	pop	{r4, pc}
 8001ea0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ea8:	e7f7      	b.n	8001e9a <memcpy+0x6>

08001eaa <memmove>:
 8001eaa:	4288      	cmp	r0, r1
 8001eac:	b510      	push	{r4, lr}
 8001eae:	eb01 0302 	add.w	r3, r1, r2
 8001eb2:	d803      	bhi.n	8001ebc <memmove+0x12>
 8001eb4:	1e42      	subs	r2, r0, #1
 8001eb6:	4299      	cmp	r1, r3
 8001eb8:	d10c      	bne.n	8001ed4 <memmove+0x2a>
 8001eba:	bd10      	pop	{r4, pc}
 8001ebc:	4298      	cmp	r0, r3
 8001ebe:	d2f9      	bcs.n	8001eb4 <memmove+0xa>
 8001ec0:	1881      	adds	r1, r0, r2
 8001ec2:	1ad2      	subs	r2, r2, r3
 8001ec4:	42d3      	cmn	r3, r2
 8001ec6:	d100      	bne.n	8001eca <memmove+0x20>
 8001ec8:	bd10      	pop	{r4, pc}
 8001eca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001ece:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001ed2:	e7f7      	b.n	8001ec4 <memmove+0x1a>
 8001ed4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ed8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001edc:	e7eb      	b.n	8001eb6 <memmove+0xc>
	...

08001ee0 <_free_r>:
 8001ee0:	b538      	push	{r3, r4, r5, lr}
 8001ee2:	4605      	mov	r5, r0
 8001ee4:	2900      	cmp	r1, #0
 8001ee6:	d045      	beq.n	8001f74 <_free_r+0x94>
 8001ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001eec:	1f0c      	subs	r4, r1, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	bfb8      	it	lt
 8001ef2:	18e4      	addlt	r4, r4, r3
 8001ef4:	f000 f8d6 	bl	80020a4 <__malloc_lock>
 8001ef8:	4a1f      	ldr	r2, [pc, #124]	; (8001f78 <_free_r+0x98>)
 8001efa:	6813      	ldr	r3, [r2, #0]
 8001efc:	4610      	mov	r0, r2
 8001efe:	b933      	cbnz	r3, 8001f0e <_free_r+0x2e>
 8001f00:	6063      	str	r3, [r4, #4]
 8001f02:	6014      	str	r4, [r2, #0]
 8001f04:	4628      	mov	r0, r5
 8001f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f0a:	f000 b8cc 	b.w	80020a6 <__malloc_unlock>
 8001f0e:	42a3      	cmp	r3, r4
 8001f10:	d90c      	bls.n	8001f2c <_free_r+0x4c>
 8001f12:	6821      	ldr	r1, [r4, #0]
 8001f14:	1862      	adds	r2, r4, r1
 8001f16:	4293      	cmp	r3, r2
 8001f18:	bf04      	itt	eq
 8001f1a:	681a      	ldreq	r2, [r3, #0]
 8001f1c:	685b      	ldreq	r3, [r3, #4]
 8001f1e:	6063      	str	r3, [r4, #4]
 8001f20:	bf04      	itt	eq
 8001f22:	1852      	addeq	r2, r2, r1
 8001f24:	6022      	streq	r2, [r4, #0]
 8001f26:	6004      	str	r4, [r0, #0]
 8001f28:	e7ec      	b.n	8001f04 <_free_r+0x24>
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	b10a      	cbz	r2, 8001f34 <_free_r+0x54>
 8001f30:	42a2      	cmp	r2, r4
 8001f32:	d9fa      	bls.n	8001f2a <_free_r+0x4a>
 8001f34:	6819      	ldr	r1, [r3, #0]
 8001f36:	1858      	adds	r0, r3, r1
 8001f38:	42a0      	cmp	r0, r4
 8001f3a:	d10b      	bne.n	8001f54 <_free_r+0x74>
 8001f3c:	6820      	ldr	r0, [r4, #0]
 8001f3e:	4401      	add	r1, r0
 8001f40:	1858      	adds	r0, r3, r1
 8001f42:	4282      	cmp	r2, r0
 8001f44:	6019      	str	r1, [r3, #0]
 8001f46:	d1dd      	bne.n	8001f04 <_free_r+0x24>
 8001f48:	6810      	ldr	r0, [r2, #0]
 8001f4a:	6852      	ldr	r2, [r2, #4]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	4401      	add	r1, r0
 8001f50:	6019      	str	r1, [r3, #0]
 8001f52:	e7d7      	b.n	8001f04 <_free_r+0x24>
 8001f54:	d902      	bls.n	8001f5c <_free_r+0x7c>
 8001f56:	230c      	movs	r3, #12
 8001f58:	602b      	str	r3, [r5, #0]
 8001f5a:	e7d3      	b.n	8001f04 <_free_r+0x24>
 8001f5c:	6820      	ldr	r0, [r4, #0]
 8001f5e:	1821      	adds	r1, r4, r0
 8001f60:	428a      	cmp	r2, r1
 8001f62:	bf04      	itt	eq
 8001f64:	6811      	ldreq	r1, [r2, #0]
 8001f66:	6852      	ldreq	r2, [r2, #4]
 8001f68:	6062      	str	r2, [r4, #4]
 8001f6a:	bf04      	itt	eq
 8001f6c:	1809      	addeq	r1, r1, r0
 8001f6e:	6021      	streq	r1, [r4, #0]
 8001f70:	605c      	str	r4, [r3, #4]
 8001f72:	e7c7      	b.n	8001f04 <_free_r+0x24>
 8001f74:	bd38      	pop	{r3, r4, r5, pc}
 8001f76:	bf00      	nop
 8001f78:	200017fc 	.word	0x200017fc

08001f7c <_malloc_r>:
 8001f7c:	b570      	push	{r4, r5, r6, lr}
 8001f7e:	1ccd      	adds	r5, r1, #3
 8001f80:	f025 0503 	bic.w	r5, r5, #3
 8001f84:	3508      	adds	r5, #8
 8001f86:	2d0c      	cmp	r5, #12
 8001f88:	bf38      	it	cc
 8001f8a:	250c      	movcc	r5, #12
 8001f8c:	2d00      	cmp	r5, #0
 8001f8e:	4606      	mov	r6, r0
 8001f90:	db01      	blt.n	8001f96 <_malloc_r+0x1a>
 8001f92:	42a9      	cmp	r1, r5
 8001f94:	d903      	bls.n	8001f9e <_malloc_r+0x22>
 8001f96:	230c      	movs	r3, #12
 8001f98:	6033      	str	r3, [r6, #0]
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	bd70      	pop	{r4, r5, r6, pc}
 8001f9e:	f000 f881 	bl	80020a4 <__malloc_lock>
 8001fa2:	4a23      	ldr	r2, [pc, #140]	; (8002030 <_malloc_r+0xb4>)
 8001fa4:	6814      	ldr	r4, [r2, #0]
 8001fa6:	4621      	mov	r1, r4
 8001fa8:	b991      	cbnz	r1, 8001fd0 <_malloc_r+0x54>
 8001faa:	4c22      	ldr	r4, [pc, #136]	; (8002034 <_malloc_r+0xb8>)
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	b91b      	cbnz	r3, 8001fb8 <_malloc_r+0x3c>
 8001fb0:	4630      	mov	r0, r6
 8001fb2:	f000 f867 	bl	8002084 <_sbrk_r>
 8001fb6:	6020      	str	r0, [r4, #0]
 8001fb8:	4629      	mov	r1, r5
 8001fba:	4630      	mov	r0, r6
 8001fbc:	f000 f862 	bl	8002084 <_sbrk_r>
 8001fc0:	1c43      	adds	r3, r0, #1
 8001fc2:	d126      	bne.n	8002012 <_malloc_r+0x96>
 8001fc4:	230c      	movs	r3, #12
 8001fc6:	6033      	str	r3, [r6, #0]
 8001fc8:	4630      	mov	r0, r6
 8001fca:	f000 f86c 	bl	80020a6 <__malloc_unlock>
 8001fce:	e7e4      	b.n	8001f9a <_malloc_r+0x1e>
 8001fd0:	680b      	ldr	r3, [r1, #0]
 8001fd2:	1b5b      	subs	r3, r3, r5
 8001fd4:	d41a      	bmi.n	800200c <_malloc_r+0x90>
 8001fd6:	2b0b      	cmp	r3, #11
 8001fd8:	d90f      	bls.n	8001ffa <_malloc_r+0x7e>
 8001fda:	600b      	str	r3, [r1, #0]
 8001fdc:	50cd      	str	r5, [r1, r3]
 8001fde:	18cc      	adds	r4, r1, r3
 8001fe0:	4630      	mov	r0, r6
 8001fe2:	f000 f860 	bl	80020a6 <__malloc_unlock>
 8001fe6:	f104 000b 	add.w	r0, r4, #11
 8001fea:	1d23      	adds	r3, r4, #4
 8001fec:	f020 0007 	bic.w	r0, r0, #7
 8001ff0:	1ac3      	subs	r3, r0, r3
 8001ff2:	d01b      	beq.n	800202c <_malloc_r+0xb0>
 8001ff4:	425a      	negs	r2, r3
 8001ff6:	50e2      	str	r2, [r4, r3]
 8001ff8:	bd70      	pop	{r4, r5, r6, pc}
 8001ffa:	428c      	cmp	r4, r1
 8001ffc:	bf0d      	iteet	eq
 8001ffe:	6863      	ldreq	r3, [r4, #4]
 8002000:	684b      	ldrne	r3, [r1, #4]
 8002002:	6063      	strne	r3, [r4, #4]
 8002004:	6013      	streq	r3, [r2, #0]
 8002006:	bf18      	it	ne
 8002008:	460c      	movne	r4, r1
 800200a:	e7e9      	b.n	8001fe0 <_malloc_r+0x64>
 800200c:	460c      	mov	r4, r1
 800200e:	6849      	ldr	r1, [r1, #4]
 8002010:	e7ca      	b.n	8001fa8 <_malloc_r+0x2c>
 8002012:	1cc4      	adds	r4, r0, #3
 8002014:	f024 0403 	bic.w	r4, r4, #3
 8002018:	42a0      	cmp	r0, r4
 800201a:	d005      	beq.n	8002028 <_malloc_r+0xac>
 800201c:	1a21      	subs	r1, r4, r0
 800201e:	4630      	mov	r0, r6
 8002020:	f000 f830 	bl	8002084 <_sbrk_r>
 8002024:	3001      	adds	r0, #1
 8002026:	d0cd      	beq.n	8001fc4 <_malloc_r+0x48>
 8002028:	6025      	str	r5, [r4, #0]
 800202a:	e7d9      	b.n	8001fe0 <_malloc_r+0x64>
 800202c:	bd70      	pop	{r4, r5, r6, pc}
 800202e:	bf00      	nop
 8002030:	200017fc 	.word	0x200017fc
 8002034:	20001800 	.word	0x20001800

08002038 <_realloc_r>:
 8002038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203a:	4607      	mov	r7, r0
 800203c:	4614      	mov	r4, r2
 800203e:	460e      	mov	r6, r1
 8002040:	b921      	cbnz	r1, 800204c <_realloc_r+0x14>
 8002042:	4611      	mov	r1, r2
 8002044:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002048:	f7ff bf98 	b.w	8001f7c <_malloc_r>
 800204c:	b922      	cbnz	r2, 8002058 <_realloc_r+0x20>
 800204e:	f7ff ff47 	bl	8001ee0 <_free_r>
 8002052:	4625      	mov	r5, r4
 8002054:	4628      	mov	r0, r5
 8002056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002058:	f000 f826 	bl	80020a8 <_malloc_usable_size_r>
 800205c:	4284      	cmp	r4, r0
 800205e:	d90f      	bls.n	8002080 <_realloc_r+0x48>
 8002060:	4621      	mov	r1, r4
 8002062:	4638      	mov	r0, r7
 8002064:	f7ff ff8a 	bl	8001f7c <_malloc_r>
 8002068:	4605      	mov	r5, r0
 800206a:	2800      	cmp	r0, #0
 800206c:	d0f2      	beq.n	8002054 <_realloc_r+0x1c>
 800206e:	4631      	mov	r1, r6
 8002070:	4622      	mov	r2, r4
 8002072:	f7ff ff0f 	bl	8001e94 <memcpy>
 8002076:	4631      	mov	r1, r6
 8002078:	4638      	mov	r0, r7
 800207a:	f7ff ff31 	bl	8001ee0 <_free_r>
 800207e:	e7e9      	b.n	8002054 <_realloc_r+0x1c>
 8002080:	4635      	mov	r5, r6
 8002082:	e7e7      	b.n	8002054 <_realloc_r+0x1c>

08002084 <_sbrk_r>:
 8002084:	b538      	push	{r3, r4, r5, lr}
 8002086:	4c06      	ldr	r4, [pc, #24]	; (80020a0 <_sbrk_r+0x1c>)
 8002088:	2300      	movs	r3, #0
 800208a:	4605      	mov	r5, r0
 800208c:	4608      	mov	r0, r1
 800208e:	6023      	str	r3, [r4, #0]
 8002090:	f000 f814 	bl	80020bc <_sbrk>
 8002094:	1c43      	adds	r3, r0, #1
 8002096:	d102      	bne.n	800209e <_sbrk_r+0x1a>
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	b103      	cbz	r3, 800209e <_sbrk_r+0x1a>
 800209c:	602b      	str	r3, [r5, #0]
 800209e:	bd38      	pop	{r3, r4, r5, pc}
 80020a0:	20001858 	.word	0x20001858

080020a4 <__malloc_lock>:
 80020a4:	4770      	bx	lr

080020a6 <__malloc_unlock>:
 80020a6:	4770      	bx	lr

080020a8 <_malloc_usable_size_r>:
 80020a8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80020ac:	2800      	cmp	r0, #0
 80020ae:	f1a0 0004 	sub.w	r0, r0, #4
 80020b2:	bfbc      	itt	lt
 80020b4:	580b      	ldrlt	r3, [r1, r0]
 80020b6:	18c0      	addlt	r0, r0, r3
 80020b8:	4770      	bx	lr
	...

080020bc <_sbrk>:
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <_sbrk+0x14>)
 80020be:	6819      	ldr	r1, [r3, #0]
 80020c0:	4602      	mov	r2, r0
 80020c2:	b909      	cbnz	r1, 80020c8 <_sbrk+0xc>
 80020c4:	4903      	ldr	r1, [pc, #12]	; (80020d4 <_sbrk+0x18>)
 80020c6:	6019      	str	r1, [r3, #0]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	4402      	add	r2, r0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	4770      	bx	lr
 80020d0:	20001804 	.word	0x20001804
 80020d4:	2000185c 	.word	0x2000185c

080020d8 <_init>:
 80020d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020da:	bf00      	nop
 80020dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020de:	bc08      	pop	{r3}
 80020e0:	469e      	mov	lr, r3
 80020e2:	4770      	bx	lr

080020e4 <_fini>:
 80020e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e6:	bf00      	nop
 80020e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ea:	bc08      	pop	{r3}
 80020ec:	469e      	mov	lr, r3
 80020ee:	4770      	bx	lr
