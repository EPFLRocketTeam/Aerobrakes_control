
airbrake_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002698  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002838  08002838  00012838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080028b0  080028b0  000128b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080028b8  080028b8  000128b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080028bc  080028bc  000128bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  080028c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000084  20000070  08002930  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000f4  08002930  000200f4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000bc87  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ac2  00000000  00000000  0002bd27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002162  00000000  00000000  0002d7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000508  00000000  00000000  0002f950  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000638  00000000  00000000  0002fe58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002f66  00000000  00000000  00030490  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000023aa  00000000  00000000  000333f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000357a0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001164  00000000  00000000  0003581c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002820 	.word	0x08002820

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002820 	.word	0x08002820

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__aeabi_d2iz>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d215      	bcs.n	8000a5a <__aeabi_d2iz+0x36>
 8000a2e:	d511      	bpl.n	8000a54 <__aeabi_d2iz+0x30>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d912      	bls.n	8000a60 <__aeabi_d2iz+0x3c>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_d2iz+0x48>
 8000a60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	bf08      	it	eq
 8000a66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_uldivmod>:
 8000a74:	b953      	cbnz	r3, 8000a8c <__aeabi_uldivmod+0x18>
 8000a76:	b94a      	cbnz	r2, 8000a8c <__aeabi_uldivmod+0x18>
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	bf08      	it	eq
 8000a7c:	2800      	cmpeq	r0, #0
 8000a7e:	bf1c      	itt	ne
 8000a80:	f04f 31ff 	movne.w	r1, #4294967295
 8000a84:	f04f 30ff 	movne.w	r0, #4294967295
 8000a88:	f000 b97a 	b.w	8000d80 <__aeabi_idiv0>
 8000a8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a94:	f000 f806 	bl	8000aa4 <__udivmoddi4>
 8000a98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa0:	b004      	add	sp, #16
 8000aa2:	4770      	bx	lr

08000aa4 <__udivmoddi4>:
 8000aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa8:	468c      	mov	ip, r1
 8000aaa:	460d      	mov	r5, r1
 8000aac:	4604      	mov	r4, r0
 8000aae:	9e08      	ldr	r6, [sp, #32]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d151      	bne.n	8000b58 <__udivmoddi4+0xb4>
 8000ab4:	428a      	cmp	r2, r1
 8000ab6:	4617      	mov	r7, r2
 8000ab8:	d96d      	bls.n	8000b96 <__udivmoddi4+0xf2>
 8000aba:	fab2 fe82 	clz	lr, r2
 8000abe:	f1be 0f00 	cmp.w	lr, #0
 8000ac2:	d00b      	beq.n	8000adc <__udivmoddi4+0x38>
 8000ac4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ac8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000acc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ad0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ad4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ad8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000adc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ae0:	0c25      	lsrs	r5, r4, #16
 8000ae2:	fbbc f8fa 	udiv	r8, ip, sl
 8000ae6:	fa1f f987 	uxth.w	r9, r7
 8000aea:	fb0a cc18 	mls	ip, sl, r8, ip
 8000aee:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000af2:	fb08 f309 	mul.w	r3, r8, r9
 8000af6:	42ab      	cmp	r3, r5
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x6c>
 8000afa:	19ed      	adds	r5, r5, r7
 8000afc:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b00:	f080 8123 	bcs.w	8000d4a <__udivmoddi4+0x2a6>
 8000b04:	42ab      	cmp	r3, r5
 8000b06:	f240 8120 	bls.w	8000d4a <__udivmoddi4+0x2a6>
 8000b0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b0e:	443d      	add	r5, r7
 8000b10:	1aed      	subs	r5, r5, r3
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b18:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b20:	fb00 f909 	mul.w	r9, r0, r9
 8000b24:	45a1      	cmp	r9, r4
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x98>
 8000b28:	19e4      	adds	r4, r4, r7
 8000b2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2e:	f080 810a 	bcs.w	8000d46 <__udivmoddi4+0x2a2>
 8000b32:	45a1      	cmp	r9, r4
 8000b34:	f240 8107 	bls.w	8000d46 <__udivmoddi4+0x2a2>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	443c      	add	r4, r7
 8000b3c:	eba4 0409 	sub.w	r4, r4, r9
 8000b40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b44:	2100      	movs	r1, #0
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d061      	beq.n	8000c0e <__udivmoddi4+0x16a>
 8000b4a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b4e:	2300      	movs	r3, #0
 8000b50:	6034      	str	r4, [r6, #0]
 8000b52:	6073      	str	r3, [r6, #4]
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	428b      	cmp	r3, r1
 8000b5a:	d907      	bls.n	8000b6c <__udivmoddi4+0xc8>
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d054      	beq.n	8000c0a <__udivmoddi4+0x166>
 8000b60:	2100      	movs	r1, #0
 8000b62:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b66:	4608      	mov	r0, r1
 8000b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6c:	fab3 f183 	clz	r1, r3
 8000b70:	2900      	cmp	r1, #0
 8000b72:	f040 808e 	bne.w	8000c92 <__udivmoddi4+0x1ee>
 8000b76:	42ab      	cmp	r3, r5
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xdc>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80fa 	bhi.w	8000d74 <__udivmoddi4+0x2d0>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb65 0503 	sbc.w	r5, r5, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	46ac      	mov	ip, r5
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	d03f      	beq.n	8000c0e <__udivmoddi4+0x16a>
 8000b8e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	b912      	cbnz	r2, 8000b9e <__udivmoddi4+0xfa>
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b9e:	fab7 fe87 	clz	lr, r7
 8000ba2:	f1be 0f00 	cmp.w	lr, #0
 8000ba6:	d134      	bne.n	8000c12 <__udivmoddi4+0x16e>
 8000ba8:	1beb      	subs	r3, r5, r7
 8000baa:	0c3a      	lsrs	r2, r7, #16
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000bb6:	0c25      	lsrs	r5, r4, #16
 8000bb8:	fb02 3318 	mls	r3, r2, r8, r3
 8000bbc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bc0:	fb0c f308 	mul.w	r3, ip, r8
 8000bc4:	42ab      	cmp	r3, r5
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x134>
 8000bc8:	19ed      	adds	r5, r5, r7
 8000bca:	f108 30ff 	add.w	r0, r8, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x132>
 8000bd0:	42ab      	cmp	r3, r5
 8000bd2:	f200 80d1 	bhi.w	8000d78 <__udivmoddi4+0x2d4>
 8000bd6:	4680      	mov	r8, r0
 8000bd8:	1aed      	subs	r5, r5, r3
 8000bda:	b2a3      	uxth	r3, r4
 8000bdc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000be0:	fb02 5510 	mls	r5, r2, r0, r5
 8000be4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000be8:	fb0c fc00 	mul.w	ip, ip, r0
 8000bec:	45a4      	cmp	ip, r4
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x15c>
 8000bf0:	19e4      	adds	r4, r4, r7
 8000bf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x15a>
 8000bf8:	45a4      	cmp	ip, r4
 8000bfa:	f200 80b8 	bhi.w	8000d6e <__udivmoddi4+0x2ca>
 8000bfe:	4618      	mov	r0, r3
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c08:	e79d      	b.n	8000b46 <__udivmoddi4+0xa2>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	4630      	mov	r0, r6
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	f1ce 0420 	rsb	r4, lr, #32
 8000c16:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c1a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c1e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c22:	0c3a      	lsrs	r2, r7, #16
 8000c24:	fa25 f404 	lsr.w	r4, r5, r4
 8000c28:	ea48 0803 	orr.w	r8, r8, r3
 8000c2c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c30:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c34:	fb02 4411 	mls	r4, r2, r1, r4
 8000c38:	fa1f fc87 	uxth.w	ip, r7
 8000c3c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c40:	fb01 f30c 	mul.w	r3, r1, ip
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x1bc>
 8000c4c:	19ed      	adds	r5, r5, r7
 8000c4e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c52:	f080 808a 	bcs.w	8000d6a <__udivmoddi4+0x2c6>
 8000c56:	42ab      	cmp	r3, r5
 8000c58:	f240 8087 	bls.w	8000d6a <__udivmoddi4+0x2c6>
 8000c5c:	3902      	subs	r1, #2
 8000c5e:	443d      	add	r5, r7
 8000c60:	1aeb      	subs	r3, r5, r3
 8000c62:	fa1f f588 	uxth.w	r5, r8
 8000c66:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c6a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c6e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c72:	fb00 f30c 	mul.w	r3, r0, ip
 8000c76:	42ab      	cmp	r3, r5
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x1e6>
 8000c7a:	19ed      	adds	r5, r5, r7
 8000c7c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c80:	d26f      	bcs.n	8000d62 <__udivmoddi4+0x2be>
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0x2be>
 8000c86:	3802      	subs	r0, #2
 8000c88:	443d      	add	r5, r7
 8000c8a:	1aeb      	subs	r3, r5, r3
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	e78f      	b.n	8000bb2 <__udivmoddi4+0x10e>
 8000c92:	f1c1 0720 	rsb	r7, r1, #32
 8000c96:	fa22 f807 	lsr.w	r8, r2, r7
 8000c9a:	408b      	lsls	r3, r1
 8000c9c:	fa05 f401 	lsl.w	r4, r5, r1
 8000ca0:	ea48 0303 	orr.w	r3, r8, r3
 8000ca4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ca8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000cac:	40fd      	lsrs	r5, r7
 8000cae:	ea4e 0e04 	orr.w	lr, lr, r4
 8000cb2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000cb6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000cba:	fb0c 5519 	mls	r5, ip, r9, r5
 8000cbe:	fa1f f883 	uxth.w	r8, r3
 8000cc2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000cc6:	fb09 f408 	mul.w	r4, r9, r8
 8000cca:	42ac      	cmp	r4, r5
 8000ccc:	fa02 f201 	lsl.w	r2, r2, r1
 8000cd0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x244>
 8000cd6:	18ed      	adds	r5, r5, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	d243      	bcs.n	8000d66 <__udivmoddi4+0x2c2>
 8000cde:	42ac      	cmp	r4, r5
 8000ce0:	d941      	bls.n	8000d66 <__udivmoddi4+0x2c2>
 8000ce2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ce6:	441d      	add	r5, r3
 8000ce8:	1b2d      	subs	r5, r5, r4
 8000cea:	fa1f fe8e 	uxth.w	lr, lr
 8000cee:	fbb5 f0fc 	udiv	r0, r5, ip
 8000cf2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000cf6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000cfa:	fb00 f808 	mul.w	r8, r0, r8
 8000cfe:	45a0      	cmp	r8, r4
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x26e>
 8000d02:	18e4      	adds	r4, r4, r3
 8000d04:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d08:	d229      	bcs.n	8000d5e <__udivmoddi4+0x2ba>
 8000d0a:	45a0      	cmp	r8, r4
 8000d0c:	d927      	bls.n	8000d5e <__udivmoddi4+0x2ba>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	441c      	add	r4, r3
 8000d12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d16:	eba4 0408 	sub.w	r4, r4, r8
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	454c      	cmp	r4, r9
 8000d20:	46c6      	mov	lr, r8
 8000d22:	464d      	mov	r5, r9
 8000d24:	d315      	bcc.n	8000d52 <__udivmoddi4+0x2ae>
 8000d26:	d012      	beq.n	8000d4e <__udivmoddi4+0x2aa>
 8000d28:	b156      	cbz	r6, 8000d40 <__udivmoddi4+0x29c>
 8000d2a:	ebba 030e 	subs.w	r3, sl, lr
 8000d2e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d32:	fa04 f707 	lsl.w	r7, r4, r7
 8000d36:	40cb      	lsrs	r3, r1
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	40cc      	lsrs	r4, r1
 8000d3c:	6037      	str	r7, [r6, #0]
 8000d3e:	6074      	str	r4, [r6, #4]
 8000d40:	2100      	movs	r1, #0
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	4618      	mov	r0, r3
 8000d48:	e6f8      	b.n	8000b3c <__udivmoddi4+0x98>
 8000d4a:	4690      	mov	r8, r2
 8000d4c:	e6e0      	b.n	8000b10 <__udivmoddi4+0x6c>
 8000d4e:	45c2      	cmp	sl, r8
 8000d50:	d2ea      	bcs.n	8000d28 <__udivmoddi4+0x284>
 8000d52:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d56:	eb69 0503 	sbc.w	r5, r9, r3
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	e7e4      	b.n	8000d28 <__udivmoddi4+0x284>
 8000d5e:	4628      	mov	r0, r5
 8000d60:	e7d7      	b.n	8000d12 <__udivmoddi4+0x26e>
 8000d62:	4640      	mov	r0, r8
 8000d64:	e791      	b.n	8000c8a <__udivmoddi4+0x1e6>
 8000d66:	4681      	mov	r9, r0
 8000d68:	e7be      	b.n	8000ce8 <__udivmoddi4+0x244>
 8000d6a:	4601      	mov	r1, r0
 8000d6c:	e778      	b.n	8000c60 <__udivmoddi4+0x1bc>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	443c      	add	r4, r7
 8000d72:	e745      	b.n	8000c00 <__udivmoddi4+0x15c>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e708      	b.n	8000b8a <__udivmoddi4+0xe6>
 8000d78:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7c:	443d      	add	r5, r7
 8000d7e:	e72b      	b.n	8000bd8 <__udivmoddi4+0x134>

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_InitTick+0x3c>)
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_InitTick+0x40>)
{
 8000d8a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d8c:	7818      	ldrb	r0, [r3, #0]
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d96:	6810      	ldr	r0, [r2, #0]
 8000d98:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d9c:	f000 f89c 	bl	8000ed8 <HAL_SYSTICK_Config>
 8000da0:	4604      	mov	r4, r0
 8000da2:	b958      	cbnz	r0, 8000dbc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da4:	2d0f      	cmp	r5, #15
 8000da6:	d809      	bhi.n	8000dbc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	4602      	mov	r2, r0
 8000daa:	4629      	mov	r1, r5
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 f85e 	bl	8000e70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <HAL_InitTick+0x44>)
 8000db6:	4620      	mov	r0, r4
 8000db8:	601d      	str	r5, [r3, #0]
 8000dba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000dbc:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000dbe:	bd38      	pop	{r3, r4, r5, pc}
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_Init>:
{
 8000dcc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_Init+0x30>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dd6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000dde:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000de6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f82f 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff ffc8 	bl	8000d84 <HAL_InitTick>
  HAL_MspInit();
 8000df4:	f001 f812 	bl	8001e1c <HAL_MspInit>
}
 8000df8:	2000      	movs	r0, #0
 8000dfa:	bd08      	pop	{r3, pc}
 8000dfc:	40023c00 	.word	0x40023c00

08000e00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e00:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <HAL_IncTick+0x10>)
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <HAL_IncTick+0x14>)
 8000e04:	6811      	ldr	r1, [r2, #0]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	440b      	add	r3, r1
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	200000a0 	.word	0x200000a0
 8000e14:	20000000 	.word	0x20000000

08000e18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e18:	4b01      	ldr	r3, [pc, #4]	; (8000e20 <HAL_GetTick+0x8>)
 8000e1a:	6818      	ldr	r0, [r3, #0]
}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200000a0 	.word	0x200000a0

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b538      	push	{r3, r4, r5, lr}
 8000e26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff fff6 	bl	8000e18 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	bf1c      	itt	ne
 8000e30:	4b05      	ldrne	r3, [pc, #20]	; (8000e48 <HAL_Delay+0x24>)
 8000e32:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000e34:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000e36:	bf18      	it	ne
 8000e38:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e3a:	f7ff ffed 	bl	8000e18 <HAL_GetTick>
 8000e3e:	1b40      	subs	r0, r0, r5
 8000e40:	4284      	cmp	r4, r0
 8000e42:	d8fa      	bhi.n	8000e3a <HAL_Delay+0x16>
  {
  }
}
 8000e44:	bd38      	pop	{r3, r4, r5, pc}
 8000e46:	bf00      	nop
 8000e48:	20000000 	.word	0x20000000

08000e4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e4e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e54:	041b      	lsls	r3, r3, #16
 8000e56:	0c1b      	lsrs	r3, r3, #16
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e5c:	0200      	lsls	r0, r0, #8
 8000e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e62:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000e66:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e68:	60d3      	str	r3, [r2, #12]
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e72:	b530      	push	{r4, r5, lr}
 8000e74:	68dc      	ldr	r4, [r3, #12]
 8000e76:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	bf28      	it	cs
 8000e84:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 0501 	mov.w	r5, #1
 8000e8c:	fa05 f303 	lsl.w	r3, r5, r3
 8000e90:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e94:	bf8c      	ite	hi
 8000e96:	3c03      	subhi	r4, #3
 8000e98:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9a:	4019      	ands	r1, r3
 8000e9c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9e:	fa05 f404 	lsl.w	r4, r5, r4
 8000ea2:	3c01      	subs	r4, #1
 8000ea4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000ea6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	ea42 0201 	orr.w	r2, r2, r1
 8000eac:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	bfaf      	iteee	ge
 8000eb2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	f000 000f 	andlt.w	r0, r0, #15
 8000eba:	4b06      	ldrlt	r3, [pc, #24]	; (8000ed4 <HAL_NVIC_SetPriority+0x64>)
 8000ebc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	bfa5      	ittet	ge
 8000ec0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000ec4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ecc:	bd30      	pop	{r4, r5, pc}
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00
 8000ed4:	e000ed14 	.word	0xe000ed14

08000ed8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	3801      	subs	r0, #1
 8000eda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ede:	d20a      	bcs.n	8000ef6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	21f0      	movs	r1, #240	; 0xf0
 8000ee8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f06:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f08:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f0a:	bf0c      	ite	eq
 8000f0c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f10:	f022 0204 	bicne.w	r2, r2, #4
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	4770      	bx	lr
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000f1c:	4770      	bx	lr

08000f1e <HAL_SYSTICK_IRQHandler>:
{
 8000f1e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000f20:	f7ff fffc 	bl	8000f1c <HAL_SYSTICK_Callback>
 8000f24:	bd08      	pop	{r3, pc}
	...

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f2c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f30:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80010d0 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f34:	4a64      	ldr	r2, [pc, #400]	; (80010c8 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f36:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000f38:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000f40:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f44:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000f48:	42b7      	cmp	r7, r6
 8000f4a:	f040 80ad 	bne.w	80010a8 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4e:	684c      	ldr	r4, [r1, #4]
 8000f50:	f024 0a10 	bic.w	sl, r4, #16
 8000f54:	f1ba 0f02 	cmp.w	sl, #2
 8000f58:	d116      	bne.n	8000f88 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000f5a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000f5e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f62:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000f66:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000f6e:	f04f 0e0f 	mov.w	lr, #15
 8000f72:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000f76:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f7a:	690d      	ldr	r5, [r1, #16]
 8000f7c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000f80:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000f84:	f8cc 5020 	str.w	r5, [ip, #32]
 8000f88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f8c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000f8e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f92:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f96:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f98:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f9c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa8:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fac:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb0:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8000fb2:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb6:	d815      	bhi.n	8000fe4 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8000fb8:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fbc:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc0:	68cd      	ldr	r5, [r1, #12]
 8000fc2:	fa05 fa0c 	lsl.w	sl, r5, ip
 8000fc6:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000fca:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000fce:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd2:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fd6:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000fda:	fa0e fe03 	lsl.w	lr, lr, r3
 8000fde:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000fe2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000fe4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fe6:	9d00      	ldr	r5, [sp, #0]
 8000fe8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fea:	688f      	ldr	r7, [r1, #8]
 8000fec:	fa07 f70c 	lsl.w	r7, r7, ip
 8000ff0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ff2:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff4:	00e5      	lsls	r5, r4, #3
 8000ff6:	d557      	bpl.n	80010a8 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff8:	f04f 0b00 	mov.w	fp, #0
 8000ffc:	f8cd b00c 	str.w	fp, [sp, #12]
 8001000:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001004:	4d31      	ldr	r5, [pc, #196]	; (80010cc <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800100a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800100e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001012:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001016:	9703      	str	r7, [sp, #12]
 8001018:	9f03      	ldr	r7, [sp, #12]
 800101a:	f023 0703 	bic.w	r7, r3, #3
 800101e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001022:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001026:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800102a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800102e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001032:	f04f 0e0f 	mov.w	lr, #15
 8001036:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800103a:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800103c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001040:	d039      	beq.n	80010b6 <HAL_GPIO_Init+0x18e>
 8001042:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001046:	42a8      	cmp	r0, r5
 8001048:	d037      	beq.n	80010ba <HAL_GPIO_Init+0x192>
 800104a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800104e:	42a8      	cmp	r0, r5
 8001050:	d035      	beq.n	80010be <HAL_GPIO_Init+0x196>
 8001052:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001056:	42a8      	cmp	r0, r5
 8001058:	d033      	beq.n	80010c2 <HAL_GPIO_Init+0x19a>
 800105a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800105e:	42a8      	cmp	r0, r5
 8001060:	bf14      	ite	ne
 8001062:	2507      	movne	r5, #7
 8001064:	2504      	moveq	r5, #4
 8001066:	fa05 f50c 	lsl.w	r5, r5, ip
 800106a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800106e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001070:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001072:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001074:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001078:	bf0c      	ite	eq
 800107a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800107c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800107e:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001080:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001082:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001086:	bf0c      	ite	eq
 8001088:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800108a:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800108c:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800108e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001090:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001094:	bf0c      	ite	eq
 8001096:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001098:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800109a:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800109c:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800109e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80010a0:	bf54      	ite	pl
 80010a2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80010a4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80010a6:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a8:	3301      	adds	r3, #1
 80010aa:	2b10      	cmp	r3, #16
 80010ac:	f47f af47 	bne.w	8000f3e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80010b0:	b005      	add	sp, #20
 80010b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b6:	465d      	mov	r5, fp
 80010b8:	e7d5      	b.n	8001066 <HAL_GPIO_Init+0x13e>
 80010ba:	2501      	movs	r5, #1
 80010bc:	e7d3      	b.n	8001066 <HAL_GPIO_Init+0x13e>
 80010be:	2502      	movs	r5, #2
 80010c0:	e7d1      	b.n	8001066 <HAL_GPIO_Init+0x13e>
 80010c2:	2503      	movs	r5, #3
 80010c4:	e7cf      	b.n	8001066 <HAL_GPIO_Init+0x13e>
 80010c6:	bf00      	nop
 80010c8:	40013c00 	.word	0x40013c00
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40023800 	.word	0x40023800

080010d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d4:	b10a      	cbz	r2, 80010da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010d6:	6181      	str	r1, [r0, #24]
 80010d8:	4770      	bx	lr
 80010da:	0409      	lsls	r1, r1, #16
 80010dc:	e7fb      	b.n	80010d6 <HAL_GPIO_WritePin+0x2>
	...

080010e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e4:	4604      	mov	r4, r0
 80010e6:	b918      	cbnz	r0, 80010f0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80010e8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80010ea:	b002      	add	sp, #8
 80010ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f0:	6803      	ldr	r3, [r0, #0]
 80010f2:	07dd      	lsls	r5, r3, #31
 80010f4:	d410      	bmi.n	8001118 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f6:	6823      	ldr	r3, [r4, #0]
 80010f8:	0798      	lsls	r0, r3, #30
 80010fa:	d458      	bmi.n	80011ae <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	071a      	lsls	r2, r3, #28
 8001100:	f100 809a 	bmi.w	8001238 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	075b      	lsls	r3, r3, #29
 8001108:	f100 80b8 	bmi.w	800127c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800110c:	69a2      	ldr	r2, [r4, #24]
 800110e:	2a00      	cmp	r2, #0
 8001110:	f040 8119 	bne.w	8001346 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001114:	2000      	movs	r0, #0
 8001116:	e7e8      	b.n	80010ea <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001118:	4ba6      	ldr	r3, [pc, #664]	; (80013b4 <HAL_RCC_OscConfig+0x2d4>)
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	f002 020c 	and.w	r2, r2, #12
 8001120:	2a04      	cmp	r2, #4
 8001122:	d007      	beq.n	8001134 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800112a:	2a08      	cmp	r2, #8
 800112c:	d10a      	bne.n	8001144 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	0259      	lsls	r1, r3, #9
 8001132:	d507      	bpl.n	8001144 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	4b9f      	ldr	r3, [pc, #636]	; (80013b4 <HAL_RCC_OscConfig+0x2d4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	039a      	lsls	r2, r3, #14
 800113a:	d5dc      	bpl.n	80010f6 <HAL_RCC_OscConfig+0x16>
 800113c:	6863      	ldr	r3, [r4, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1d9      	bne.n	80010f6 <HAL_RCC_OscConfig+0x16>
 8001142:	e7d1      	b.n	80010e8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001144:	6863      	ldr	r3, [r4, #4]
 8001146:	4d9b      	ldr	r5, [pc, #620]	; (80013b4 <HAL_RCC_OscConfig+0x2d4>)
 8001148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114c:	d111      	bne.n	8001172 <HAL_RCC_OscConfig+0x92>
 800114e:	682b      	ldr	r3, [r5, #0]
 8001150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001154:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001156:	f7ff fe5f 	bl	8000e18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	4d96      	ldr	r5, [pc, #600]	; (80013b4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800115c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	682b      	ldr	r3, [r5, #0]
 8001160:	039b      	lsls	r3, r3, #14
 8001162:	d4c8      	bmi.n	80010f6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fe58 	bl	8000e18 <HAL_GetTick>
 8001168:	1b80      	subs	r0, r0, r6
 800116a:	2864      	cmp	r0, #100	; 0x64
 800116c:	d9f7      	bls.n	800115e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800116e:	2003      	movs	r0, #3
 8001170:	e7bb      	b.n	80010ea <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001172:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001176:	d104      	bne.n	8001182 <HAL_RCC_OscConfig+0xa2>
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800117e:	602b      	str	r3, [r5, #0]
 8001180:	e7e5      	b.n	800114e <HAL_RCC_OscConfig+0x6e>
 8001182:	682a      	ldr	r2, [r5, #0]
 8001184:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001188:	602a      	str	r2, [r5, #0]
 800118a:	682a      	ldr	r2, [r5, #0]
 800118c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001190:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1df      	bne.n	8001156 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001196:	f7ff fe3f 	bl	8000e18 <HAL_GetTick>
 800119a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119c:	682b      	ldr	r3, [r5, #0]
 800119e:	039f      	lsls	r7, r3, #14
 80011a0:	d5a9      	bpl.n	80010f6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a2:	f7ff fe39 	bl	8000e18 <HAL_GetTick>
 80011a6:	1b80      	subs	r0, r0, r6
 80011a8:	2864      	cmp	r0, #100	; 0x64
 80011aa:	d9f7      	bls.n	800119c <HAL_RCC_OscConfig+0xbc>
 80011ac:	e7df      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ae:	4b81      	ldr	r3, [pc, #516]	; (80013b4 <HAL_RCC_OscConfig+0x2d4>)
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	f012 0f0c 	tst.w	r2, #12
 80011b6:	d007      	beq.n	80011c8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011be:	2a08      	cmp	r2, #8
 80011c0:	d111      	bne.n	80011e6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	025e      	lsls	r6, r3, #9
 80011c6:	d40e      	bmi.n	80011e6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c8:	4b7a      	ldr	r3, [pc, #488]	; (80013b4 <HAL_RCC_OscConfig+0x2d4>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	0795      	lsls	r5, r2, #30
 80011ce:	d502      	bpl.n	80011d6 <HAL_RCC_OscConfig+0xf6>
 80011d0:	68e2      	ldr	r2, [r4, #12]
 80011d2:	2a01      	cmp	r2, #1
 80011d4:	d188      	bne.n	80010e8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	6921      	ldr	r1, [r4, #16]
 80011da:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80011de:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80011e2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e4:	e78a      	b.n	80010fc <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011e6:	68e2      	ldr	r2, [r4, #12]
 80011e8:	4b73      	ldr	r3, [pc, #460]	; (80013b8 <HAL_RCC_OscConfig+0x2d8>)
 80011ea:	b1b2      	cbz	r2, 800121a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011f0:	f7ff fe12 	bl	8000e18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f4:	4d6f      	ldr	r5, [pc, #444]	; (80013b4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80011f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	682b      	ldr	r3, [r5, #0]
 80011fa:	0798      	lsls	r0, r3, #30
 80011fc:	d507      	bpl.n	800120e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fe:	682b      	ldr	r3, [r5, #0]
 8001200:	6922      	ldr	r2, [r4, #16]
 8001202:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001206:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800120a:	602b      	str	r3, [r5, #0]
 800120c:	e776      	b.n	80010fc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800120e:	f7ff fe03 	bl	8000e18 <HAL_GetTick>
 8001212:	1b80      	subs	r0, r0, r6
 8001214:	2802      	cmp	r0, #2
 8001216:	d9ef      	bls.n	80011f8 <HAL_RCC_OscConfig+0x118>
 8001218:	e7a9      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800121a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800121c:	f7ff fdfc 	bl	8000e18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001220:	4d64      	ldr	r5, [pc, #400]	; (80013b4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001222:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001224:	682b      	ldr	r3, [r5, #0]
 8001226:	0799      	lsls	r1, r3, #30
 8001228:	f57f af68 	bpl.w	80010fc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800122c:	f7ff fdf4 	bl	8000e18 <HAL_GetTick>
 8001230:	1b80      	subs	r0, r0, r6
 8001232:	2802      	cmp	r0, #2
 8001234:	d9f6      	bls.n	8001224 <HAL_RCC_OscConfig+0x144>
 8001236:	e79a      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001238:	6962      	ldr	r2, [r4, #20]
 800123a:	4b60      	ldr	r3, [pc, #384]	; (80013bc <HAL_RCC_OscConfig+0x2dc>)
 800123c:	b17a      	cbz	r2, 800125e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800123e:	2201      	movs	r2, #1
 8001240:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001242:	f7ff fde9 	bl	8000e18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001246:	4d5b      	ldr	r5, [pc, #364]	; (80013b4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001248:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800124c:	079f      	lsls	r7, r3, #30
 800124e:	f53f af59 	bmi.w	8001104 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001252:	f7ff fde1 	bl	8000e18 <HAL_GetTick>
 8001256:	1b80      	subs	r0, r0, r6
 8001258:	2802      	cmp	r0, #2
 800125a:	d9f6      	bls.n	800124a <HAL_RCC_OscConfig+0x16a>
 800125c:	e787      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800125e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001260:	f7ff fdda 	bl	8000e18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001264:	4d53      	ldr	r5, [pc, #332]	; (80013b4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001266:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001268:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800126a:	0798      	lsls	r0, r3, #30
 800126c:	f57f af4a 	bpl.w	8001104 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fdd2 	bl	8000e18 <HAL_GetTick>
 8001274:	1b80      	subs	r0, r0, r6
 8001276:	2802      	cmp	r0, #2
 8001278:	d9f6      	bls.n	8001268 <HAL_RCC_OscConfig+0x188>
 800127a:	e778      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800127c:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <HAL_RCC_OscConfig+0x2d4>)
 800127e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001280:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001284:	d128      	bne.n	80012d8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	9201      	str	r2, [sp, #4]
 8001288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800128a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800128e:	641a      	str	r2, [r3, #64]	; 0x40
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800129a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129c:	4d48      	ldr	r5, [pc, #288]	; (80013c0 <HAL_RCC_OscConfig+0x2e0>)
 800129e:	682b      	ldr	r3, [r5, #0]
 80012a0:	05d9      	lsls	r1, r3, #23
 80012a2:	d51b      	bpl.n	80012dc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a4:	68a3      	ldr	r3, [r4, #8]
 80012a6:	4d43      	ldr	r5, [pc, #268]	; (80013b4 <HAL_RCC_OscConfig+0x2d4>)
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d127      	bne.n	80012fc <HAL_RCC_OscConfig+0x21c>
 80012ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80012b4:	f7ff fdb0 	bl	8000e18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b8:	4d3e      	ldr	r5, [pc, #248]	; (80013b4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80012ba:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012bc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012c2:	079b      	lsls	r3, r3, #30
 80012c4:	d539      	bpl.n	800133a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80012c6:	2e00      	cmp	r6, #0
 80012c8:	f43f af20 	beq.w	800110c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012cc:	4a39      	ldr	r2, [pc, #228]	; (80013b4 <HAL_RCC_OscConfig+0x2d4>)
 80012ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
 80012d6:	e719      	b.n	800110c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80012d8:	2600      	movs	r6, #0
 80012da:	e7df      	b.n	800129c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012dc:	682b      	ldr	r3, [r5, #0]
 80012de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80012e4:	f7ff fd98 	bl	8000e18 <HAL_GetTick>
 80012e8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ea:	682b      	ldr	r3, [r5, #0]
 80012ec:	05da      	lsls	r2, r3, #23
 80012ee:	d4d9      	bmi.n	80012a4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f0:	f7ff fd92 	bl	8000e18 <HAL_GetTick>
 80012f4:	1bc0      	subs	r0, r0, r7
 80012f6:	2802      	cmp	r0, #2
 80012f8:	d9f7      	bls.n	80012ea <HAL_RCC_OscConfig+0x20a>
 80012fa:	e738      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012fc:	2b05      	cmp	r3, #5
 80012fe:	d104      	bne.n	800130a <HAL_RCC_OscConfig+0x22a>
 8001300:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	672b      	str	r3, [r5, #112]	; 0x70
 8001308:	e7d0      	b.n	80012ac <HAL_RCC_OscConfig+0x1cc>
 800130a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800130c:	f022 0201 	bic.w	r2, r2, #1
 8001310:	672a      	str	r2, [r5, #112]	; 0x70
 8001312:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001314:	f022 0204 	bic.w	r2, r2, #4
 8001318:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1ca      	bne.n	80012b4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800131e:	f7ff fd7b 	bl	8000e18 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001322:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001326:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001328:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800132a:	0798      	lsls	r0, r3, #30
 800132c:	d5cb      	bpl.n	80012c6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800132e:	f7ff fd73 	bl	8000e18 <HAL_GetTick>
 8001332:	1bc0      	subs	r0, r0, r7
 8001334:	4540      	cmp	r0, r8
 8001336:	d9f7      	bls.n	8001328 <HAL_RCC_OscConfig+0x248>
 8001338:	e719      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800133a:	f7ff fd6d 	bl	8000e18 <HAL_GetTick>
 800133e:	1bc0      	subs	r0, r0, r7
 8001340:	4540      	cmp	r0, r8
 8001342:	d9bd      	bls.n	80012c0 <HAL_RCC_OscConfig+0x1e0>
 8001344:	e713      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001346:	4d1b      	ldr	r5, [pc, #108]	; (80013b4 <HAL_RCC_OscConfig+0x2d4>)
 8001348:	68ab      	ldr	r3, [r5, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b08      	cmp	r3, #8
 8001350:	f43f aeca 	beq.w	80010e8 <HAL_RCC_OscConfig+0x8>
 8001354:	4e1b      	ldr	r6, [pc, #108]	; (80013c4 <HAL_RCC_OscConfig+0x2e4>)
 8001356:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001358:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800135a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800135c:	d134      	bne.n	80013c8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800135e:	f7ff fd5b 	bl	8000e18 <HAL_GetTick>
 8001362:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001364:	682b      	ldr	r3, [r5, #0]
 8001366:	0199      	lsls	r1, r3, #6
 8001368:	d41e      	bmi.n	80013a8 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800136a:	6a22      	ldr	r2, [r4, #32]
 800136c:	69e3      	ldr	r3, [r4, #28]
 800136e:	4313      	orrs	r3, r2
 8001370:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001372:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001376:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001378:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800137c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137e:	4c0d      	ldr	r4, [pc, #52]	; (80013b4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001380:	0852      	lsrs	r2, r2, #1
 8001382:	3a01      	subs	r2, #1
 8001384:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001388:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800138a:	2301      	movs	r3, #1
 800138c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800138e:	f7ff fd43 	bl	8000e18 <HAL_GetTick>
 8001392:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001394:	6823      	ldr	r3, [r4, #0]
 8001396:	019a      	lsls	r2, r3, #6
 8001398:	f53f aebc 	bmi.w	8001114 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800139c:	f7ff fd3c 	bl	8000e18 <HAL_GetTick>
 80013a0:	1b40      	subs	r0, r0, r5
 80013a2:	2802      	cmp	r0, #2
 80013a4:	d9f6      	bls.n	8001394 <HAL_RCC_OscConfig+0x2b4>
 80013a6:	e6e2      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a8:	f7ff fd36 	bl	8000e18 <HAL_GetTick>
 80013ac:	1bc0      	subs	r0, r0, r7
 80013ae:	2802      	cmp	r0, #2
 80013b0:	d9d8      	bls.n	8001364 <HAL_RCC_OscConfig+0x284>
 80013b2:	e6dc      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
 80013b4:	40023800 	.word	0x40023800
 80013b8:	42470000 	.word	0x42470000
 80013bc:	42470e80 	.word	0x42470e80
 80013c0:	40007000 	.word	0x40007000
 80013c4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80013c8:	f7ff fd26 	bl	8000e18 <HAL_GetTick>
 80013cc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ce:	682b      	ldr	r3, [r5, #0]
 80013d0:	019b      	lsls	r3, r3, #6
 80013d2:	f57f ae9f 	bpl.w	8001114 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d6:	f7ff fd1f 	bl	8000e18 <HAL_GetTick>
 80013da:	1b00      	subs	r0, r0, r4
 80013dc:	2802      	cmp	r0, #2
 80013de:	d9f6      	bls.n	80013ce <HAL_RCC_OscConfig+0x2ee>
 80013e0:	e6c5      	b.n	800116e <HAL_RCC_OscConfig+0x8e>
 80013e2:	bf00      	nop

080013e4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013e4:	4913      	ldr	r1, [pc, #76]	; (8001434 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80013e6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013e8:	688b      	ldr	r3, [r1, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d003      	beq.n	80013fa <HAL_RCC_GetSysClockFreq+0x16>
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d003      	beq.n	80013fe <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013f6:	4810      	ldr	r0, [pc, #64]	; (8001438 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013f8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80013fa:	4810      	ldr	r0, [pc, #64]	; (800143c <HAL_RCC_GetSysClockFreq+0x58>)
 80013fc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013fe:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001400:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001402:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001404:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001408:	bf14      	ite	ne
 800140a:	480c      	ldrne	r0, [pc, #48]	; (800143c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800140c:	480a      	ldreq	r0, [pc, #40]	; (8001438 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800140e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001412:	bf18      	it	ne
 8001414:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001416:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800141a:	fba1 0100 	umull	r0, r1, r1, r0
 800141e:	f7ff fb29 	bl	8000a74 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <HAL_RCC_GetSysClockFreq+0x50>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800142a:	3301      	adds	r3, #1
 800142c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800142e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001432:	bd08      	pop	{r3, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	00f42400 	.word	0x00f42400
 800143c:	007a1200 	.word	0x007a1200

08001440 <HAL_RCC_ClockConfig>:
{
 8001440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001444:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001446:	4604      	mov	r4, r0
 8001448:	b910      	cbnz	r0, 8001450 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800144a:	2001      	movs	r0, #1
 800144c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001450:	4b44      	ldr	r3, [pc, #272]	; (8001564 <HAL_RCC_ClockConfig+0x124>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	f002 020f 	and.w	r2, r2, #15
 8001458:	428a      	cmp	r2, r1
 800145a:	d328      	bcc.n	80014ae <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800145c:	6821      	ldr	r1, [r4, #0]
 800145e:	078f      	lsls	r7, r1, #30
 8001460:	d42d      	bmi.n	80014be <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001462:	07c8      	lsls	r0, r1, #31
 8001464:	d440      	bmi.n	80014e8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001466:	4b3f      	ldr	r3, [pc, #252]	; (8001564 <HAL_RCC_ClockConfig+0x124>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	f002 020f 	and.w	r2, r2, #15
 800146e:	4295      	cmp	r5, r2
 8001470:	d366      	bcc.n	8001540 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001472:	6822      	ldr	r2, [r4, #0]
 8001474:	0751      	lsls	r1, r2, #29
 8001476:	d46c      	bmi.n	8001552 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001478:	0713      	lsls	r3, r2, #28
 800147a:	d507      	bpl.n	800148c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800147c:	4a3a      	ldr	r2, [pc, #232]	; (8001568 <HAL_RCC_ClockConfig+0x128>)
 800147e:	6921      	ldr	r1, [r4, #16]
 8001480:	6893      	ldr	r3, [r2, #8]
 8001482:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001486:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800148a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800148c:	f7ff ffaa 	bl	80013e4 <HAL_RCC_GetSysClockFreq>
 8001490:	4b35      	ldr	r3, [pc, #212]	; (8001568 <HAL_RCC_ClockConfig+0x128>)
 8001492:	4a36      	ldr	r2, [pc, #216]	; (800156c <HAL_RCC_ClockConfig+0x12c>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800149a:	5cd3      	ldrb	r3, [r2, r3]
 800149c:	40d8      	lsrs	r0, r3
 800149e:	4b34      	ldr	r3, [pc, #208]	; (8001570 <HAL_RCC_ClockConfig+0x130>)
 80014a0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff fc6e 	bl	8000d84 <HAL_InitTick>
  return HAL_OK;
 80014a8:	2000      	movs	r0, #0
 80014aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	b2ca      	uxtb	r2, r1
 80014b0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 030f 	and.w	r3, r3, #15
 80014b8:	4299      	cmp	r1, r3
 80014ba:	d1c6      	bne.n	800144a <HAL_RCC_ClockConfig+0xa>
 80014bc:	e7ce      	b.n	800145c <HAL_RCC_ClockConfig+0x1c>
 80014be:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014c4:	bf1e      	ittt	ne
 80014c6:	689a      	ldrne	r2, [r3, #8]
 80014c8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80014cc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ce:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014d0:	bf42      	ittt	mi
 80014d2:	689a      	ldrmi	r2, [r3, #8]
 80014d4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80014d8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	68a0      	ldr	r0, [r4, #8]
 80014de:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80014e2:	4302      	orrs	r2, r0
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	e7bc      	b.n	8001462 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e8:	6862      	ldr	r2, [r4, #4]
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <HAL_RCC_ClockConfig+0x128>)
 80014ec:	2a01      	cmp	r2, #1
 80014ee:	d11d      	bne.n	800152c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f6:	d0a8      	beq.n	800144a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014f8:	4e1b      	ldr	r6, [pc, #108]	; (8001568 <HAL_RCC_ClockConfig+0x128>)
 80014fa:	68b3      	ldr	r3, [r6, #8]
 80014fc:	f023 0303 	bic.w	r3, r3, #3
 8001500:	4313      	orrs	r3, r2
 8001502:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001504:	f7ff fc88 	bl	8000e18 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001508:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800150c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150e:	68b3      	ldr	r3, [r6, #8]
 8001510:	6862      	ldr	r2, [r4, #4]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800151a:	d0a4      	beq.n	8001466 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800151c:	f7ff fc7c 	bl	8000e18 <HAL_GetTick>
 8001520:	1bc0      	subs	r0, r0, r7
 8001522:	4540      	cmp	r0, r8
 8001524:	d9f3      	bls.n	800150e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001526:	2003      	movs	r0, #3
}
 8001528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800152c:	1e91      	subs	r1, r2, #2
 800152e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001530:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001532:	d802      	bhi.n	800153a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001534:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001538:	e7dd      	b.n	80014f6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153a:	f013 0f02 	tst.w	r3, #2
 800153e:	e7da      	b.n	80014f6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001540:	b2ea      	uxtb	r2, r5
 8001542:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	429d      	cmp	r5, r3
 800154c:	f47f af7d 	bne.w	800144a <HAL_RCC_ClockConfig+0xa>
 8001550:	e78f      	b.n	8001472 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001552:	4905      	ldr	r1, [pc, #20]	; (8001568 <HAL_RCC_ClockConfig+0x128>)
 8001554:	68e0      	ldr	r0, [r4, #12]
 8001556:	688b      	ldr	r3, [r1, #8]
 8001558:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800155c:	4303      	orrs	r3, r0
 800155e:	608b      	str	r3, [r1, #8]
 8001560:	e78a      	b.n	8001478 <HAL_RCC_ClockConfig+0x38>
 8001562:	bf00      	nop
 8001564:	40023c00 	.word	0x40023c00
 8001568:	40023800 	.word	0x40023800
 800156c:	08002865 	.word	0x08002865
 8001570:	20000008 	.word	0x20000008

08001574 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001574:	4b01      	ldr	r3, [pc, #4]	; (800157c <HAL_RCC_GetHCLKFreq+0x8>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000008 	.word	0x20000008

08001580 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800158a:	5cd3      	ldrb	r3, [r2, r3]
 800158c:	4a03      	ldr	r2, [pc, #12]	; (800159c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800158e:	6810      	ldr	r0, [r2, #0]
}
 8001590:	40d8      	lsrs	r0, r3
 8001592:	4770      	bx	lr
 8001594:	40023800 	.word	0x40023800
 8001598:	08002875 	.word	0x08002875
 800159c:	20000008 	.word	0x20000008

080015a0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80015aa:	5cd3      	ldrb	r3, [r2, r3]
 80015ac:	4a03      	ldr	r2, [pc, #12]	; (80015bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015ae:	6810      	ldr	r0, [r2, #0]
}
 80015b0:	40d8      	lsrs	r0, r3
 80015b2:	4770      	bx	lr
 80015b4:	40023800 	.word	0x40023800
 80015b8:	08002875 	.word	0x08002875
 80015bc:	20000008 	.word	0x20000008

080015c0 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80015c4:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80015c6:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80015c8:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015ca:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80015cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80015d0:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80015d2:	6133      	str	r3, [r6, #16]
{
 80015d4:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015d6:	6883      	ldr	r3, [r0, #8]
 80015d8:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80015da:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015dc:	4303      	orrs	r3, r0
 80015de:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80015e0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015e4:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80015e6:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80015ea:	430b      	orrs	r3, r1
 80015ec:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80015ee:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80015f0:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80015f2:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80015f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80015f8:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015fa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80015fe:	6173      	str	r3, [r6, #20]
 8001600:	4b7a      	ldr	r3, [pc, #488]	; (80017ec <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001602:	d17c      	bne.n	80016fe <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001604:	429e      	cmp	r6, r3
 8001606:	d003      	beq.n	8001610 <UART_SetConfig+0x50>
 8001608:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800160c:	429e      	cmp	r6, r3
 800160e:	d144      	bne.n	800169a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001610:	f7ff ffc6 	bl	80015a0 <HAL_RCC_GetPCLK2Freq>
 8001614:	2519      	movs	r5, #25
 8001616:	fb05 f300 	mul.w	r3, r5, r0
 800161a:	6860      	ldr	r0, [r4, #4]
 800161c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001620:	0040      	lsls	r0, r0, #1
 8001622:	fbb3 f3f0 	udiv	r3, r3, r0
 8001626:	fbb3 f3f9 	udiv	r3, r3, r9
 800162a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800162e:	f7ff ffb7 	bl	80015a0 <HAL_RCC_GetPCLK2Freq>
 8001632:	6863      	ldr	r3, [r4, #4]
 8001634:	4368      	muls	r0, r5
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fbb0 f7f3 	udiv	r7, r0, r3
 800163c:	f7ff ffb0 	bl	80015a0 <HAL_RCC_GetPCLK2Freq>
 8001640:	6863      	ldr	r3, [r4, #4]
 8001642:	4368      	muls	r0, r5
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fbb0 f3f3 	udiv	r3, r0, r3
 800164a:	fbb3 f3f9 	udiv	r3, r3, r9
 800164e:	fb09 7313 	mls	r3, r9, r3, r7
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	3332      	adds	r3, #50	; 0x32
 8001656:	fbb3 f3f9 	udiv	r3, r3, r9
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001660:	f7ff ff9e 	bl	80015a0 <HAL_RCC_GetPCLK2Freq>
 8001664:	6862      	ldr	r2, [r4, #4]
 8001666:	4368      	muls	r0, r5
 8001668:	0052      	lsls	r2, r2, #1
 800166a:	fbb0 faf2 	udiv	sl, r0, r2
 800166e:	f7ff ff97 	bl	80015a0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001672:	6863      	ldr	r3, [r4, #4]
 8001674:	4368      	muls	r0, r5
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fbb0 f3f3 	udiv	r3, r0, r3
 800167c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001680:	fb09 a313 	mls	r3, r9, r3, sl
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	3332      	adds	r3, #50	; 0x32
 8001688:	fbb3 f3f9 	udiv	r3, r3, r9
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001692:	443b      	add	r3, r7
 8001694:	60b3      	str	r3, [r6, #8]
 8001696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800169a:	f7ff ff71 	bl	8001580 <HAL_RCC_GetPCLK1Freq>
 800169e:	2519      	movs	r5, #25
 80016a0:	fb05 f300 	mul.w	r3, r5, r0
 80016a4:	6860      	ldr	r0, [r4, #4]
 80016a6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80016aa:	0040      	lsls	r0, r0, #1
 80016ac:	fbb3 f3f0 	udiv	r3, r3, r0
 80016b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80016b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80016b8:	f7ff ff62 	bl	8001580 <HAL_RCC_GetPCLK1Freq>
 80016bc:	6863      	ldr	r3, [r4, #4]
 80016be:	4368      	muls	r0, r5
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	fbb0 f7f3 	udiv	r7, r0, r3
 80016c6:	f7ff ff5b 	bl	8001580 <HAL_RCC_GetPCLK1Freq>
 80016ca:	6863      	ldr	r3, [r4, #4]
 80016cc:	4368      	muls	r0, r5
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d4:	fbb3 f3f9 	udiv	r3, r3, r9
 80016d8:	fb09 7313 	mls	r3, r9, r3, r7
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	3332      	adds	r3, #50	; 0x32
 80016e0:	fbb3 f3f9 	udiv	r3, r3, r9
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80016ea:	f7ff ff49 	bl	8001580 <HAL_RCC_GetPCLK1Freq>
 80016ee:	6862      	ldr	r2, [r4, #4]
 80016f0:	4368      	muls	r0, r5
 80016f2:	0052      	lsls	r2, r2, #1
 80016f4:	fbb0 faf2 	udiv	sl, r0, r2
 80016f8:	f7ff ff42 	bl	8001580 <HAL_RCC_GetPCLK1Freq>
 80016fc:	e7b9      	b.n	8001672 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80016fe:	429e      	cmp	r6, r3
 8001700:	d002      	beq.n	8001708 <UART_SetConfig+0x148>
 8001702:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <UART_SetConfig+0x230>)
 8001704:	429e      	cmp	r6, r3
 8001706:	d140      	bne.n	800178a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001708:	f7ff ff4a 	bl	80015a0 <HAL_RCC_GetPCLK2Freq>
 800170c:	6867      	ldr	r7, [r4, #4]
 800170e:	2519      	movs	r5, #25
 8001710:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001714:	fb05 f300 	mul.w	r3, r5, r0
 8001718:	00bf      	lsls	r7, r7, #2
 800171a:	fbb3 f3f7 	udiv	r3, r3, r7
 800171e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001722:	011f      	lsls	r7, r3, #4
 8001724:	f7ff ff3c 	bl	80015a0 <HAL_RCC_GetPCLK2Freq>
 8001728:	6863      	ldr	r3, [r4, #4]
 800172a:	4368      	muls	r0, r5
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	fbb0 f8f3 	udiv	r8, r0, r3
 8001732:	f7ff ff35 	bl	80015a0 <HAL_RCC_GetPCLK2Freq>
 8001736:	6863      	ldr	r3, [r4, #4]
 8001738:	4368      	muls	r0, r5
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001740:	fbb3 f3f9 	udiv	r3, r3, r9
 8001744:	fb09 8313 	mls	r3, r9, r3, r8
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	3332      	adds	r3, #50	; 0x32
 800174c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001750:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001754:	f7ff ff24 	bl	80015a0 <HAL_RCC_GetPCLK2Freq>
 8001758:	6862      	ldr	r2, [r4, #4]
 800175a:	4368      	muls	r0, r5
 800175c:	0092      	lsls	r2, r2, #2
 800175e:	fbb0 faf2 	udiv	sl, r0, r2
 8001762:	f7ff ff1d 	bl	80015a0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001766:	6863      	ldr	r3, [r4, #4]
 8001768:	4368      	muls	r0, r5
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001770:	fbb3 f3f9 	udiv	r3, r3, r9
 8001774:	fb09 a313 	mls	r3, r9, r3, sl
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	3332      	adds	r3, #50	; 0x32
 800177c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	ea43 0308 	orr.w	r3, r3, r8
 8001788:	e783      	b.n	8001692 <UART_SetConfig+0xd2>
 800178a:	f7ff fef9 	bl	8001580 <HAL_RCC_GetPCLK1Freq>
 800178e:	6867      	ldr	r7, [r4, #4]
 8001790:	2519      	movs	r5, #25
 8001792:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001796:	fb05 f300 	mul.w	r3, r5, r0
 800179a:	00bf      	lsls	r7, r7, #2
 800179c:	fbb3 f3f7 	udiv	r3, r3, r7
 80017a0:	fbb3 f3f9 	udiv	r3, r3, r9
 80017a4:	011f      	lsls	r7, r3, #4
 80017a6:	f7ff feeb 	bl	8001580 <HAL_RCC_GetPCLK1Freq>
 80017aa:	6863      	ldr	r3, [r4, #4]
 80017ac:	4368      	muls	r0, r5
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	fbb0 f8f3 	udiv	r8, r0, r3
 80017b4:	f7ff fee4 	bl	8001580 <HAL_RCC_GetPCLK1Freq>
 80017b8:	6863      	ldr	r3, [r4, #4]
 80017ba:	4368      	muls	r0, r5
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c2:	fbb3 f3f9 	udiv	r3, r3, r9
 80017c6:	fb09 8313 	mls	r3, r9, r3, r8
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	3332      	adds	r3, #50	; 0x32
 80017ce:	fbb3 f3f9 	udiv	r3, r3, r9
 80017d2:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80017d6:	f7ff fed3 	bl	8001580 <HAL_RCC_GetPCLK1Freq>
 80017da:	6862      	ldr	r2, [r4, #4]
 80017dc:	4368      	muls	r0, r5
 80017de:	0092      	lsls	r2, r2, #2
 80017e0:	fbb0 faf2 	udiv	sl, r0, r2
 80017e4:	f7ff fecc 	bl	8001580 <HAL_RCC_GetPCLK1Freq>
 80017e8:	e7bd      	b.n	8001766 <UART_SetConfig+0x1a6>
 80017ea:	bf00      	nop
 80017ec:	40011000 	.word	0x40011000
 80017f0:	40011400 	.word	0x40011400

080017f4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80017f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f6:	4604      	mov	r4, r0
 80017f8:	460e      	mov	r6, r1
 80017fa:	4617      	mov	r7, r2
 80017fc:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80017fe:	6821      	ldr	r1, [r4, #0]
 8001800:	680b      	ldr	r3, [r1, #0]
 8001802:	ea36 0303 	bics.w	r3, r6, r3
 8001806:	d101      	bne.n	800180c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001808:	2000      	movs	r0, #0
}
 800180a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800180c:	1c6b      	adds	r3, r5, #1
 800180e:	d0f7      	beq.n	8001800 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001810:	b995      	cbnz	r5, 8001838 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800181a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001824:	2320      	movs	r3, #32
 8001826:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800182a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800182e:	2300      	movs	r3, #0
 8001830:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001834:	2003      	movs	r0, #3
 8001836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001838:	f7ff faee 	bl	8000e18 <HAL_GetTick>
 800183c:	1bc0      	subs	r0, r0, r7
 800183e:	4285      	cmp	r5, r0
 8001840:	d2dd      	bcs.n	80017fe <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001842:	e7e6      	b.n	8001812 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001844 <HAL_UART_Init>:
{
 8001844:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001846:	4604      	mov	r4, r0
 8001848:	b340      	cbz	r0, 800189c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800184a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800184e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001852:	b91b      	cbnz	r3, 800185c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001854:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001858:	f000 fb10 	bl	8001e7c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800185c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800185e:	2324      	movs	r3, #36	; 0x24
 8001860:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001864:	68d3      	ldr	r3, [r2, #12]
 8001866:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800186a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800186c:	4620      	mov	r0, r4
 800186e:	f7ff fea7 	bl	80015c0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	691a      	ldr	r2, [r3, #16]
 8001876:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800187a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001882:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800188a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800188c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800188e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001890:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001892:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001896:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800189a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800189c:	2001      	movs	r0, #1
}
 800189e:	bd10      	pop	{r4, pc}

080018a0 <HAL_UART_Transmit>:
{
 80018a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018a4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80018a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80018aa:	2b20      	cmp	r3, #32
{
 80018ac:	4604      	mov	r4, r0
 80018ae:	460d      	mov	r5, r1
 80018b0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80018b2:	d14f      	bne.n	8001954 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80018b4:	2900      	cmp	r1, #0
 80018b6:	d04a      	beq.n	800194e <HAL_UART_Transmit+0xae>
 80018b8:	2a00      	cmp	r2, #0
 80018ba:	d048      	beq.n	800194e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80018bc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d047      	beq.n	8001954 <HAL_UART_Transmit+0xb4>
 80018c4:	2301      	movs	r3, #1
 80018c6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018ce:	2321      	movs	r3, #33	; 0x21
 80018d0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80018d4:	f7ff faa0 	bl	8000e18 <HAL_GetTick>
    huart->TxXferSize = Size;
 80018d8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80018dc:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80018de:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80018e2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	b96b      	cbnz	r3, 8001904 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018e8:	463b      	mov	r3, r7
 80018ea:	4632      	mov	r2, r6
 80018ec:	2140      	movs	r1, #64	; 0x40
 80018ee:	4620      	mov	r0, r4
 80018f0:	f7ff ff80 	bl	80017f4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80018f4:	b9b0      	cbnz	r0, 8001924 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 80018f6:	2320      	movs	r3, #32
 80018f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80018fc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001904:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001906:	3b01      	subs	r3, #1
 8001908:	b29b      	uxth	r3, r3
 800190a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800190c:	68a3      	ldr	r3, [r4, #8]
 800190e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001912:	4632      	mov	r2, r6
 8001914:	463b      	mov	r3, r7
 8001916:	f04f 0180 	mov.w	r1, #128	; 0x80
 800191a:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800191c:	d10e      	bne.n	800193c <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800191e:	f7ff ff69 	bl	80017f4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001922:	b110      	cbz	r0, 800192a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001924:	2003      	movs	r0, #3
 8001926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800192a:	882b      	ldrh	r3, [r5, #0]
 800192c:	6822      	ldr	r2, [r4, #0]
 800192e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001932:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001934:	6923      	ldr	r3, [r4, #16]
 8001936:	b943      	cbnz	r3, 800194a <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001938:	3502      	adds	r5, #2
 800193a:	e7d2      	b.n	80018e2 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800193c:	f7ff ff5a 	bl	80017f4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001940:	2800      	cmp	r0, #0
 8001942:	d1ef      	bne.n	8001924 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	782a      	ldrb	r2, [r5, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	3501      	adds	r5, #1
 800194c:	e7c9      	b.n	80018e2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800194e:	2001      	movs	r0, #1
 8001950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001954:	2002      	movs	r0, #2
}
 8001956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800195c <tab_deg_to_inc_converter>:
float correction_margin_error_integration = 0;
float correction_margin_last_error = 0;
char command_string[10];


int tab_deg_to_inc_converter(float degrees_angle) {
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	ed87 0a01 	vstr	s0, [r7, #4]
    int inc = (int)(degrees_angle*215000/360); //3000 inc/evolution, 1:25reductor, 15:43 ratio between central gear and wings
 8001966:	edd7 7a01 	vldr	s15, [r7, #4]
 800196a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001994 <tab_deg_to_inc_converter+0x38>
 800196e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001972:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001998 <tab_deg_to_inc_converter+0x3c>
 8001976:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800197a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800197e:	ee17 3a90 	vmov	r3, s15
 8001982:	60fb      	str	r3, [r7, #12]
    return inc;
 8001984:	68fb      	ldr	r3, [r7, #12]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	4851f600 	.word	0x4851f600
 8001998:	43b40000 	.word	0x43b40000

0800199c <do_string_command>:

void do_string_command(char first, char second, int number)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	603a      	str	r2, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
 80019a8:	460b      	mov	r3, r1
 80019aa:	71bb      	strb	r3, [r7, #6]
	for(int i = 0; i< sizeof(command_string); i++){
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e007      	b.n	80019c2 <do_string_command+0x26>
		command_string[i] = 0;
 80019b2:	4a12      	ldr	r2, [pc, #72]	; (80019fc <do_string_command+0x60>)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	4413      	add	r3, r2
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i< sizeof(command_string); i++){
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3301      	adds	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2b09      	cmp	r3, #9
 80019c6:	d9f4      	bls.n	80019b2 <do_string_command+0x16>
	}
	command_string[0] = first;
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <do_string_command+0x60>)
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	7013      	strb	r3, [r2, #0]
	command_string[1] = second;
 80019ce:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <do_string_command+0x60>)
 80019d0:	79bb      	ldrb	r3, [r7, #6]
 80019d2:	7053      	strb	r3, [r2, #1]
	char* commandIncStart = (char*)(&command_string[2]);
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <do_string_command+0x64>)
 80019d6:	613b      	str	r3, [r7, #16]
	sprintf(commandIncStart, "%d", number);
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	490a      	ldr	r1, [pc, #40]	; (8001a04 <do_string_command+0x68>)
 80019dc:	6938      	ldr	r0, [r7, #16]
 80019de:	f000 faf3 	bl	8001fc8 <siprintf>
	size_t length = strlen(commandIncStart);
 80019e2:	6938      	ldr	r0, [r7, #16]
 80019e4:	f7fe fbfc 	bl	80001e0 <strlen>
 80019e8:	60f8      	str	r0, [r7, #12]
	commandIncStart[length] = '\r';
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	220d      	movs	r2, #13
 80019f2:	701a      	strb	r2, [r3, #0]

	return command_string;
 80019f4:	bf00      	nop
}
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200000a4 	.word	0x200000a4
 8001a00:	200000a6 	.word	0x200000a6
 8001a04:	08002838 	.word	0x08002838

08001a08 <motor_goto_position_inc>:

void motor_goto_position_inc(int position_inc)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	do_string_command('L', 'A', position_inc);
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	2141      	movs	r1, #65	; 0x41
 8001a14:	204c      	movs	r0, #76	; 0x4c
 8001a16:	f7ff ffc1 	bl	800199c <do_string_command>
	HAL_UART_Transmit(&huart1, command_string, strlen(command_string), 30);
 8001a1a:	480b      	ldr	r0, [pc, #44]	; (8001a48 <motor_goto_position_inc+0x40>)
 8001a1c:	f7fe fbe0 	bl	80001e0 <strlen>
 8001a20:	4603      	mov	r3, r0
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	231e      	movs	r3, #30
 8001a26:	4908      	ldr	r1, [pc, #32]	; (8001a48 <motor_goto_position_inc+0x40>)
 8001a28:	4808      	ldr	r0, [pc, #32]	; (8001a4c <motor_goto_position_inc+0x44>)
 8001a2a:	f7ff ff39 	bl	80018a0 <HAL_UART_Transmit>
	uint8_t* command = "M\r";
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <motor_goto_position_inc+0x48>)
 8001a30:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, command, 2, 30);
 8001a32:	231e      	movs	r3, #30
 8001a34:	2202      	movs	r2, #2
 8001a36:	68f9      	ldr	r1, [r7, #12]
 8001a38:	4804      	ldr	r0, [pc, #16]	; (8001a4c <motor_goto_position_inc+0x44>)
 8001a3a:	f7ff ff31 	bl	80018a0 <HAL_UART_Transmit>
	return;
 8001a3e:	bf00      	nop
}
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200000a4 	.word	0x200000a4
 8001a4c:	200000b0 	.word	0x200000b0
 8001a50:	0800283c 	.word	0x0800283c

08001a54 <aerobrakes_control_init>:
	command = "M\r";
	HAL_UART_Transmit(&huart1, command, 2, 30);
	return; // SMALL FUNCTION TO TEST IF THE TRANSMISSION IS WORKING... THE MOTOR SHOULD ROTATE
}

void aerobrakes_control_init(void) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
    // TO CALL AT POWERING ON
    
	uint8_t* command = "HO\r";
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <aerobrakes_control_init+0x80>)
 8001a5c:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, command, 3, 30);
 8001a5e:	231e      	movs	r3, #30
 8001a60:	2203      	movs	r2, #3
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	481c      	ldr	r0, [pc, #112]	; (8001ad8 <aerobrakes_control_init+0x84>)
 8001a66:	f7ff ff1b 	bl	80018a0 <HAL_UART_Transmit>
	command = "LL-1\r";
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <aerobrakes_control_init+0x88>)
 8001a6c:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, command, 5, 30);
 8001a6e:	231e      	movs	r3, #30
 8001a70:	2205      	movs	r2, #5
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4818      	ldr	r0, [pc, #96]	; (8001ad8 <aerobrakes_control_init+0x84>)
 8001a76:	f7ff ff13 	bl	80018a0 <HAL_UART_Transmit>
	int max_inc = tab_deg_to_inc_converter(MAX_OPENING_DEG - 2); //" degrees for safety.
 8001a7a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001ae0 <aerobrakes_control_init+0x8c>
 8001a7e:	f7ff ff6d 	bl	800195c <tab_deg_to_inc_converter>
 8001a82:	6038      	str	r0, [r7, #0]
	do_string_command('L', 'L', max_inc);
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	214c      	movs	r1, #76	; 0x4c
 8001a88:	204c      	movs	r0, #76	; 0x4c
 8001a8a:	f7ff ff87 	bl	800199c <do_string_command>
	HAL_UART_Transmit(&huart1, command_string, 8, 30);
 8001a8e:	231e      	movs	r3, #30
 8001a90:	2208      	movs	r2, #8
 8001a92:	4914      	ldr	r1, [pc, #80]	; (8001ae4 <aerobrakes_control_init+0x90>)
 8001a94:	4810      	ldr	r0, [pc, #64]	; (8001ad8 <aerobrakes_control_init+0x84>)
 8001a96:	f7ff ff03 	bl	80018a0 <HAL_UART_Transmit>
	command = "LPC1000\r"; // peak current max, to be redefined
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <aerobrakes_control_init+0x94>)
 8001a9c:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, command, 7, 30);
 8001a9e:	231e      	movs	r3, #30
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <aerobrakes_control_init+0x84>)
 8001aa6:	f7ff fefb 	bl	80018a0 <HAL_UART_Transmit>
	command = "LCC1000\r"; // continuous current max_to be redefined
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <aerobrakes_control_init+0x98>)
 8001aac:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, command, 7, 30);
 8001aae:	231e      	movs	r3, #30
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4808      	ldr	r0, [pc, #32]	; (8001ad8 <aerobrakes_control_init+0x84>)
 8001ab6:	f7ff fef3 	bl	80018a0 <HAL_UART_Transmit>
	command = "EN\r";
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <aerobrakes_control_init+0x9c>)
 8001abc:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, command, 3, 30);
 8001abe:	231e      	movs	r3, #30
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <aerobrakes_control_init+0x84>)
 8001ac6:	f7ff feeb 	bl	80018a0 <HAL_UART_Transmit>
	return;
 8001aca:	bf00      	nop
}
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	08002840 	.word	0x08002840
 8001ad8:	200000b0 	.word	0x200000b0
 8001adc:	08002848 	.word	0x08002848
 8001ae0:	433c0000 	.word	0x433c0000
 8001ae4:	200000a4 	.word	0x200000a4
 8001ae8:	08002850 	.word	0x08002850
 8001aec:	0800285c 	.word	0x0800285c
 8001af0:	08002844 	.word	0x08002844

08001af4 <full_close>:


void full_close(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
	int angle_close_inc = tab_deg_to_inc_converter(0.0);
 8001afa:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001b14 <full_close+0x20>
 8001afe:	f7ff ff2d 	bl	800195c <tab_deg_to_inc_converter>
 8001b02:	6078      	str	r0, [r7, #4]
	motor_goto_position_inc(angle_close_inc);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff7f 	bl	8001a08 <motor_goto_position_inc>
	return;
 8001b0a:	bf00      	nop
}
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	00000000 	.word	0x00000000

08001b18 <aerobrake_helloworld>:

void aerobrake_helloworld(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
	float angle_helloworld = 5.0;
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <aerobrake_helloworld+0x30>)
 8001b20:	607b      	str	r3, [r7, #4]
	int angle_helloworld_inc = tab_deg_to_inc_converter(angle_helloworld);
 8001b22:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b26:	f7ff ff19 	bl	800195c <tab_deg_to_inc_converter>
 8001b2a:	6038      	str	r0, [r7, #0]
	motor_goto_position_inc(angle_helloworld_inc);
 8001b2c:	6838      	ldr	r0, [r7, #0]
 8001b2e:	f7ff ff6b 	bl	8001a08 <motor_goto_position_inc>
	HAL_Delay(500);
 8001b32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b36:	f7ff f975 	bl	8000e24 <HAL_Delay>
	full_close();
 8001b3a:	f7ff ffdb 	bl	8001af4 <full_close>
	return;
 8001b3e:	bf00      	nop

}
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40a00000 	.word	0x40a00000

08001b4c <command_aerobrake_controller>:


void command_aerobrake_controller(float altitude, float speed)
{
 8001b4c:	b5b0      	push	{r4, r5, r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b56:	edc7 0a00 	vstr	s1, [r7]
//    float opt_act_position_deg = angle_tab(altitude, speed);
    float opt_act_position_deg = 0.0;
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
    int opt_act_position_inc = tab_deg_to_inc_converter(opt_act_position_deg);
 8001b60:	ed97 0a07 	vldr	s0, [r7, #28]
 8001b64:	f7ff fefa 	bl	800195c <tab_deg_to_inc_converter>
 8001b68:	61b8      	str	r0, [r7, #24]
    int central_inc_max_margins = tab_deg_to_inc_converter(Central_angle_max_margins);
 8001b6a:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8001c4c <command_aerobrake_controller+0x100>
 8001b6e:	f7ff fef5 	bl	800195c <tab_deg_to_inc_converter>
 8001b72:	6178      	str	r0, [r7, #20]
    int inc_error = central_inc_max_margins - opt_act_position_inc;
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	613b      	str	r3, [r7, #16]
    correction_margin_error_integration += inc_error;
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b86:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <command_aerobrake_controller+0x104>)
 8001b88:	edd3 7a00 	vldr	s15, [r3]
 8001b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b90:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <command_aerobrake_controller+0x104>)
 8001b92:	edc3 7a00 	vstr	s15, [r3]
    int command_inc = opt_act_position_inc + Kp_correction_margin*inc_error + Td_correction_margin*(inc_error-correction_margin_last_error) + Ki_correction_margin*correction_margin_error_integration;
 8001b96:	69b8      	ldr	r0, [r7, #24]
 8001b98:	f7fe fccc 	bl	8000534 <__aeabi_i2d>
 8001b9c:	4604      	mov	r4, r0
 8001b9e:	460d      	mov	r5, r1
 8001ba0:	6938      	ldr	r0, [r7, #16]
 8001ba2:	f7fe fcc7 	bl	8000534 <__aeabi_i2d>
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <command_aerobrake_controller+0x108>)
 8001bac:	f7fe fd28 	bl	8000600 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f7fe fb70 	bl	800029c <__adddf3>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	460c      	mov	r4, r1
 8001bc0:	4625      	mov	r5, r4
 8001bc2:	461c      	mov	r4, r3
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <command_aerobrake_controller+0x10c>)
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001c5c <command_aerobrake_controller+0x110>
 8001bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be0:	ee17 0a90 	vmov	r0, s15
 8001be4:	f7fe fcb8 	bl	8000558 <__aeabi_f2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4620      	mov	r0, r4
 8001bee:	4629      	mov	r1, r5
 8001bf0:	f7fe fb54 	bl	800029c <__adddf3>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	460c      	mov	r4, r1
 8001bf8:	4625      	mov	r5, r4
 8001bfa:	461c      	mov	r4, r3
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <command_aerobrake_controller+0x104>)
 8001bfe:	edd3 7a00 	vldr	s15, [r3]
 8001c02:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001c5c <command_aerobrake_controller+0x110>
 8001c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c0a:	ee17 0a90 	vmov	r0, s15
 8001c0e:	f7fe fca3 	bl	8000558 <__aeabi_f2d>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4620      	mov	r0, r4
 8001c18:	4629      	mov	r1, r5
 8001c1a:	f7fe fb3f 	bl	800029c <__adddf3>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	460c      	mov	r4, r1
 8001c22:	4618      	mov	r0, r3
 8001c24:	4621      	mov	r1, r4
 8001c26:	f7fe fefd 	bl	8000a24 <__aeabi_d2iz>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	60fb      	str	r3, [r7, #12]
    correction_margin_last_error = inc_error;
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <command_aerobrake_controller+0x10c>)
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
    motor_goto_position_inc(command_inc);
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f7ff fee2 	bl	8001a08 <motor_goto_position_inc>
    return;
 8001c44:	bf00      	nop
}
 8001c46:	3720      	adds	r7, #32
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4c:	425c0000 	.word	0x425c0000
 8001c50:	2000008c 	.word	0x2000008c
 8001c54:	3fe00000 	.word	0x3fe00000
 8001c58:	20000090 	.word	0x20000090
 8001c5c:	00000000 	.word	0x00000000

08001c60 <SystemClock_Config>:
 * @brief System Clock Configuration
 * @retval None
 */
void
SystemClock_Config (void)
{
 8001c60:	b530      	push	{r4, r5, lr}
 8001c62:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  /**Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE()
 8001c64:	2200      	movs	r2, #0
 8001c66:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <SystemClock_Config+0xa4>)
 8001c68:	9201      	str	r2, [sp, #4]
 8001c6a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001c6c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001c70:	6419      	str	r1, [r3, #64]	; 0x40
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  ;

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c74:	4924      	ldr	r1, [pc, #144]	; (8001d08 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE()
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c7e:	9202      	str	r2, [sp, #8]
 8001c80:	680b      	ldr	r3, [r1, #0]
 8001c82:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c8a:	600b      	str	r3, [r1, #0]
 8001c8c:	680b      	ldr	r3, [r1, #0]
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c8e:	920f      	str	r2, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c94:	9302      	str	r3, [sp, #8]
 8001c96:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001c9c:	2310      	movs	r3, #16
 8001c9e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ca0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ca2:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ca6:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ca8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001caa:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cac:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 8001cae:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cb0:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb2:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001cb4:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cb6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 8001cb8:	f7ff fa12 	bl	80010e0 <HAL_RCC_OscConfig>
 8001cbc:	b100      	cbz	r0, 8001cc0 <SystemClock_Config+0x60>
 8001cbe:	e7fe      	b.n	8001cbe <SystemClock_Config+0x5e>
      _Error_Handler (__FILE__, __LINE__);
    }

  /**Initializes the CPU, AHB and APB busses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001cc0:	230f      	movs	r3, #15
 8001cc2:	9303      	str	r3, [sp, #12]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc4:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cca:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ccc:	4621      	mov	r1, r4
 8001cce:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd0:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cd2:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cd4:	f7ff fbb4 	bl	8001440 <HAL_RCC_ClockConfig>
 8001cd8:	4604      	mov	r4, r0
 8001cda:	b100      	cbz	r0, 8001cde <SystemClock_Config+0x7e>
 8001cdc:	e7fe      	b.n	8001cdc <SystemClock_Config+0x7c>
      _Error_Handler (__FILE__, __LINE__);
    }

  /**Configure the Systick interrupt time
   */
  HAL_SYSTICK_Config (HAL_RCC_GetHCLKFreq () / 1000);
 8001cde:	f7ff fc49 	bl	8001574 <HAL_RCC_GetHCLKFreq>
 8001ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce6:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cea:	f7ff f8f5 	bl	8000ed8 <HAL_SYSTICK_Config>

  /**Configure the Systick
   */
  HAL_SYSTICK_CLKSourceConfig (SYSTICK_CLKSOURCE_HCLK);
 8001cee:	4628      	mov	r0, r5
 8001cf0:	f7ff f908 	bl	8000f04 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority (SysTick_IRQn, 0, 0);
 8001cf4:	4622      	mov	r2, r4
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f7ff f8b8 	bl	8000e70 <HAL_NVIC_SetPriority>
}
 8001d00:	b015      	add	sp, #84	; 0x54
 8001d02:	bd30      	pop	{r4, r5, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40007000 	.word	0x40007000

08001d0c <main>:
{
 8001d0c:	b500      	push	{lr}
 8001d0e:	b08b      	sub	sp, #44	; 0x2c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE()
 8001d10:	2400      	movs	r4, #0
  HAL_Init ();
 8001d12:	f7ff f85b 	bl	8000dcc <HAL_Init>
  SystemClock_Config ();
 8001d16:	f7ff ffa3 	bl	8001c60 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE()
 8001d1a:	4b3a      	ldr	r3, [pc, #232]	; (8001e04 <main+0xf8>)
 8001d1c:	9401      	str	r4, [sp, #4]
 8001d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  ;
  __HAL_RCC_GPIOB_CLK_ENABLE()
  ;

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d20:	4839      	ldr	r0, [pc, #228]	; (8001e08 <main+0xfc>)
  huart1.Instance = USART1;
 8001d22:	4d3a      	ldr	r5, [pc, #232]	; (8001e0c <main+0x100>)
  __HAL_RCC_GPIOC_CLK_ENABLE()
 8001d24:	f042 0204 	orr.w	r2, r2, #4
 8001d28:	631a      	str	r2, [r3, #48]	; 0x30
 8001d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d2c:	f002 0204 	and.w	r2, r2, #4
 8001d30:	9201      	str	r2, [sp, #4]
 8001d32:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE()
 8001d34:	9402      	str	r4, [sp, #8]
 8001d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d40:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001d44:	9202      	str	r2, [sp, #8]
 8001d46:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE()
 8001d48:	9403      	str	r4, [sp, #12]
 8001d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	631a      	str	r2, [r3, #48]	; 0x30
 8001d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d54:	f002 0201 	and.w	r2, r2, #1
 8001d58:	9203      	str	r2, [sp, #12]
 8001d5a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE()
 8001d5c:	9404      	str	r4, [sp, #16]
 8001d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d60:	f042 0202 	orr.w	r2, r2, #2
 8001d64:	631a      	str	r2, [r3, #48]	; 0x30
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d6c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE()
 8001d6e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d70:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE()
 8001d72:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d74:	f7ff f9ae 	bl	80010d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init (B1_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d80:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <main+0x104>)
  HAL_GPIO_Init (B1_GPIO_Port, &GPIO_InitStruct);
 8001d82:	4824      	ldr	r0, [pc, #144]	; (8001e14 <main+0x108>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d84:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init (B1_GPIO_Port, &GPIO_InitStruct);
 8001d88:	f7ff f8ce 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d8c:	2320      	movs	r3, #32
 8001d8e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init (LD2_GPIO_Port, &GPIO_InitStruct);
 8001d90:	481d      	ldr	r0, [pc, #116]	; (8001e08 <main+0xfc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d94:	2301      	movs	r3, #1
  HAL_GPIO_Init (LD2_GPIO_Port, &GPIO_InitStruct);
 8001d96:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init (LD2_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	f7ff f8c4 	bl	8000f28 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 8001da0:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <main+0x10c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001da2:	60ac      	str	r4, [r5, #8]
  huart1.Init.BaudRate = 115200;
 8001da4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001da8:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_UART_Init (&huart1) != HAL_OK)
 8001dac:	4628      	mov	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dae:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001db0:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001db2:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001db4:	616b      	str	r3, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db6:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db8:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init (&huart1) != HAL_OK)
 8001dba:	f7ff fd43 	bl	8001844 <HAL_UART_Init>
 8001dbe:	b100      	cbz	r0, 8001dc2 <main+0xb6>
 8001dc0:	e7fe      	b.n	8001dc0 <main+0xb4>
  HAL_UART_Init(&huart1);
 8001dc2:	4628      	mov	r0, r5
 8001dc4:	f7ff fd3e 	bl	8001844 <HAL_UART_Init>
  aerobrakes_control_init();
 8001dc8:	f7ff fe44 	bl	8001a54 <aerobrakes_control_init>
  aerobrake_helloworld();
 8001dcc:	f7ff fea4 	bl	8001b18 <aerobrake_helloworld>
  HAL_Delay(2000);
 8001dd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001dd4:	f7ff f826 	bl	8000e24 <HAL_Delay>
  command_aerobrake_controller(200, 100);
 8001dd8:	2164      	movs	r1, #100	; 0x64
 8001dda:	20c8      	movs	r0, #200	; 0xc8
 8001ddc:	f7ff feb6 	bl	8001b4c <command_aerobrake_controller>
  HAL_Delay(2000);
 8001de0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001de4:	f7ff f81e 	bl	8000e24 <HAL_Delay>
  command_aerobrake_controller(1500, 100);
 8001de8:	2164      	movs	r1, #100	; 0x64
 8001dea:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001dee:	f7ff fead 	bl	8001b4c <command_aerobrake_controller>
  HAL_Delay(2000);
 8001df2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001df6:	f7ff f815 	bl	8000e24 <HAL_Delay>
  command_aerobrake_controller(238, 131);
 8001dfa:	2183      	movs	r1, #131	; 0x83
 8001dfc:	20ee      	movs	r0, #238	; 0xee
 8001dfe:	f7ff fea5 	bl	8001b4c <command_aerobrake_controller>
 8001e02:	e7fe      	b.n	8001e02 <main+0xf6>
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	200000b0 	.word	0x200000b0
 8001e10:	10210000 	.word	0x10210000
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40011000 	.word	0x40011000

08001e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e1e:	2007      	movs	r0, #7
 8001e20:	f7ff f814 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	4611      	mov	r1, r2
 8001e28:	f06f 000b 	mvn.w	r0, #11
 8001e2c:	f7ff f820 	bl	8000e70 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001e30:	2200      	movs	r2, #0
 8001e32:	4611      	mov	r1, r2
 8001e34:	f06f 000a 	mvn.w	r0, #10
 8001e38:	f7ff f81a 	bl	8000e70 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	4611      	mov	r1, r2
 8001e40:	f06f 0009 	mvn.w	r0, #9
 8001e44:	f7ff f814 	bl	8000e70 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	f06f 0004 	mvn.w	r0, #4
 8001e50:	f7ff f80e 	bl	8000e70 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	4611      	mov	r1, r2
 8001e58:	f06f 0003 	mvn.w	r0, #3
 8001e5c:	f7ff f808 	bl	8000e70 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	4611      	mov	r1, r2
 8001e64:	f06f 0001 	mvn.w	r0, #1
 8001e68:	f7ff f802 	bl	8000e70 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4611      	mov	r1, r2
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e78:	f7fe bffa 	b.w	8000e70 <HAL_NVIC_SetPriority>

08001e7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001e7e:	6802      	ldr	r2, [r0, #0]
 8001e80:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <HAL_UART_MspInit+0x48>)
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d11a      	bne.n	8001ebc <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8c:	480f      	ldr	r0, [pc, #60]	; (8001ecc <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e90:	f042 0210 	orr.w	r2, r2, #16
 8001e94:	645a      	str	r2, [r3, #68]	; 0x44
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ea0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ea4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eb4:	2307      	movs	r3, #7
 8001eb6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb8:	f7ff f836 	bl	8000f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ebc:	b007      	add	sp, #28
 8001ebe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ec2:	bf00      	nop
 8001ec4:	40011000 	.word	0x40011000
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020000 	.word	0x40020000

08001ed0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001ed0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed2:	f7fe ff95 	bl	8000e00 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001eda:	f7ff b820 	b.w	8000f1e <HAL_SYSTICK_IRQHandler>
	...

08001ee0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ee0:	490f      	ldr	r1, [pc, #60]	; (8001f20 <SystemInit+0x40>)
 8001ee2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001ee6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <SystemInit+0x44>)
 8001ef0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ef2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001ef4:	f042 0201 	orr.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001efa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001f02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f06:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001f08:	4a07      	ldr	r2, [pc, #28]	; (8001f28 <SystemInit+0x48>)
 8001f0a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f12:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001f14:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001f1a:	608b      	str	r3, [r1, #8]
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	40023800 	.word	0x40023800
 8001f28:	24003010 	.word	0x24003010

08001f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f32:	e003      	b.n	8001f3c <LoopCopyDataInit>

08001f34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f3a:	3104      	adds	r1, #4

08001f3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f3c:	480b      	ldr	r0, [pc, #44]	; (8001f6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f44:	d3f6      	bcc.n	8001f34 <CopyDataInit>
  ldr  r2, =_sbss
 8001f46:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f48:	e002      	b.n	8001f50 <LoopFillZerobss>

08001f4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f4c:	f842 3b04 	str.w	r3, [r2], #4

08001f50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f54:	d3f9      	bcc.n	8001f4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f56:	f7ff ffc3 	bl	8001ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f5a:	f000 f811 	bl	8001f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f5e:	f7ff fed5 	bl	8001d0c <main>
  bx  lr    
 8001f62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f64:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001f68:	080028c0 	.word	0x080028c0
  ldr  r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f70:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001f74:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001f78:	200000f4 	.word	0x200000f4

08001f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f7c:	e7fe      	b.n	8001f7c <ADC_IRQHandler>
	...

08001f80 <__libc_init_array>:
 8001f80:	b570      	push	{r4, r5, r6, lr}
 8001f82:	4e0d      	ldr	r6, [pc, #52]	; (8001fb8 <__libc_init_array+0x38>)
 8001f84:	4c0d      	ldr	r4, [pc, #52]	; (8001fbc <__libc_init_array+0x3c>)
 8001f86:	1ba4      	subs	r4, r4, r6
 8001f88:	10a4      	asrs	r4, r4, #2
 8001f8a:	2500      	movs	r5, #0
 8001f8c:	42a5      	cmp	r5, r4
 8001f8e:	d109      	bne.n	8001fa4 <__libc_init_array+0x24>
 8001f90:	4e0b      	ldr	r6, [pc, #44]	; (8001fc0 <__libc_init_array+0x40>)
 8001f92:	4c0c      	ldr	r4, [pc, #48]	; (8001fc4 <__libc_init_array+0x44>)
 8001f94:	f000 fc44 	bl	8002820 <_init>
 8001f98:	1ba4      	subs	r4, r4, r6
 8001f9a:	10a4      	asrs	r4, r4, #2
 8001f9c:	2500      	movs	r5, #0
 8001f9e:	42a5      	cmp	r5, r4
 8001fa0:	d105      	bne.n	8001fae <__libc_init_array+0x2e>
 8001fa2:	bd70      	pop	{r4, r5, r6, pc}
 8001fa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fa8:	4798      	blx	r3
 8001faa:	3501      	adds	r5, #1
 8001fac:	e7ee      	b.n	8001f8c <__libc_init_array+0xc>
 8001fae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fb2:	4798      	blx	r3
 8001fb4:	3501      	adds	r5, #1
 8001fb6:	e7f2      	b.n	8001f9e <__libc_init_array+0x1e>
 8001fb8:	080028b8 	.word	0x080028b8
 8001fbc:	080028b8 	.word	0x080028b8
 8001fc0:	080028b8 	.word	0x080028b8
 8001fc4:	080028bc 	.word	0x080028bc

08001fc8 <siprintf>:
 8001fc8:	b40e      	push	{r1, r2, r3}
 8001fca:	b500      	push	{lr}
 8001fcc:	b09c      	sub	sp, #112	; 0x70
 8001fce:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001fd2:	ab1d      	add	r3, sp, #116	; 0x74
 8001fd4:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001fd8:	9002      	str	r0, [sp, #8]
 8001fda:	9006      	str	r0, [sp, #24]
 8001fdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001fe0:	480a      	ldr	r0, [pc, #40]	; (800200c <siprintf+0x44>)
 8001fe2:	9104      	str	r1, [sp, #16]
 8001fe4:	9107      	str	r1, [sp, #28]
 8001fe6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8001fee:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001ff2:	6800      	ldr	r0, [r0, #0]
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	a902      	add	r1, sp, #8
 8001ff8:	f000 f866 	bl	80020c8 <_svfiprintf_r>
 8001ffc:	9b02      	ldr	r3, [sp, #8]
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	b01c      	add	sp, #112	; 0x70
 8002004:	f85d eb04 	ldr.w	lr, [sp], #4
 8002008:	b003      	add	sp, #12
 800200a:	4770      	bx	lr
 800200c:	2000000c 	.word	0x2000000c

08002010 <__ssputs_r>:
 8002010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002014:	688e      	ldr	r6, [r1, #8]
 8002016:	429e      	cmp	r6, r3
 8002018:	4682      	mov	sl, r0
 800201a:	460c      	mov	r4, r1
 800201c:	4691      	mov	r9, r2
 800201e:	4698      	mov	r8, r3
 8002020:	d835      	bhi.n	800208e <__ssputs_r+0x7e>
 8002022:	898a      	ldrh	r2, [r1, #12]
 8002024:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002028:	d031      	beq.n	800208e <__ssputs_r+0x7e>
 800202a:	6825      	ldr	r5, [r4, #0]
 800202c:	6909      	ldr	r1, [r1, #16]
 800202e:	1a6f      	subs	r7, r5, r1
 8002030:	6965      	ldr	r5, [r4, #20]
 8002032:	2302      	movs	r3, #2
 8002034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002038:	fb95 f5f3 	sdiv	r5, r5, r3
 800203c:	f108 0301 	add.w	r3, r8, #1
 8002040:	443b      	add	r3, r7
 8002042:	429d      	cmp	r5, r3
 8002044:	bf38      	it	cc
 8002046:	461d      	movcc	r5, r3
 8002048:	0553      	lsls	r3, r2, #21
 800204a:	d531      	bpl.n	80020b0 <__ssputs_r+0xa0>
 800204c:	4629      	mov	r1, r5
 800204e:	f000 fb39 	bl	80026c4 <_malloc_r>
 8002052:	4606      	mov	r6, r0
 8002054:	b950      	cbnz	r0, 800206c <__ssputs_r+0x5c>
 8002056:	230c      	movs	r3, #12
 8002058:	f8ca 3000 	str.w	r3, [sl]
 800205c:	89a3      	ldrh	r3, [r4, #12]
 800205e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002062:	81a3      	strh	r3, [r4, #12]
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800206c:	463a      	mov	r2, r7
 800206e:	6921      	ldr	r1, [r4, #16]
 8002070:	f000 fab4 	bl	80025dc <memcpy>
 8002074:	89a3      	ldrh	r3, [r4, #12]
 8002076:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800207a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800207e:	81a3      	strh	r3, [r4, #12]
 8002080:	6126      	str	r6, [r4, #16]
 8002082:	6165      	str	r5, [r4, #20]
 8002084:	443e      	add	r6, r7
 8002086:	1bed      	subs	r5, r5, r7
 8002088:	6026      	str	r6, [r4, #0]
 800208a:	60a5      	str	r5, [r4, #8]
 800208c:	4646      	mov	r6, r8
 800208e:	4546      	cmp	r6, r8
 8002090:	bf28      	it	cs
 8002092:	4646      	movcs	r6, r8
 8002094:	4632      	mov	r2, r6
 8002096:	4649      	mov	r1, r9
 8002098:	6820      	ldr	r0, [r4, #0]
 800209a:	f000 faaa 	bl	80025f2 <memmove>
 800209e:	68a3      	ldr	r3, [r4, #8]
 80020a0:	1b9b      	subs	r3, r3, r6
 80020a2:	60a3      	str	r3, [r4, #8]
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	441e      	add	r6, r3
 80020a8:	6026      	str	r6, [r4, #0]
 80020aa:	2000      	movs	r0, #0
 80020ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020b0:	462a      	mov	r2, r5
 80020b2:	f000 fb65 	bl	8002780 <_realloc_r>
 80020b6:	4606      	mov	r6, r0
 80020b8:	2800      	cmp	r0, #0
 80020ba:	d1e1      	bne.n	8002080 <__ssputs_r+0x70>
 80020bc:	6921      	ldr	r1, [r4, #16]
 80020be:	4650      	mov	r0, sl
 80020c0:	f000 fab2 	bl	8002628 <_free_r>
 80020c4:	e7c7      	b.n	8002056 <__ssputs_r+0x46>
	...

080020c8 <_svfiprintf_r>:
 80020c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020cc:	b09d      	sub	sp, #116	; 0x74
 80020ce:	4680      	mov	r8, r0
 80020d0:	9303      	str	r3, [sp, #12]
 80020d2:	898b      	ldrh	r3, [r1, #12]
 80020d4:	061c      	lsls	r4, r3, #24
 80020d6:	460d      	mov	r5, r1
 80020d8:	4616      	mov	r6, r2
 80020da:	d50f      	bpl.n	80020fc <_svfiprintf_r+0x34>
 80020dc:	690b      	ldr	r3, [r1, #16]
 80020de:	b96b      	cbnz	r3, 80020fc <_svfiprintf_r+0x34>
 80020e0:	2140      	movs	r1, #64	; 0x40
 80020e2:	f000 faef 	bl	80026c4 <_malloc_r>
 80020e6:	6028      	str	r0, [r5, #0]
 80020e8:	6128      	str	r0, [r5, #16]
 80020ea:	b928      	cbnz	r0, 80020f8 <_svfiprintf_r+0x30>
 80020ec:	230c      	movs	r3, #12
 80020ee:	f8c8 3000 	str.w	r3, [r8]
 80020f2:	f04f 30ff 	mov.w	r0, #4294967295
 80020f6:	e0c5      	b.n	8002284 <_svfiprintf_r+0x1bc>
 80020f8:	2340      	movs	r3, #64	; 0x40
 80020fa:	616b      	str	r3, [r5, #20]
 80020fc:	2300      	movs	r3, #0
 80020fe:	9309      	str	r3, [sp, #36]	; 0x24
 8002100:	2320      	movs	r3, #32
 8002102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002106:	2330      	movs	r3, #48	; 0x30
 8002108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800210c:	f04f 0b01 	mov.w	fp, #1
 8002110:	4637      	mov	r7, r6
 8002112:	463c      	mov	r4, r7
 8002114:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d13c      	bne.n	8002196 <_svfiprintf_r+0xce>
 800211c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002120:	d00b      	beq.n	800213a <_svfiprintf_r+0x72>
 8002122:	4653      	mov	r3, sl
 8002124:	4632      	mov	r2, r6
 8002126:	4629      	mov	r1, r5
 8002128:	4640      	mov	r0, r8
 800212a:	f7ff ff71 	bl	8002010 <__ssputs_r>
 800212e:	3001      	adds	r0, #1
 8002130:	f000 80a3 	beq.w	800227a <_svfiprintf_r+0x1b2>
 8002134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002136:	4453      	add	r3, sl
 8002138:	9309      	str	r3, [sp, #36]	; 0x24
 800213a:	783b      	ldrb	r3, [r7, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 809c 	beq.w	800227a <_svfiprintf_r+0x1b2>
 8002142:	2300      	movs	r3, #0
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	9304      	str	r3, [sp, #16]
 800214a:	9307      	str	r3, [sp, #28]
 800214c:	9205      	str	r2, [sp, #20]
 800214e:	9306      	str	r3, [sp, #24]
 8002150:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002154:	931a      	str	r3, [sp, #104]	; 0x68
 8002156:	2205      	movs	r2, #5
 8002158:	7821      	ldrb	r1, [r4, #0]
 800215a:	4850      	ldr	r0, [pc, #320]	; (800229c <_svfiprintf_r+0x1d4>)
 800215c:	f7fe f848 	bl	80001f0 <memchr>
 8002160:	1c67      	adds	r7, r4, #1
 8002162:	9b04      	ldr	r3, [sp, #16]
 8002164:	b9d8      	cbnz	r0, 800219e <_svfiprintf_r+0xd6>
 8002166:	06d9      	lsls	r1, r3, #27
 8002168:	bf44      	itt	mi
 800216a:	2220      	movmi	r2, #32
 800216c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002170:	071a      	lsls	r2, r3, #28
 8002172:	bf44      	itt	mi
 8002174:	222b      	movmi	r2, #43	; 0x2b
 8002176:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800217a:	7822      	ldrb	r2, [r4, #0]
 800217c:	2a2a      	cmp	r2, #42	; 0x2a
 800217e:	d016      	beq.n	80021ae <_svfiprintf_r+0xe6>
 8002180:	9a07      	ldr	r2, [sp, #28]
 8002182:	2100      	movs	r1, #0
 8002184:	200a      	movs	r0, #10
 8002186:	4627      	mov	r7, r4
 8002188:	3401      	adds	r4, #1
 800218a:	783b      	ldrb	r3, [r7, #0]
 800218c:	3b30      	subs	r3, #48	; 0x30
 800218e:	2b09      	cmp	r3, #9
 8002190:	d951      	bls.n	8002236 <_svfiprintf_r+0x16e>
 8002192:	b1c9      	cbz	r1, 80021c8 <_svfiprintf_r+0x100>
 8002194:	e011      	b.n	80021ba <_svfiprintf_r+0xf2>
 8002196:	2b25      	cmp	r3, #37	; 0x25
 8002198:	d0c0      	beq.n	800211c <_svfiprintf_r+0x54>
 800219a:	4627      	mov	r7, r4
 800219c:	e7b9      	b.n	8002112 <_svfiprintf_r+0x4a>
 800219e:	4a3f      	ldr	r2, [pc, #252]	; (800229c <_svfiprintf_r+0x1d4>)
 80021a0:	1a80      	subs	r0, r0, r2
 80021a2:	fa0b f000 	lsl.w	r0, fp, r0
 80021a6:	4318      	orrs	r0, r3
 80021a8:	9004      	str	r0, [sp, #16]
 80021aa:	463c      	mov	r4, r7
 80021ac:	e7d3      	b.n	8002156 <_svfiprintf_r+0x8e>
 80021ae:	9a03      	ldr	r2, [sp, #12]
 80021b0:	1d11      	adds	r1, r2, #4
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	9103      	str	r1, [sp, #12]
 80021b6:	2a00      	cmp	r2, #0
 80021b8:	db01      	blt.n	80021be <_svfiprintf_r+0xf6>
 80021ba:	9207      	str	r2, [sp, #28]
 80021bc:	e004      	b.n	80021c8 <_svfiprintf_r+0x100>
 80021be:	4252      	negs	r2, r2
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	9207      	str	r2, [sp, #28]
 80021c6:	9304      	str	r3, [sp, #16]
 80021c8:	783b      	ldrb	r3, [r7, #0]
 80021ca:	2b2e      	cmp	r3, #46	; 0x2e
 80021cc:	d10e      	bne.n	80021ec <_svfiprintf_r+0x124>
 80021ce:	787b      	ldrb	r3, [r7, #1]
 80021d0:	2b2a      	cmp	r3, #42	; 0x2a
 80021d2:	f107 0101 	add.w	r1, r7, #1
 80021d6:	d132      	bne.n	800223e <_svfiprintf_r+0x176>
 80021d8:	9b03      	ldr	r3, [sp, #12]
 80021da:	1d1a      	adds	r2, r3, #4
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	9203      	str	r2, [sp, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bfb8      	it	lt
 80021e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80021e8:	3702      	adds	r7, #2
 80021ea:	9305      	str	r3, [sp, #20]
 80021ec:	4c2c      	ldr	r4, [pc, #176]	; (80022a0 <_svfiprintf_r+0x1d8>)
 80021ee:	7839      	ldrb	r1, [r7, #0]
 80021f0:	2203      	movs	r2, #3
 80021f2:	4620      	mov	r0, r4
 80021f4:	f7fd fffc 	bl	80001f0 <memchr>
 80021f8:	b138      	cbz	r0, 800220a <_svfiprintf_r+0x142>
 80021fa:	2340      	movs	r3, #64	; 0x40
 80021fc:	1b00      	subs	r0, r0, r4
 80021fe:	fa03 f000 	lsl.w	r0, r3, r0
 8002202:	9b04      	ldr	r3, [sp, #16]
 8002204:	4303      	orrs	r3, r0
 8002206:	9304      	str	r3, [sp, #16]
 8002208:	3701      	adds	r7, #1
 800220a:	7839      	ldrb	r1, [r7, #0]
 800220c:	4825      	ldr	r0, [pc, #148]	; (80022a4 <_svfiprintf_r+0x1dc>)
 800220e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002212:	2206      	movs	r2, #6
 8002214:	1c7e      	adds	r6, r7, #1
 8002216:	f7fd ffeb 	bl	80001f0 <memchr>
 800221a:	2800      	cmp	r0, #0
 800221c:	d035      	beq.n	800228a <_svfiprintf_r+0x1c2>
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <_svfiprintf_r+0x1e0>)
 8002220:	b9fb      	cbnz	r3, 8002262 <_svfiprintf_r+0x19a>
 8002222:	9b03      	ldr	r3, [sp, #12]
 8002224:	3307      	adds	r3, #7
 8002226:	f023 0307 	bic.w	r3, r3, #7
 800222a:	3308      	adds	r3, #8
 800222c:	9303      	str	r3, [sp, #12]
 800222e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002230:	444b      	add	r3, r9
 8002232:	9309      	str	r3, [sp, #36]	; 0x24
 8002234:	e76c      	b.n	8002110 <_svfiprintf_r+0x48>
 8002236:	fb00 3202 	mla	r2, r0, r2, r3
 800223a:	2101      	movs	r1, #1
 800223c:	e7a3      	b.n	8002186 <_svfiprintf_r+0xbe>
 800223e:	2300      	movs	r3, #0
 8002240:	9305      	str	r3, [sp, #20]
 8002242:	4618      	mov	r0, r3
 8002244:	240a      	movs	r4, #10
 8002246:	460f      	mov	r7, r1
 8002248:	3101      	adds	r1, #1
 800224a:	783a      	ldrb	r2, [r7, #0]
 800224c:	3a30      	subs	r2, #48	; 0x30
 800224e:	2a09      	cmp	r2, #9
 8002250:	d903      	bls.n	800225a <_svfiprintf_r+0x192>
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0ca      	beq.n	80021ec <_svfiprintf_r+0x124>
 8002256:	9005      	str	r0, [sp, #20]
 8002258:	e7c8      	b.n	80021ec <_svfiprintf_r+0x124>
 800225a:	fb04 2000 	mla	r0, r4, r0, r2
 800225e:	2301      	movs	r3, #1
 8002260:	e7f1      	b.n	8002246 <_svfiprintf_r+0x17e>
 8002262:	ab03      	add	r3, sp, #12
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	462a      	mov	r2, r5
 8002268:	4b10      	ldr	r3, [pc, #64]	; (80022ac <_svfiprintf_r+0x1e4>)
 800226a:	a904      	add	r1, sp, #16
 800226c:	4640      	mov	r0, r8
 800226e:	f3af 8000 	nop.w
 8002272:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002276:	4681      	mov	r9, r0
 8002278:	d1d9      	bne.n	800222e <_svfiprintf_r+0x166>
 800227a:	89ab      	ldrh	r3, [r5, #12]
 800227c:	065b      	lsls	r3, r3, #25
 800227e:	f53f af38 	bmi.w	80020f2 <_svfiprintf_r+0x2a>
 8002282:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002284:	b01d      	add	sp, #116	; 0x74
 8002286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800228a:	ab03      	add	r3, sp, #12
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	462a      	mov	r2, r5
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <_svfiprintf_r+0x1e4>)
 8002292:	a904      	add	r1, sp, #16
 8002294:	4640      	mov	r0, r8
 8002296:	f000 f881 	bl	800239c <_printf_i>
 800229a:	e7ea      	b.n	8002272 <_svfiprintf_r+0x1aa>
 800229c:	0800287d 	.word	0x0800287d
 80022a0:	08002883 	.word	0x08002883
 80022a4:	08002887 	.word	0x08002887
 80022a8:	00000000 	.word	0x00000000
 80022ac:	08002011 	.word	0x08002011

080022b0 <_printf_common>:
 80022b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022b4:	4691      	mov	r9, r2
 80022b6:	461f      	mov	r7, r3
 80022b8:	688a      	ldr	r2, [r1, #8]
 80022ba:	690b      	ldr	r3, [r1, #16]
 80022bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80022c0:	4293      	cmp	r3, r2
 80022c2:	bfb8      	it	lt
 80022c4:	4613      	movlt	r3, r2
 80022c6:	f8c9 3000 	str.w	r3, [r9]
 80022ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80022ce:	4606      	mov	r6, r0
 80022d0:	460c      	mov	r4, r1
 80022d2:	b112      	cbz	r2, 80022da <_printf_common+0x2a>
 80022d4:	3301      	adds	r3, #1
 80022d6:	f8c9 3000 	str.w	r3, [r9]
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	0699      	lsls	r1, r3, #26
 80022de:	bf42      	ittt	mi
 80022e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80022e4:	3302      	addmi	r3, #2
 80022e6:	f8c9 3000 	strmi.w	r3, [r9]
 80022ea:	6825      	ldr	r5, [r4, #0]
 80022ec:	f015 0506 	ands.w	r5, r5, #6
 80022f0:	d107      	bne.n	8002302 <_printf_common+0x52>
 80022f2:	f104 0a19 	add.w	sl, r4, #25
 80022f6:	68e3      	ldr	r3, [r4, #12]
 80022f8:	f8d9 2000 	ldr.w	r2, [r9]
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	429d      	cmp	r5, r3
 8002300:	db29      	blt.n	8002356 <_printf_common+0xa6>
 8002302:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002306:	6822      	ldr	r2, [r4, #0]
 8002308:	3300      	adds	r3, #0
 800230a:	bf18      	it	ne
 800230c:	2301      	movne	r3, #1
 800230e:	0692      	lsls	r2, r2, #26
 8002310:	d42e      	bmi.n	8002370 <_printf_common+0xc0>
 8002312:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002316:	4639      	mov	r1, r7
 8002318:	4630      	mov	r0, r6
 800231a:	47c0      	blx	r8
 800231c:	3001      	adds	r0, #1
 800231e:	d021      	beq.n	8002364 <_printf_common+0xb4>
 8002320:	6823      	ldr	r3, [r4, #0]
 8002322:	68e5      	ldr	r5, [r4, #12]
 8002324:	f8d9 2000 	ldr.w	r2, [r9]
 8002328:	f003 0306 	and.w	r3, r3, #6
 800232c:	2b04      	cmp	r3, #4
 800232e:	bf08      	it	eq
 8002330:	1aad      	subeq	r5, r5, r2
 8002332:	68a3      	ldr	r3, [r4, #8]
 8002334:	6922      	ldr	r2, [r4, #16]
 8002336:	bf0c      	ite	eq
 8002338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800233c:	2500      	movne	r5, #0
 800233e:	4293      	cmp	r3, r2
 8002340:	bfc4      	itt	gt
 8002342:	1a9b      	subgt	r3, r3, r2
 8002344:	18ed      	addgt	r5, r5, r3
 8002346:	f04f 0900 	mov.w	r9, #0
 800234a:	341a      	adds	r4, #26
 800234c:	454d      	cmp	r5, r9
 800234e:	d11b      	bne.n	8002388 <_printf_common+0xd8>
 8002350:	2000      	movs	r0, #0
 8002352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002356:	2301      	movs	r3, #1
 8002358:	4652      	mov	r2, sl
 800235a:	4639      	mov	r1, r7
 800235c:	4630      	mov	r0, r6
 800235e:	47c0      	blx	r8
 8002360:	3001      	adds	r0, #1
 8002362:	d103      	bne.n	800236c <_printf_common+0xbc>
 8002364:	f04f 30ff 	mov.w	r0, #4294967295
 8002368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800236c:	3501      	adds	r5, #1
 800236e:	e7c2      	b.n	80022f6 <_printf_common+0x46>
 8002370:	18e1      	adds	r1, r4, r3
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	2030      	movs	r0, #48	; 0x30
 8002376:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800237a:	4422      	add	r2, r4
 800237c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002380:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002384:	3302      	adds	r3, #2
 8002386:	e7c4      	b.n	8002312 <_printf_common+0x62>
 8002388:	2301      	movs	r3, #1
 800238a:	4622      	mov	r2, r4
 800238c:	4639      	mov	r1, r7
 800238e:	4630      	mov	r0, r6
 8002390:	47c0      	blx	r8
 8002392:	3001      	adds	r0, #1
 8002394:	d0e6      	beq.n	8002364 <_printf_common+0xb4>
 8002396:	f109 0901 	add.w	r9, r9, #1
 800239a:	e7d7      	b.n	800234c <_printf_common+0x9c>

0800239c <_printf_i>:
 800239c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023a0:	4617      	mov	r7, r2
 80023a2:	7e0a      	ldrb	r2, [r1, #24]
 80023a4:	b085      	sub	sp, #20
 80023a6:	2a6e      	cmp	r2, #110	; 0x6e
 80023a8:	4698      	mov	r8, r3
 80023aa:	4606      	mov	r6, r0
 80023ac:	460c      	mov	r4, r1
 80023ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80023b0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80023b4:	f000 80bc 	beq.w	8002530 <_printf_i+0x194>
 80023b8:	d81a      	bhi.n	80023f0 <_printf_i+0x54>
 80023ba:	2a63      	cmp	r2, #99	; 0x63
 80023bc:	d02e      	beq.n	800241c <_printf_i+0x80>
 80023be:	d80a      	bhi.n	80023d6 <_printf_i+0x3a>
 80023c0:	2a00      	cmp	r2, #0
 80023c2:	f000 80c8 	beq.w	8002556 <_printf_i+0x1ba>
 80023c6:	2a58      	cmp	r2, #88	; 0x58
 80023c8:	f000 808a 	beq.w	80024e0 <_printf_i+0x144>
 80023cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023d0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80023d4:	e02a      	b.n	800242c <_printf_i+0x90>
 80023d6:	2a64      	cmp	r2, #100	; 0x64
 80023d8:	d001      	beq.n	80023de <_printf_i+0x42>
 80023da:	2a69      	cmp	r2, #105	; 0x69
 80023dc:	d1f6      	bne.n	80023cc <_printf_i+0x30>
 80023de:	6821      	ldr	r1, [r4, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80023e6:	d023      	beq.n	8002430 <_printf_i+0x94>
 80023e8:	1d11      	adds	r1, r2, #4
 80023ea:	6019      	str	r1, [r3, #0]
 80023ec:	6813      	ldr	r3, [r2, #0]
 80023ee:	e027      	b.n	8002440 <_printf_i+0xa4>
 80023f0:	2a73      	cmp	r2, #115	; 0x73
 80023f2:	f000 80b4 	beq.w	800255e <_printf_i+0x1c2>
 80023f6:	d808      	bhi.n	800240a <_printf_i+0x6e>
 80023f8:	2a6f      	cmp	r2, #111	; 0x6f
 80023fa:	d02a      	beq.n	8002452 <_printf_i+0xb6>
 80023fc:	2a70      	cmp	r2, #112	; 0x70
 80023fe:	d1e5      	bne.n	80023cc <_printf_i+0x30>
 8002400:	680a      	ldr	r2, [r1, #0]
 8002402:	f042 0220 	orr.w	r2, r2, #32
 8002406:	600a      	str	r2, [r1, #0]
 8002408:	e003      	b.n	8002412 <_printf_i+0x76>
 800240a:	2a75      	cmp	r2, #117	; 0x75
 800240c:	d021      	beq.n	8002452 <_printf_i+0xb6>
 800240e:	2a78      	cmp	r2, #120	; 0x78
 8002410:	d1dc      	bne.n	80023cc <_printf_i+0x30>
 8002412:	2278      	movs	r2, #120	; 0x78
 8002414:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002418:	496e      	ldr	r1, [pc, #440]	; (80025d4 <_printf_i+0x238>)
 800241a:	e064      	b.n	80024e6 <_printf_i+0x14a>
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002422:	1d11      	adds	r1, r2, #4
 8002424:	6019      	str	r1, [r3, #0]
 8002426:	6813      	ldr	r3, [r2, #0]
 8002428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800242c:	2301      	movs	r3, #1
 800242e:	e0a3      	b.n	8002578 <_printf_i+0x1dc>
 8002430:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002434:	f102 0104 	add.w	r1, r2, #4
 8002438:	6019      	str	r1, [r3, #0]
 800243a:	d0d7      	beq.n	80023ec <_printf_i+0x50>
 800243c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002440:	2b00      	cmp	r3, #0
 8002442:	da03      	bge.n	800244c <_printf_i+0xb0>
 8002444:	222d      	movs	r2, #45	; 0x2d
 8002446:	425b      	negs	r3, r3
 8002448:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800244c:	4962      	ldr	r1, [pc, #392]	; (80025d8 <_printf_i+0x23c>)
 800244e:	220a      	movs	r2, #10
 8002450:	e017      	b.n	8002482 <_printf_i+0xe6>
 8002452:	6820      	ldr	r0, [r4, #0]
 8002454:	6819      	ldr	r1, [r3, #0]
 8002456:	f010 0f80 	tst.w	r0, #128	; 0x80
 800245a:	d003      	beq.n	8002464 <_printf_i+0xc8>
 800245c:	1d08      	adds	r0, r1, #4
 800245e:	6018      	str	r0, [r3, #0]
 8002460:	680b      	ldr	r3, [r1, #0]
 8002462:	e006      	b.n	8002472 <_printf_i+0xd6>
 8002464:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002468:	f101 0004 	add.w	r0, r1, #4
 800246c:	6018      	str	r0, [r3, #0]
 800246e:	d0f7      	beq.n	8002460 <_printf_i+0xc4>
 8002470:	880b      	ldrh	r3, [r1, #0]
 8002472:	4959      	ldr	r1, [pc, #356]	; (80025d8 <_printf_i+0x23c>)
 8002474:	2a6f      	cmp	r2, #111	; 0x6f
 8002476:	bf14      	ite	ne
 8002478:	220a      	movne	r2, #10
 800247a:	2208      	moveq	r2, #8
 800247c:	2000      	movs	r0, #0
 800247e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002482:	6865      	ldr	r5, [r4, #4]
 8002484:	60a5      	str	r5, [r4, #8]
 8002486:	2d00      	cmp	r5, #0
 8002488:	f2c0 809c 	blt.w	80025c4 <_printf_i+0x228>
 800248c:	6820      	ldr	r0, [r4, #0]
 800248e:	f020 0004 	bic.w	r0, r0, #4
 8002492:	6020      	str	r0, [r4, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d13f      	bne.n	8002518 <_printf_i+0x17c>
 8002498:	2d00      	cmp	r5, #0
 800249a:	f040 8095 	bne.w	80025c8 <_printf_i+0x22c>
 800249e:	4675      	mov	r5, lr
 80024a0:	2a08      	cmp	r2, #8
 80024a2:	d10b      	bne.n	80024bc <_printf_i+0x120>
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	07da      	lsls	r2, r3, #31
 80024a8:	d508      	bpl.n	80024bc <_printf_i+0x120>
 80024aa:	6923      	ldr	r3, [r4, #16]
 80024ac:	6862      	ldr	r2, [r4, #4]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	bfde      	ittt	le
 80024b2:	2330      	movle	r3, #48	; 0x30
 80024b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80024b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80024bc:	ebae 0305 	sub.w	r3, lr, r5
 80024c0:	6123      	str	r3, [r4, #16]
 80024c2:	f8cd 8000 	str.w	r8, [sp]
 80024c6:	463b      	mov	r3, r7
 80024c8:	aa03      	add	r2, sp, #12
 80024ca:	4621      	mov	r1, r4
 80024cc:	4630      	mov	r0, r6
 80024ce:	f7ff feef 	bl	80022b0 <_printf_common>
 80024d2:	3001      	adds	r0, #1
 80024d4:	d155      	bne.n	8002582 <_printf_i+0x1e6>
 80024d6:	f04f 30ff 	mov.w	r0, #4294967295
 80024da:	b005      	add	sp, #20
 80024dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80024e0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80024e4:	493c      	ldr	r1, [pc, #240]	; (80025d8 <_printf_i+0x23c>)
 80024e6:	6822      	ldr	r2, [r4, #0]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	f012 0f80 	tst.w	r2, #128	; 0x80
 80024ee:	f100 0504 	add.w	r5, r0, #4
 80024f2:	601d      	str	r5, [r3, #0]
 80024f4:	d001      	beq.n	80024fa <_printf_i+0x15e>
 80024f6:	6803      	ldr	r3, [r0, #0]
 80024f8:	e002      	b.n	8002500 <_printf_i+0x164>
 80024fa:	0655      	lsls	r5, r2, #25
 80024fc:	d5fb      	bpl.n	80024f6 <_printf_i+0x15a>
 80024fe:	8803      	ldrh	r3, [r0, #0]
 8002500:	07d0      	lsls	r0, r2, #31
 8002502:	bf44      	itt	mi
 8002504:	f042 0220 	orrmi.w	r2, r2, #32
 8002508:	6022      	strmi	r2, [r4, #0]
 800250a:	b91b      	cbnz	r3, 8002514 <_printf_i+0x178>
 800250c:	6822      	ldr	r2, [r4, #0]
 800250e:	f022 0220 	bic.w	r2, r2, #32
 8002512:	6022      	str	r2, [r4, #0]
 8002514:	2210      	movs	r2, #16
 8002516:	e7b1      	b.n	800247c <_printf_i+0xe0>
 8002518:	4675      	mov	r5, lr
 800251a:	fbb3 f0f2 	udiv	r0, r3, r2
 800251e:	fb02 3310 	mls	r3, r2, r0, r3
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002528:	4603      	mov	r3, r0
 800252a:	2800      	cmp	r0, #0
 800252c:	d1f5      	bne.n	800251a <_printf_i+0x17e>
 800252e:	e7b7      	b.n	80024a0 <_printf_i+0x104>
 8002530:	6808      	ldr	r0, [r1, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	6949      	ldr	r1, [r1, #20]
 8002536:	f010 0f80 	tst.w	r0, #128	; 0x80
 800253a:	d004      	beq.n	8002546 <_printf_i+0x1aa>
 800253c:	1d10      	adds	r0, r2, #4
 800253e:	6018      	str	r0, [r3, #0]
 8002540:	6813      	ldr	r3, [r2, #0]
 8002542:	6019      	str	r1, [r3, #0]
 8002544:	e007      	b.n	8002556 <_printf_i+0x1ba>
 8002546:	f010 0f40 	tst.w	r0, #64	; 0x40
 800254a:	f102 0004 	add.w	r0, r2, #4
 800254e:	6018      	str	r0, [r3, #0]
 8002550:	6813      	ldr	r3, [r2, #0]
 8002552:	d0f6      	beq.n	8002542 <_printf_i+0x1a6>
 8002554:	8019      	strh	r1, [r3, #0]
 8002556:	2300      	movs	r3, #0
 8002558:	6123      	str	r3, [r4, #16]
 800255a:	4675      	mov	r5, lr
 800255c:	e7b1      	b.n	80024c2 <_printf_i+0x126>
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	1d11      	adds	r1, r2, #4
 8002562:	6019      	str	r1, [r3, #0]
 8002564:	6815      	ldr	r5, [r2, #0]
 8002566:	6862      	ldr	r2, [r4, #4]
 8002568:	2100      	movs	r1, #0
 800256a:	4628      	mov	r0, r5
 800256c:	f7fd fe40 	bl	80001f0 <memchr>
 8002570:	b108      	cbz	r0, 8002576 <_printf_i+0x1da>
 8002572:	1b40      	subs	r0, r0, r5
 8002574:	6060      	str	r0, [r4, #4]
 8002576:	6863      	ldr	r3, [r4, #4]
 8002578:	6123      	str	r3, [r4, #16]
 800257a:	2300      	movs	r3, #0
 800257c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002580:	e79f      	b.n	80024c2 <_printf_i+0x126>
 8002582:	6923      	ldr	r3, [r4, #16]
 8002584:	462a      	mov	r2, r5
 8002586:	4639      	mov	r1, r7
 8002588:	4630      	mov	r0, r6
 800258a:	47c0      	blx	r8
 800258c:	3001      	adds	r0, #1
 800258e:	d0a2      	beq.n	80024d6 <_printf_i+0x13a>
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	079b      	lsls	r3, r3, #30
 8002594:	d507      	bpl.n	80025a6 <_printf_i+0x20a>
 8002596:	2500      	movs	r5, #0
 8002598:	f104 0919 	add.w	r9, r4, #25
 800259c:	68e3      	ldr	r3, [r4, #12]
 800259e:	9a03      	ldr	r2, [sp, #12]
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	429d      	cmp	r5, r3
 80025a4:	db05      	blt.n	80025b2 <_printf_i+0x216>
 80025a6:	68e0      	ldr	r0, [r4, #12]
 80025a8:	9b03      	ldr	r3, [sp, #12]
 80025aa:	4298      	cmp	r0, r3
 80025ac:	bfb8      	it	lt
 80025ae:	4618      	movlt	r0, r3
 80025b0:	e793      	b.n	80024da <_printf_i+0x13e>
 80025b2:	2301      	movs	r3, #1
 80025b4:	464a      	mov	r2, r9
 80025b6:	4639      	mov	r1, r7
 80025b8:	4630      	mov	r0, r6
 80025ba:	47c0      	blx	r8
 80025bc:	3001      	adds	r0, #1
 80025be:	d08a      	beq.n	80024d6 <_printf_i+0x13a>
 80025c0:	3501      	adds	r5, #1
 80025c2:	e7eb      	b.n	800259c <_printf_i+0x200>
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1a7      	bne.n	8002518 <_printf_i+0x17c>
 80025c8:	780b      	ldrb	r3, [r1, #0]
 80025ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025d2:	e765      	b.n	80024a0 <_printf_i+0x104>
 80025d4:	0800289f 	.word	0x0800289f
 80025d8:	0800288e 	.word	0x0800288e

080025dc <memcpy>:
 80025dc:	b510      	push	{r4, lr}
 80025de:	1e43      	subs	r3, r0, #1
 80025e0:	440a      	add	r2, r1
 80025e2:	4291      	cmp	r1, r2
 80025e4:	d100      	bne.n	80025e8 <memcpy+0xc>
 80025e6:	bd10      	pop	{r4, pc}
 80025e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025f0:	e7f7      	b.n	80025e2 <memcpy+0x6>

080025f2 <memmove>:
 80025f2:	4288      	cmp	r0, r1
 80025f4:	b510      	push	{r4, lr}
 80025f6:	eb01 0302 	add.w	r3, r1, r2
 80025fa:	d803      	bhi.n	8002604 <memmove+0x12>
 80025fc:	1e42      	subs	r2, r0, #1
 80025fe:	4299      	cmp	r1, r3
 8002600:	d10c      	bne.n	800261c <memmove+0x2a>
 8002602:	bd10      	pop	{r4, pc}
 8002604:	4298      	cmp	r0, r3
 8002606:	d2f9      	bcs.n	80025fc <memmove+0xa>
 8002608:	1881      	adds	r1, r0, r2
 800260a:	1ad2      	subs	r2, r2, r3
 800260c:	42d3      	cmn	r3, r2
 800260e:	d100      	bne.n	8002612 <memmove+0x20>
 8002610:	bd10      	pop	{r4, pc}
 8002612:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002616:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800261a:	e7f7      	b.n	800260c <memmove+0x1a>
 800261c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002620:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002624:	e7eb      	b.n	80025fe <memmove+0xc>
	...

08002628 <_free_r>:
 8002628:	b538      	push	{r3, r4, r5, lr}
 800262a:	4605      	mov	r5, r0
 800262c:	2900      	cmp	r1, #0
 800262e:	d045      	beq.n	80026bc <_free_r+0x94>
 8002630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002634:	1f0c      	subs	r4, r1, #4
 8002636:	2b00      	cmp	r3, #0
 8002638:	bfb8      	it	lt
 800263a:	18e4      	addlt	r4, r4, r3
 800263c:	f000 f8d6 	bl	80027ec <__malloc_lock>
 8002640:	4a1f      	ldr	r2, [pc, #124]	; (80026c0 <_free_r+0x98>)
 8002642:	6813      	ldr	r3, [r2, #0]
 8002644:	4610      	mov	r0, r2
 8002646:	b933      	cbnz	r3, 8002656 <_free_r+0x2e>
 8002648:	6063      	str	r3, [r4, #4]
 800264a:	6014      	str	r4, [r2, #0]
 800264c:	4628      	mov	r0, r5
 800264e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002652:	f000 b8cc 	b.w	80027ee <__malloc_unlock>
 8002656:	42a3      	cmp	r3, r4
 8002658:	d90c      	bls.n	8002674 <_free_r+0x4c>
 800265a:	6821      	ldr	r1, [r4, #0]
 800265c:	1862      	adds	r2, r4, r1
 800265e:	4293      	cmp	r3, r2
 8002660:	bf04      	itt	eq
 8002662:	681a      	ldreq	r2, [r3, #0]
 8002664:	685b      	ldreq	r3, [r3, #4]
 8002666:	6063      	str	r3, [r4, #4]
 8002668:	bf04      	itt	eq
 800266a:	1852      	addeq	r2, r2, r1
 800266c:	6022      	streq	r2, [r4, #0]
 800266e:	6004      	str	r4, [r0, #0]
 8002670:	e7ec      	b.n	800264c <_free_r+0x24>
 8002672:	4613      	mov	r3, r2
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	b10a      	cbz	r2, 800267c <_free_r+0x54>
 8002678:	42a2      	cmp	r2, r4
 800267a:	d9fa      	bls.n	8002672 <_free_r+0x4a>
 800267c:	6819      	ldr	r1, [r3, #0]
 800267e:	1858      	adds	r0, r3, r1
 8002680:	42a0      	cmp	r0, r4
 8002682:	d10b      	bne.n	800269c <_free_r+0x74>
 8002684:	6820      	ldr	r0, [r4, #0]
 8002686:	4401      	add	r1, r0
 8002688:	1858      	adds	r0, r3, r1
 800268a:	4282      	cmp	r2, r0
 800268c:	6019      	str	r1, [r3, #0]
 800268e:	d1dd      	bne.n	800264c <_free_r+0x24>
 8002690:	6810      	ldr	r0, [r2, #0]
 8002692:	6852      	ldr	r2, [r2, #4]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	4401      	add	r1, r0
 8002698:	6019      	str	r1, [r3, #0]
 800269a:	e7d7      	b.n	800264c <_free_r+0x24>
 800269c:	d902      	bls.n	80026a4 <_free_r+0x7c>
 800269e:	230c      	movs	r3, #12
 80026a0:	602b      	str	r3, [r5, #0]
 80026a2:	e7d3      	b.n	800264c <_free_r+0x24>
 80026a4:	6820      	ldr	r0, [r4, #0]
 80026a6:	1821      	adds	r1, r4, r0
 80026a8:	428a      	cmp	r2, r1
 80026aa:	bf04      	itt	eq
 80026ac:	6811      	ldreq	r1, [r2, #0]
 80026ae:	6852      	ldreq	r2, [r2, #4]
 80026b0:	6062      	str	r2, [r4, #4]
 80026b2:	bf04      	itt	eq
 80026b4:	1809      	addeq	r1, r1, r0
 80026b6:	6021      	streq	r1, [r4, #0]
 80026b8:	605c      	str	r4, [r3, #4]
 80026ba:	e7c7      	b.n	800264c <_free_r+0x24>
 80026bc:	bd38      	pop	{r3, r4, r5, pc}
 80026be:	bf00      	nop
 80026c0:	20000094 	.word	0x20000094

080026c4 <_malloc_r>:
 80026c4:	b570      	push	{r4, r5, r6, lr}
 80026c6:	1ccd      	adds	r5, r1, #3
 80026c8:	f025 0503 	bic.w	r5, r5, #3
 80026cc:	3508      	adds	r5, #8
 80026ce:	2d0c      	cmp	r5, #12
 80026d0:	bf38      	it	cc
 80026d2:	250c      	movcc	r5, #12
 80026d4:	2d00      	cmp	r5, #0
 80026d6:	4606      	mov	r6, r0
 80026d8:	db01      	blt.n	80026de <_malloc_r+0x1a>
 80026da:	42a9      	cmp	r1, r5
 80026dc:	d903      	bls.n	80026e6 <_malloc_r+0x22>
 80026de:	230c      	movs	r3, #12
 80026e0:	6033      	str	r3, [r6, #0]
 80026e2:	2000      	movs	r0, #0
 80026e4:	bd70      	pop	{r4, r5, r6, pc}
 80026e6:	f000 f881 	bl	80027ec <__malloc_lock>
 80026ea:	4a23      	ldr	r2, [pc, #140]	; (8002778 <_malloc_r+0xb4>)
 80026ec:	6814      	ldr	r4, [r2, #0]
 80026ee:	4621      	mov	r1, r4
 80026f0:	b991      	cbnz	r1, 8002718 <_malloc_r+0x54>
 80026f2:	4c22      	ldr	r4, [pc, #136]	; (800277c <_malloc_r+0xb8>)
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	b91b      	cbnz	r3, 8002700 <_malloc_r+0x3c>
 80026f8:	4630      	mov	r0, r6
 80026fa:	f000 f867 	bl	80027cc <_sbrk_r>
 80026fe:	6020      	str	r0, [r4, #0]
 8002700:	4629      	mov	r1, r5
 8002702:	4630      	mov	r0, r6
 8002704:	f000 f862 	bl	80027cc <_sbrk_r>
 8002708:	1c43      	adds	r3, r0, #1
 800270a:	d126      	bne.n	800275a <_malloc_r+0x96>
 800270c:	230c      	movs	r3, #12
 800270e:	6033      	str	r3, [r6, #0]
 8002710:	4630      	mov	r0, r6
 8002712:	f000 f86c 	bl	80027ee <__malloc_unlock>
 8002716:	e7e4      	b.n	80026e2 <_malloc_r+0x1e>
 8002718:	680b      	ldr	r3, [r1, #0]
 800271a:	1b5b      	subs	r3, r3, r5
 800271c:	d41a      	bmi.n	8002754 <_malloc_r+0x90>
 800271e:	2b0b      	cmp	r3, #11
 8002720:	d90f      	bls.n	8002742 <_malloc_r+0x7e>
 8002722:	600b      	str	r3, [r1, #0]
 8002724:	50cd      	str	r5, [r1, r3]
 8002726:	18cc      	adds	r4, r1, r3
 8002728:	4630      	mov	r0, r6
 800272a:	f000 f860 	bl	80027ee <__malloc_unlock>
 800272e:	f104 000b 	add.w	r0, r4, #11
 8002732:	1d23      	adds	r3, r4, #4
 8002734:	f020 0007 	bic.w	r0, r0, #7
 8002738:	1ac3      	subs	r3, r0, r3
 800273a:	d01b      	beq.n	8002774 <_malloc_r+0xb0>
 800273c:	425a      	negs	r2, r3
 800273e:	50e2      	str	r2, [r4, r3]
 8002740:	bd70      	pop	{r4, r5, r6, pc}
 8002742:	428c      	cmp	r4, r1
 8002744:	bf0d      	iteet	eq
 8002746:	6863      	ldreq	r3, [r4, #4]
 8002748:	684b      	ldrne	r3, [r1, #4]
 800274a:	6063      	strne	r3, [r4, #4]
 800274c:	6013      	streq	r3, [r2, #0]
 800274e:	bf18      	it	ne
 8002750:	460c      	movne	r4, r1
 8002752:	e7e9      	b.n	8002728 <_malloc_r+0x64>
 8002754:	460c      	mov	r4, r1
 8002756:	6849      	ldr	r1, [r1, #4]
 8002758:	e7ca      	b.n	80026f0 <_malloc_r+0x2c>
 800275a:	1cc4      	adds	r4, r0, #3
 800275c:	f024 0403 	bic.w	r4, r4, #3
 8002760:	42a0      	cmp	r0, r4
 8002762:	d005      	beq.n	8002770 <_malloc_r+0xac>
 8002764:	1a21      	subs	r1, r4, r0
 8002766:	4630      	mov	r0, r6
 8002768:	f000 f830 	bl	80027cc <_sbrk_r>
 800276c:	3001      	adds	r0, #1
 800276e:	d0cd      	beq.n	800270c <_malloc_r+0x48>
 8002770:	6025      	str	r5, [r4, #0]
 8002772:	e7d9      	b.n	8002728 <_malloc_r+0x64>
 8002774:	bd70      	pop	{r4, r5, r6, pc}
 8002776:	bf00      	nop
 8002778:	20000094 	.word	0x20000094
 800277c:	20000098 	.word	0x20000098

08002780 <_realloc_r>:
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	4607      	mov	r7, r0
 8002784:	4614      	mov	r4, r2
 8002786:	460e      	mov	r6, r1
 8002788:	b921      	cbnz	r1, 8002794 <_realloc_r+0x14>
 800278a:	4611      	mov	r1, r2
 800278c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002790:	f7ff bf98 	b.w	80026c4 <_malloc_r>
 8002794:	b922      	cbnz	r2, 80027a0 <_realloc_r+0x20>
 8002796:	f7ff ff47 	bl	8002628 <_free_r>
 800279a:	4625      	mov	r5, r4
 800279c:	4628      	mov	r0, r5
 800279e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027a0:	f000 f826 	bl	80027f0 <_malloc_usable_size_r>
 80027a4:	4284      	cmp	r4, r0
 80027a6:	d90f      	bls.n	80027c8 <_realloc_r+0x48>
 80027a8:	4621      	mov	r1, r4
 80027aa:	4638      	mov	r0, r7
 80027ac:	f7ff ff8a 	bl	80026c4 <_malloc_r>
 80027b0:	4605      	mov	r5, r0
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d0f2      	beq.n	800279c <_realloc_r+0x1c>
 80027b6:	4631      	mov	r1, r6
 80027b8:	4622      	mov	r2, r4
 80027ba:	f7ff ff0f 	bl	80025dc <memcpy>
 80027be:	4631      	mov	r1, r6
 80027c0:	4638      	mov	r0, r7
 80027c2:	f7ff ff31 	bl	8002628 <_free_r>
 80027c6:	e7e9      	b.n	800279c <_realloc_r+0x1c>
 80027c8:	4635      	mov	r5, r6
 80027ca:	e7e7      	b.n	800279c <_realloc_r+0x1c>

080027cc <_sbrk_r>:
 80027cc:	b538      	push	{r3, r4, r5, lr}
 80027ce:	4c06      	ldr	r4, [pc, #24]	; (80027e8 <_sbrk_r+0x1c>)
 80027d0:	2300      	movs	r3, #0
 80027d2:	4605      	mov	r5, r0
 80027d4:	4608      	mov	r0, r1
 80027d6:	6023      	str	r3, [r4, #0]
 80027d8:	f000 f814 	bl	8002804 <_sbrk>
 80027dc:	1c43      	adds	r3, r0, #1
 80027de:	d102      	bne.n	80027e6 <_sbrk_r+0x1a>
 80027e0:	6823      	ldr	r3, [r4, #0]
 80027e2:	b103      	cbz	r3, 80027e6 <_sbrk_r+0x1a>
 80027e4:	602b      	str	r3, [r5, #0]
 80027e6:	bd38      	pop	{r3, r4, r5, pc}
 80027e8:	200000f0 	.word	0x200000f0

080027ec <__malloc_lock>:
 80027ec:	4770      	bx	lr

080027ee <__malloc_unlock>:
 80027ee:	4770      	bx	lr

080027f0 <_malloc_usable_size_r>:
 80027f0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80027f4:	2800      	cmp	r0, #0
 80027f6:	f1a0 0004 	sub.w	r0, r0, #4
 80027fa:	bfbc      	itt	lt
 80027fc:	580b      	ldrlt	r3, [r1, r0]
 80027fe:	18c0      	addlt	r0, r0, r3
 8002800:	4770      	bx	lr
	...

08002804 <_sbrk>:
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <_sbrk+0x14>)
 8002806:	6819      	ldr	r1, [r3, #0]
 8002808:	4602      	mov	r2, r0
 800280a:	b909      	cbnz	r1, 8002810 <_sbrk+0xc>
 800280c:	4903      	ldr	r1, [pc, #12]	; (800281c <_sbrk+0x18>)
 800280e:	6019      	str	r1, [r3, #0]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	4402      	add	r2, r0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	4770      	bx	lr
 8002818:	2000009c 	.word	0x2000009c
 800281c:	200000f4 	.word	0x200000f4

08002820 <_init>:
 8002820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002822:	bf00      	nop
 8002824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002826:	bc08      	pop	{r3}
 8002828:	469e      	mov	lr, r3
 800282a:	4770      	bx	lr

0800282c <_fini>:
 800282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282e:	bf00      	nop
 8002830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002832:	bc08      	pop	{r3}
 8002834:	469e      	mov	lr, r3
 8002836:	4770      	bx	lr
