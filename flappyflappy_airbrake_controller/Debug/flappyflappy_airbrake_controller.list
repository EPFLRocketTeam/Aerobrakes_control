
flappyflappy_airbrake_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08004340  08004340  00014340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080045b8  080045b8  000145b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080045c0  080045c0  000145c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080045c4  080045c4  000145c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000017e4  20000000  080045c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000007c  200017e4  08005dac  000217e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001860  08005dac  00021860  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000217e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000bcfc  00000000  00000000  00021814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ae0  00000000  00000000  0002d510  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002162  00000000  00000000  0002eff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000518  00000000  00000000  00031158  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000648  00000000  00000000  00031670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003028  00000000  00000000  00031cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000248e  00000000  00000000  00034ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003716e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000158c  00000000  00000000  000371ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200017e4 	.word	0x200017e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004328 	.word	0x08004328

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200017e8 	.word	0x200017e8
 80001dc:	08004328 	.word	0x08004328

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295
 8000c64:	f000 b97a 	b.w	8000f5c <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f806 	bl	8000c80 <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__udivmoddi4>:
 8000c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c84:	468c      	mov	ip, r1
 8000c86:	460d      	mov	r5, r1
 8000c88:	4604      	mov	r4, r0
 8000c8a:	9e08      	ldr	r6, [sp, #32]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d151      	bne.n	8000d34 <__udivmoddi4+0xb4>
 8000c90:	428a      	cmp	r2, r1
 8000c92:	4617      	mov	r7, r2
 8000c94:	d96d      	bls.n	8000d72 <__udivmoddi4+0xf2>
 8000c96:	fab2 fe82 	clz	lr, r2
 8000c9a:	f1be 0f00 	cmp.w	lr, #0
 8000c9e:	d00b      	beq.n	8000cb8 <__udivmoddi4+0x38>
 8000ca0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ca4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000ca8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cac:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cb0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cb4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cb8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cbc:	0c25      	lsrs	r5, r4, #16
 8000cbe:	fbbc f8fa 	udiv	r8, ip, sl
 8000cc2:	fa1f f987 	uxth.w	r9, r7
 8000cc6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cca:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cce:	fb08 f309 	mul.w	r3, r8, r9
 8000cd2:	42ab      	cmp	r3, r5
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x6c>
 8000cd6:	19ed      	adds	r5, r5, r7
 8000cd8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000cdc:	f080 8123 	bcs.w	8000f26 <__udivmoddi4+0x2a6>
 8000ce0:	42ab      	cmp	r3, r5
 8000ce2:	f240 8120 	bls.w	8000f26 <__udivmoddi4+0x2a6>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	443d      	add	r5, r7
 8000cec:	1aed      	subs	r5, r5, r3
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000cf4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000cf8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cfc:	fb00 f909 	mul.w	r9, r0, r9
 8000d00:	45a1      	cmp	r9, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x98>
 8000d04:	19e4      	adds	r4, r4, r7
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	f080 810a 	bcs.w	8000f22 <__udivmoddi4+0x2a2>
 8000d0e:	45a1      	cmp	r9, r4
 8000d10:	f240 8107 	bls.w	8000f22 <__udivmoddi4+0x2a2>
 8000d14:	3802      	subs	r0, #2
 8000d16:	443c      	add	r4, r7
 8000d18:	eba4 0409 	sub.w	r4, r4, r9
 8000d1c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d20:	2100      	movs	r1, #0
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d061      	beq.n	8000dea <__udivmoddi4+0x16a>
 8000d26:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	6034      	str	r4, [r6, #0]
 8000d2e:	6073      	str	r3, [r6, #4]
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	428b      	cmp	r3, r1
 8000d36:	d907      	bls.n	8000d48 <__udivmoddi4+0xc8>
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	d054      	beq.n	8000de6 <__udivmoddi4+0x166>
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d42:	4608      	mov	r0, r1
 8000d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d48:	fab3 f183 	clz	r1, r3
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	f040 808e 	bne.w	8000e6e <__udivmoddi4+0x1ee>
 8000d52:	42ab      	cmp	r3, r5
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xdc>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80fa 	bhi.w	8000f50 <__udivmoddi4+0x2d0>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	46ac      	mov	ip, r5
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d03f      	beq.n	8000dea <__udivmoddi4+0x16a>
 8000d6a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	b912      	cbnz	r2, 8000d7a <__udivmoddi4+0xfa>
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d7a:	fab7 fe87 	clz	lr, r7
 8000d7e:	f1be 0f00 	cmp.w	lr, #0
 8000d82:	d134      	bne.n	8000dee <__udivmoddi4+0x16e>
 8000d84:	1beb      	subs	r3, r5, r7
 8000d86:	0c3a      	lsrs	r2, r7, #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d92:	0c25      	lsrs	r5, r4, #16
 8000d94:	fb02 3318 	mls	r3, r2, r8, r3
 8000d98:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9c:	fb0c f308 	mul.w	r3, ip, r8
 8000da0:	42ab      	cmp	r3, r5
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x134>
 8000da4:	19ed      	adds	r5, r5, r7
 8000da6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x132>
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	f200 80d1 	bhi.w	8000f54 <__udivmoddi4+0x2d4>
 8000db2:	4680      	mov	r8, r0
 8000db4:	1aed      	subs	r5, r5, r3
 8000db6:	b2a3      	uxth	r3, r4
 8000db8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dbc:	fb02 5510 	mls	r5, r2, r0, r5
 8000dc0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000dc4:	fb0c fc00 	mul.w	ip, ip, r0
 8000dc8:	45a4      	cmp	ip, r4
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x15c>
 8000dcc:	19e4      	adds	r4, r4, r7
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x15a>
 8000dd4:	45a4      	cmp	ip, r4
 8000dd6:	f200 80b8 	bhi.w	8000f4a <__udivmoddi4+0x2ca>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	eba4 040c 	sub.w	r4, r4, ip
 8000de0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de4:	e79d      	b.n	8000d22 <__udivmoddi4+0xa2>
 8000de6:	4631      	mov	r1, r6
 8000de8:	4630      	mov	r0, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	f1ce 0420 	rsb	r4, lr, #32
 8000df2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000df6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dfa:	fa20 f804 	lsr.w	r8, r0, r4
 8000dfe:	0c3a      	lsrs	r2, r7, #16
 8000e00:	fa25 f404 	lsr.w	r4, r5, r4
 8000e04:	ea48 0803 	orr.w	r8, r8, r3
 8000e08:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e0c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e10:	fb02 4411 	mls	r4, r2, r1, r4
 8000e14:	fa1f fc87 	uxth.w	ip, r7
 8000e18:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e1c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e20:	42ab      	cmp	r3, r5
 8000e22:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x1bc>
 8000e28:	19ed      	adds	r5, r5, r7
 8000e2a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e2e:	f080 808a 	bcs.w	8000f46 <__udivmoddi4+0x2c6>
 8000e32:	42ab      	cmp	r3, r5
 8000e34:	f240 8087 	bls.w	8000f46 <__udivmoddi4+0x2c6>
 8000e38:	3902      	subs	r1, #2
 8000e3a:	443d      	add	r5, r7
 8000e3c:	1aeb      	subs	r3, r5, r3
 8000e3e:	fa1f f588 	uxth.w	r5, r8
 8000e42:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e46:	fb02 3310 	mls	r3, r2, r0, r3
 8000e4a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e4e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e52:	42ab      	cmp	r3, r5
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x1e6>
 8000e56:	19ed      	adds	r5, r5, r7
 8000e58:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5c:	d26f      	bcs.n	8000f3e <__udivmoddi4+0x2be>
 8000e5e:	42ab      	cmp	r3, r5
 8000e60:	d96d      	bls.n	8000f3e <__udivmoddi4+0x2be>
 8000e62:	3802      	subs	r0, #2
 8000e64:	443d      	add	r5, r7
 8000e66:	1aeb      	subs	r3, r5, r3
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	e78f      	b.n	8000d8e <__udivmoddi4+0x10e>
 8000e6e:	f1c1 0720 	rsb	r7, r1, #32
 8000e72:	fa22 f807 	lsr.w	r8, r2, r7
 8000e76:	408b      	lsls	r3, r1
 8000e78:	fa05 f401 	lsl.w	r4, r5, r1
 8000e7c:	ea48 0303 	orr.w	r3, r8, r3
 8000e80:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e84:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e8e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e92:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e96:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e9a:	fa1f f883 	uxth.w	r8, r3
 8000e9e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ea2:	fb09 f408 	mul.w	r4, r9, r8
 8000ea6:	42ac      	cmp	r4, r5
 8000ea8:	fa02 f201 	lsl.w	r2, r2, r1
 8000eac:	fa00 fa01 	lsl.w	sl, r0, r1
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x244>
 8000eb2:	18ed      	adds	r5, r5, r3
 8000eb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb8:	d243      	bcs.n	8000f42 <__udivmoddi4+0x2c2>
 8000eba:	42ac      	cmp	r4, r5
 8000ebc:	d941      	bls.n	8000f42 <__udivmoddi4+0x2c2>
 8000ebe:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec2:	441d      	add	r5, r3
 8000ec4:	1b2d      	subs	r5, r5, r4
 8000ec6:	fa1f fe8e 	uxth.w	lr, lr
 8000eca:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ece:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ed2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ed6:	fb00 f808 	mul.w	r8, r0, r8
 8000eda:	45a0      	cmp	r8, r4
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x26e>
 8000ede:	18e4      	adds	r4, r4, r3
 8000ee0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ee4:	d229      	bcs.n	8000f3a <__udivmoddi4+0x2ba>
 8000ee6:	45a0      	cmp	r8, r4
 8000ee8:	d927      	bls.n	8000f3a <__udivmoddi4+0x2ba>
 8000eea:	3802      	subs	r0, #2
 8000eec:	441c      	add	r4, r3
 8000eee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef2:	eba4 0408 	sub.w	r4, r4, r8
 8000ef6:	fba0 8902 	umull	r8, r9, r0, r2
 8000efa:	454c      	cmp	r4, r9
 8000efc:	46c6      	mov	lr, r8
 8000efe:	464d      	mov	r5, r9
 8000f00:	d315      	bcc.n	8000f2e <__udivmoddi4+0x2ae>
 8000f02:	d012      	beq.n	8000f2a <__udivmoddi4+0x2aa>
 8000f04:	b156      	cbz	r6, 8000f1c <__udivmoddi4+0x29c>
 8000f06:	ebba 030e 	subs.w	r3, sl, lr
 8000f0a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f12:	40cb      	lsrs	r3, r1
 8000f14:	431f      	orrs	r7, r3
 8000f16:	40cc      	lsrs	r4, r1
 8000f18:	6037      	str	r7, [r6, #0]
 8000f1a:	6074      	str	r4, [r6, #4]
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	4618      	mov	r0, r3
 8000f24:	e6f8      	b.n	8000d18 <__udivmoddi4+0x98>
 8000f26:	4690      	mov	r8, r2
 8000f28:	e6e0      	b.n	8000cec <__udivmoddi4+0x6c>
 8000f2a:	45c2      	cmp	sl, r8
 8000f2c:	d2ea      	bcs.n	8000f04 <__udivmoddi4+0x284>
 8000f2e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f32:	eb69 0503 	sbc.w	r5, r9, r3
 8000f36:	3801      	subs	r0, #1
 8000f38:	e7e4      	b.n	8000f04 <__udivmoddi4+0x284>
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	e7d7      	b.n	8000eee <__udivmoddi4+0x26e>
 8000f3e:	4640      	mov	r0, r8
 8000f40:	e791      	b.n	8000e66 <__udivmoddi4+0x1e6>
 8000f42:	4681      	mov	r9, r0
 8000f44:	e7be      	b.n	8000ec4 <__udivmoddi4+0x244>
 8000f46:	4601      	mov	r1, r0
 8000f48:	e778      	b.n	8000e3c <__udivmoddi4+0x1bc>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	443c      	add	r4, r7
 8000f4e:	e745      	b.n	8000ddc <__udivmoddi4+0x15c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e708      	b.n	8000d66 <__udivmoddi4+0xe6>
 8000f54:	f1a8 0802 	sub.w	r8, r8, #2
 8000f58:	443d      	add	r5, r7
 8000f5a:	e72b      	b.n	8000db4 <__udivmoddi4+0x134>

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f62:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <HAL_InitTick+0x3c>)
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_InitTick+0x40>)
{
 8000f66:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	7818      	ldrb	r0, [r3, #0]
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f72:	6810      	ldr	r0, [r2, #0]
 8000f74:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f78:	f000 f89c 	bl	80010b4 <HAL_SYSTICK_Config>
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	b958      	cbnz	r0, 8000f98 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f80:	2d0f      	cmp	r5, #15
 8000f82:	d809      	bhi.n	8000f98 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	4602      	mov	r2, r0
 8000f86:	4629      	mov	r1, r5
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f000 f85e 	bl	800104c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <HAL_InitTick+0x44>)
 8000f92:	4620      	mov	r0, r4
 8000f94:	601d      	str	r5, [r3, #0]
 8000f96:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f98:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f9a:	bd38      	pop	{r3, r4, r5, pc}
 8000f9c:	20001778 	.word	0x20001778
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000004 	.word	0x20000004

08000fa8 <HAL_Init>:
{
 8000fa8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x30>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fb2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fc2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f82f 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff ffc8 	bl	8000f60 <HAL_InitTick>
  HAL_MspInit();
 8000fd0:	f001 fb08 	bl	80025e4 <HAL_MspInit>
}
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	bd08      	pop	{r3, pc}
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_IncTick+0x10>)
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <HAL_IncTick+0x14>)
 8000fe0:	6811      	ldr	r1, [r2, #0]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	440b      	add	r3, r1
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	2000180c 	.word	0x2000180c
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ff4:	4b01      	ldr	r3, [pc, #4]	; (8000ffc <HAL_GetTick+0x8>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2000180c 	.word	0x2000180c

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b538      	push	{r3, r4, r5, lr}
 8001002:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff fff6 	bl	8000ff4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001008:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	bf1c      	itt	ne
 800100c:	4b05      	ldrne	r3, [pc, #20]	; (8001024 <HAL_Delay+0x24>)
 800100e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001010:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001012:	bf18      	it	ne
 8001014:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001016:	f7ff ffed 	bl	8000ff4 <HAL_GetTick>
 800101a:	1b40      	subs	r0, r0, r5
 800101c:	4284      	cmp	r4, r0
 800101e:	d8fa      	bhi.n	8001016 <HAL_Delay+0x16>
  {
  }
}
 8001020:	bd38      	pop	{r3, r4, r5, pc}
 8001022:	bf00      	nop
 8001024:	20000000 	.word	0x20000000

08001028 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4a07      	ldr	r2, [pc, #28]	; (8001048 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800102a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001030:	041b      	lsls	r3, r3, #16
 8001032:	0c1b      	lsrs	r3, r3, #16
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001038:	0200      	lsls	r0, r0, #8
 800103a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001042:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001044:	60d3      	str	r3, [r2, #12]
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104e:	b530      	push	{r4, r5, lr}
 8001050:	68dc      	ldr	r4, [r3, #12]
 8001052:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001056:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	2b04      	cmp	r3, #4
 800105e:	bf28      	it	cs
 8001060:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 0501 	mov.w	r5, #1
 8001068:	fa05 f303 	lsl.w	r3, r5, r3
 800106c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001070:	bf8c      	ite	hi
 8001072:	3c03      	subhi	r4, #3
 8001074:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001076:	4019      	ands	r1, r3
 8001078:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107a:	fa05 f404 	lsl.w	r4, r5, r4
 800107e:	3c01      	subs	r4, #1
 8001080:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001082:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	ea42 0201 	orr.w	r2, r2, r1
 8001088:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	bfaf      	iteee	ge
 800108e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	f000 000f 	andlt.w	r0, r0, #15
 8001096:	4b06      	ldrlt	r3, [pc, #24]	; (80010b0 <HAL_NVIC_SetPriority+0x64>)
 8001098:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	bfa5      	ittet	ge
 800109c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80010a0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80010a8:	bd30      	pop	{r4, r5, pc}
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00
 80010b0:	e000ed14 	.word	0xe000ed14

080010b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	3801      	subs	r0, #1
 80010b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010ba:	d20a      	bcs.n	80010d2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	21f0      	movs	r1, #240	; 0xf0
 80010c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010e2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80010e4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010e6:	bf0c      	ite	eq
 80010e8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010ec:	f022 0204 	bicne.w	r2, r2, #4
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	4770      	bx	lr
 80010f4:	e000e010 	.word	0xe000e010

080010f8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010f8:	4770      	bx	lr

080010fa <HAL_SYSTICK_IRQHandler>:
{
 80010fa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80010fc:	f7ff fffc 	bl	80010f8 <HAL_SYSTICK_Callback>
 8001100:	bd08      	pop	{r3, pc}
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001108:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110c:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80012ac <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001110:	4a64      	ldr	r2, [pc, #400]	; (80012a4 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001112:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8001114:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001118:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800111c:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001120:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8001124:	42b7      	cmp	r7, r6
 8001126:	f040 80ad 	bne.w	8001284 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800112a:	684c      	ldr	r4, [r1, #4]
 800112c:	f024 0a10 	bic.w	sl, r4, #16
 8001130:	f1ba 0f02 	cmp.w	sl, #2
 8001134:	d116      	bne.n	8001164 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8001136:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800113a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800113e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001142:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001146:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800114a:	f04f 0e0f 	mov.w	lr, #15
 800114e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001152:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001156:	690d      	ldr	r5, [r1, #16]
 8001158:	fa05 f50b 	lsl.w	r5, r5, fp
 800115c:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001160:	f8cc 5020 	str.w	r5, [ip, #32]
 8001164:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001168:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800116a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800116e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001172:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001174:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001178:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800117c:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001180:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001184:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001188:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118c:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 800118e:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001192:	d815      	bhi.n	80011c0 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8001194:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001198:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 800119c:	68cd      	ldr	r5, [r1, #12]
 800119e:	fa05 fa0c 	lsl.w	sl, r5, ip
 80011a2:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80011a6:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80011aa:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ae:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011b2:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80011b6:	fa0e fe03 	lsl.w	lr, lr, r3
 80011ba:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80011be:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80011c0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c2:	9d00      	ldr	r5, [sp, #0]
 80011c4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c6:	688f      	ldr	r7, [r1, #8]
 80011c8:	fa07 f70c 	lsl.w	r7, r7, ip
 80011cc:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80011ce:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d0:	00e5      	lsls	r5, r4, #3
 80011d2:	d557      	bpl.n	8001284 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d4:	f04f 0b00 	mov.w	fp, #0
 80011d8:	f8cd b00c 	str.w	fp, [sp, #12]
 80011dc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e0:	4d31      	ldr	r5, [pc, #196]	; (80012a8 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80011e6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80011ea:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80011ee:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80011f2:	9703      	str	r7, [sp, #12]
 80011f4:	9f03      	ldr	r7, [sp, #12]
 80011f6:	f023 0703 	bic.w	r7, r3, #3
 80011fa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80011fe:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001202:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001206:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800120a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800120e:	f04f 0e0f 	mov.w	lr, #15
 8001212:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001216:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001218:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121c:	d039      	beq.n	8001292 <HAL_GPIO_Init+0x18e>
 800121e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001222:	42a8      	cmp	r0, r5
 8001224:	d037      	beq.n	8001296 <HAL_GPIO_Init+0x192>
 8001226:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800122a:	42a8      	cmp	r0, r5
 800122c:	d035      	beq.n	800129a <HAL_GPIO_Init+0x196>
 800122e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001232:	42a8      	cmp	r0, r5
 8001234:	d033      	beq.n	800129e <HAL_GPIO_Init+0x19a>
 8001236:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800123a:	42a8      	cmp	r0, r5
 800123c:	bf14      	ite	ne
 800123e:	2507      	movne	r5, #7
 8001240:	2504      	moveq	r5, #4
 8001242:	fa05 f50c 	lsl.w	r5, r5, ip
 8001246:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800124a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800124c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800124e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001250:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001254:	bf0c      	ite	eq
 8001256:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001258:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800125a:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800125c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800125e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001262:	bf0c      	ite	eq
 8001264:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001266:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001268:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800126c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001270:	bf0c      	ite	eq
 8001272:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001274:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001276:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001278:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800127a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800127c:	bf54      	ite	pl
 800127e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001280:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001282:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001284:	3301      	adds	r3, #1
 8001286:	2b10      	cmp	r3, #16
 8001288:	f47f af47 	bne.w	800111a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800128c:	b005      	add	sp, #20
 800128e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001292:	465d      	mov	r5, fp
 8001294:	e7d5      	b.n	8001242 <HAL_GPIO_Init+0x13e>
 8001296:	2501      	movs	r5, #1
 8001298:	e7d3      	b.n	8001242 <HAL_GPIO_Init+0x13e>
 800129a:	2502      	movs	r5, #2
 800129c:	e7d1      	b.n	8001242 <HAL_GPIO_Init+0x13e>
 800129e:	2503      	movs	r5, #3
 80012a0:	e7cf      	b.n	8001242 <HAL_GPIO_Init+0x13e>
 80012a2:	bf00      	nop
 80012a4:	40013c00 	.word	0x40013c00
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40023800 	.word	0x40023800

080012b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b0:	b10a      	cbz	r2, 80012b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012b2:	6181      	str	r1, [r0, #24]
 80012b4:	4770      	bx	lr
 80012b6:	0409      	lsls	r1, r1, #16
 80012b8:	e7fb      	b.n	80012b2 <HAL_GPIO_WritePin+0x2>
	...

080012bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c0:	4604      	mov	r4, r0
 80012c2:	b918      	cbnz	r0, 80012cc <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80012c4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80012c6:	b002      	add	sp, #8
 80012c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012cc:	6803      	ldr	r3, [r0, #0]
 80012ce:	07dd      	lsls	r5, r3, #31
 80012d0:	d410      	bmi.n	80012f4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	0798      	lsls	r0, r3, #30
 80012d6:	d458      	bmi.n	800138a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d8:	6823      	ldr	r3, [r4, #0]
 80012da:	071a      	lsls	r2, r3, #28
 80012dc:	f100 809a 	bmi.w	8001414 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e0:	6823      	ldr	r3, [r4, #0]
 80012e2:	075b      	lsls	r3, r3, #29
 80012e4:	f100 80b8 	bmi.w	8001458 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012e8:	69a2      	ldr	r2, [r4, #24]
 80012ea:	2a00      	cmp	r2, #0
 80012ec:	f040 8119 	bne.w	8001522 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80012f0:	2000      	movs	r0, #0
 80012f2:	e7e8      	b.n	80012c6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f4:	4ba6      	ldr	r3, [pc, #664]	; (8001590 <HAL_RCC_OscConfig+0x2d4>)
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	f002 020c 	and.w	r2, r2, #12
 80012fc:	2a04      	cmp	r2, #4
 80012fe:	d007      	beq.n	8001310 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001306:	2a08      	cmp	r2, #8
 8001308:	d10a      	bne.n	8001320 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	0259      	lsls	r1, r3, #9
 800130e:	d507      	bpl.n	8001320 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	4b9f      	ldr	r3, [pc, #636]	; (8001590 <HAL_RCC_OscConfig+0x2d4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	039a      	lsls	r2, r3, #14
 8001316:	d5dc      	bpl.n	80012d2 <HAL_RCC_OscConfig+0x16>
 8001318:	6863      	ldr	r3, [r4, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1d9      	bne.n	80012d2 <HAL_RCC_OscConfig+0x16>
 800131e:	e7d1      	b.n	80012c4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001320:	6863      	ldr	r3, [r4, #4]
 8001322:	4d9b      	ldr	r5, [pc, #620]	; (8001590 <HAL_RCC_OscConfig+0x2d4>)
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001328:	d111      	bne.n	800134e <HAL_RCC_OscConfig+0x92>
 800132a:	682b      	ldr	r3, [r5, #0]
 800132c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001330:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001332:	f7ff fe5f 	bl	8000ff4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001336:	4d96      	ldr	r5, [pc, #600]	; (8001590 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001338:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133a:	682b      	ldr	r3, [r5, #0]
 800133c:	039b      	lsls	r3, r3, #14
 800133e:	d4c8      	bmi.n	80012d2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001340:	f7ff fe58 	bl	8000ff4 <HAL_GetTick>
 8001344:	1b80      	subs	r0, r0, r6
 8001346:	2864      	cmp	r0, #100	; 0x64
 8001348:	d9f7      	bls.n	800133a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800134a:	2003      	movs	r0, #3
 800134c:	e7bb      	b.n	80012c6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001352:	d104      	bne.n	800135e <HAL_RCC_OscConfig+0xa2>
 8001354:	682b      	ldr	r3, [r5, #0]
 8001356:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135a:	602b      	str	r3, [r5, #0]
 800135c:	e7e5      	b.n	800132a <HAL_RCC_OscConfig+0x6e>
 800135e:	682a      	ldr	r2, [r5, #0]
 8001360:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001364:	602a      	str	r2, [r5, #0]
 8001366:	682a      	ldr	r2, [r5, #0]
 8001368:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800136c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1df      	bne.n	8001332 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001372:	f7ff fe3f 	bl	8000ff4 <HAL_GetTick>
 8001376:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001378:	682b      	ldr	r3, [r5, #0]
 800137a:	039f      	lsls	r7, r3, #14
 800137c:	d5a9      	bpl.n	80012d2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137e:	f7ff fe39 	bl	8000ff4 <HAL_GetTick>
 8001382:	1b80      	subs	r0, r0, r6
 8001384:	2864      	cmp	r0, #100	; 0x64
 8001386:	d9f7      	bls.n	8001378 <HAL_RCC_OscConfig+0xbc>
 8001388:	e7df      	b.n	800134a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138a:	4b81      	ldr	r3, [pc, #516]	; (8001590 <HAL_RCC_OscConfig+0x2d4>)
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	f012 0f0c 	tst.w	r2, #12
 8001392:	d007      	beq.n	80013a4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139a:	2a08      	cmp	r2, #8
 800139c:	d111      	bne.n	80013c2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	025e      	lsls	r6, r3, #9
 80013a2:	d40e      	bmi.n	80013c2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a4:	4b7a      	ldr	r3, [pc, #488]	; (8001590 <HAL_RCC_OscConfig+0x2d4>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	0795      	lsls	r5, r2, #30
 80013aa:	d502      	bpl.n	80013b2 <HAL_RCC_OscConfig+0xf6>
 80013ac:	68e2      	ldr	r2, [r4, #12]
 80013ae:	2a01      	cmp	r2, #1
 80013b0:	d188      	bne.n	80012c4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	6921      	ldr	r1, [r4, #16]
 80013b6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80013ba:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80013be:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c0:	e78a      	b.n	80012d8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013c2:	68e2      	ldr	r2, [r4, #12]
 80013c4:	4b73      	ldr	r3, [pc, #460]	; (8001594 <HAL_RCC_OscConfig+0x2d8>)
 80013c6:	b1b2      	cbz	r2, 80013f6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013cc:	f7ff fe12 	bl	8000ff4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	4d6f      	ldr	r5, [pc, #444]	; (8001590 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80013d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d4:	682b      	ldr	r3, [r5, #0]
 80013d6:	0798      	lsls	r0, r3, #30
 80013d8:	d507      	bpl.n	80013ea <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013da:	682b      	ldr	r3, [r5, #0]
 80013dc:	6922      	ldr	r2, [r4, #16]
 80013de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013e2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013e6:	602b      	str	r3, [r5, #0]
 80013e8:	e776      	b.n	80012d8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fe03 	bl	8000ff4 <HAL_GetTick>
 80013ee:	1b80      	subs	r0, r0, r6
 80013f0:	2802      	cmp	r0, #2
 80013f2:	d9ef      	bls.n	80013d4 <HAL_RCC_OscConfig+0x118>
 80013f4:	e7a9      	b.n	800134a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80013f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013f8:	f7ff fdfc 	bl	8000ff4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fc:	4d64      	ldr	r5, [pc, #400]	; (8001590 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80013fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001400:	682b      	ldr	r3, [r5, #0]
 8001402:	0799      	lsls	r1, r3, #30
 8001404:	f57f af68 	bpl.w	80012d8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001408:	f7ff fdf4 	bl	8000ff4 <HAL_GetTick>
 800140c:	1b80      	subs	r0, r0, r6
 800140e:	2802      	cmp	r0, #2
 8001410:	d9f6      	bls.n	8001400 <HAL_RCC_OscConfig+0x144>
 8001412:	e79a      	b.n	800134a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001414:	6962      	ldr	r2, [r4, #20]
 8001416:	4b60      	ldr	r3, [pc, #384]	; (8001598 <HAL_RCC_OscConfig+0x2dc>)
 8001418:	b17a      	cbz	r2, 800143a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800141e:	f7ff fde9 	bl	8000ff4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001422:	4d5b      	ldr	r5, [pc, #364]	; (8001590 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001424:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001426:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001428:	079f      	lsls	r7, r3, #30
 800142a:	f53f af59 	bmi.w	80012e0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142e:	f7ff fde1 	bl	8000ff4 <HAL_GetTick>
 8001432:	1b80      	subs	r0, r0, r6
 8001434:	2802      	cmp	r0, #2
 8001436:	d9f6      	bls.n	8001426 <HAL_RCC_OscConfig+0x16a>
 8001438:	e787      	b.n	800134a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800143a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800143c:	f7ff fdda 	bl	8000ff4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001440:	4d53      	ldr	r5, [pc, #332]	; (8001590 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001442:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001444:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001446:	0798      	lsls	r0, r3, #30
 8001448:	f57f af4a 	bpl.w	80012e0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fdd2 	bl	8000ff4 <HAL_GetTick>
 8001450:	1b80      	subs	r0, r0, r6
 8001452:	2802      	cmp	r0, #2
 8001454:	d9f6      	bls.n	8001444 <HAL_RCC_OscConfig+0x188>
 8001456:	e778      	b.n	800134a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001458:	4b4d      	ldr	r3, [pc, #308]	; (8001590 <HAL_RCC_OscConfig+0x2d4>)
 800145a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800145c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001460:	d128      	bne.n	80014b4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	9201      	str	r2, [sp, #4]
 8001464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001466:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800146a:	641a      	str	r2, [r3, #64]	; 0x40
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001476:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001478:	4d48      	ldr	r5, [pc, #288]	; (800159c <HAL_RCC_OscConfig+0x2e0>)
 800147a:	682b      	ldr	r3, [r5, #0]
 800147c:	05d9      	lsls	r1, r3, #23
 800147e:	d51b      	bpl.n	80014b8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001480:	68a3      	ldr	r3, [r4, #8]
 8001482:	4d43      	ldr	r5, [pc, #268]	; (8001590 <HAL_RCC_OscConfig+0x2d4>)
 8001484:	2b01      	cmp	r3, #1
 8001486:	d127      	bne.n	80014d8 <HAL_RCC_OscConfig+0x21c>
 8001488:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001490:	f7ff fdb0 	bl	8000ff4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001494:	4d3e      	ldr	r5, [pc, #248]	; (8001590 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001496:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001498:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800149e:	079b      	lsls	r3, r3, #30
 80014a0:	d539      	bpl.n	8001516 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80014a2:	2e00      	cmp	r6, #0
 80014a4:	f43f af20 	beq.w	80012e8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a8:	4a39      	ldr	r2, [pc, #228]	; (8001590 <HAL_RCC_OscConfig+0x2d4>)
 80014aa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6413      	str	r3, [r2, #64]	; 0x40
 80014b2:	e719      	b.n	80012e8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80014b4:	2600      	movs	r6, #0
 80014b6:	e7df      	b.n	8001478 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014b8:	682b      	ldr	r3, [r5, #0]
 80014ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014be:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80014c0:	f7ff fd98 	bl	8000ff4 <HAL_GetTick>
 80014c4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c6:	682b      	ldr	r3, [r5, #0]
 80014c8:	05da      	lsls	r2, r3, #23
 80014ca:	d4d9      	bmi.n	8001480 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014cc:	f7ff fd92 	bl	8000ff4 <HAL_GetTick>
 80014d0:	1bc0      	subs	r0, r0, r7
 80014d2:	2802      	cmp	r0, #2
 80014d4:	d9f7      	bls.n	80014c6 <HAL_RCC_OscConfig+0x20a>
 80014d6:	e738      	b.n	800134a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d8:	2b05      	cmp	r3, #5
 80014da:	d104      	bne.n	80014e6 <HAL_RCC_OscConfig+0x22a>
 80014dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014de:	f043 0304 	orr.w	r3, r3, #4
 80014e2:	672b      	str	r3, [r5, #112]	; 0x70
 80014e4:	e7d0      	b.n	8001488 <HAL_RCC_OscConfig+0x1cc>
 80014e6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80014e8:	f022 0201 	bic.w	r2, r2, #1
 80014ec:	672a      	str	r2, [r5, #112]	; 0x70
 80014ee:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80014f0:	f022 0204 	bic.w	r2, r2, #4
 80014f4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1ca      	bne.n	8001490 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80014fa:	f7ff fd7b 	bl	8000ff4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001502:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001504:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001506:	0798      	lsls	r0, r3, #30
 8001508:	d5cb      	bpl.n	80014a2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff fd73 	bl	8000ff4 <HAL_GetTick>
 800150e:	1bc0      	subs	r0, r0, r7
 8001510:	4540      	cmp	r0, r8
 8001512:	d9f7      	bls.n	8001504 <HAL_RCC_OscConfig+0x248>
 8001514:	e719      	b.n	800134a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001516:	f7ff fd6d 	bl	8000ff4 <HAL_GetTick>
 800151a:	1bc0      	subs	r0, r0, r7
 800151c:	4540      	cmp	r0, r8
 800151e:	d9bd      	bls.n	800149c <HAL_RCC_OscConfig+0x1e0>
 8001520:	e713      	b.n	800134a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001522:	4d1b      	ldr	r5, [pc, #108]	; (8001590 <HAL_RCC_OscConfig+0x2d4>)
 8001524:	68ab      	ldr	r3, [r5, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b08      	cmp	r3, #8
 800152c:	f43f aeca 	beq.w	80012c4 <HAL_RCC_OscConfig+0x8>
 8001530:	4e1b      	ldr	r6, [pc, #108]	; (80015a0 <HAL_RCC_OscConfig+0x2e4>)
 8001532:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001534:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001536:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001538:	d134      	bne.n	80015a4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800153a:	f7ff fd5b 	bl	8000ff4 <HAL_GetTick>
 800153e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001540:	682b      	ldr	r3, [r5, #0]
 8001542:	0199      	lsls	r1, r3, #6
 8001544:	d41e      	bmi.n	8001584 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001546:	6a22      	ldr	r2, [r4, #32]
 8001548:	69e3      	ldr	r3, [r4, #28]
 800154a:	4313      	orrs	r3, r2
 800154c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800154e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001552:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001554:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001558:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155a:	4c0d      	ldr	r4, [pc, #52]	; (8001590 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800155c:	0852      	lsrs	r2, r2, #1
 800155e:	3a01      	subs	r2, #1
 8001560:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001564:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001566:	2301      	movs	r3, #1
 8001568:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800156a:	f7ff fd43 	bl	8000ff4 <HAL_GetTick>
 800156e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001570:	6823      	ldr	r3, [r4, #0]
 8001572:	019a      	lsls	r2, r3, #6
 8001574:	f53f aebc 	bmi.w	80012f0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001578:	f7ff fd3c 	bl	8000ff4 <HAL_GetTick>
 800157c:	1b40      	subs	r0, r0, r5
 800157e:	2802      	cmp	r0, #2
 8001580:	d9f6      	bls.n	8001570 <HAL_RCC_OscConfig+0x2b4>
 8001582:	e6e2      	b.n	800134a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001584:	f7ff fd36 	bl	8000ff4 <HAL_GetTick>
 8001588:	1bc0      	subs	r0, r0, r7
 800158a:	2802      	cmp	r0, #2
 800158c:	d9d8      	bls.n	8001540 <HAL_RCC_OscConfig+0x284>
 800158e:	e6dc      	b.n	800134a <HAL_RCC_OscConfig+0x8e>
 8001590:	40023800 	.word	0x40023800
 8001594:	42470000 	.word	0x42470000
 8001598:	42470e80 	.word	0x42470e80
 800159c:	40007000 	.word	0x40007000
 80015a0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80015a4:	f7ff fd26 	bl	8000ff4 <HAL_GetTick>
 80015a8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015aa:	682b      	ldr	r3, [r5, #0]
 80015ac:	019b      	lsls	r3, r3, #6
 80015ae:	f57f ae9f 	bpl.w	80012f0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b2:	f7ff fd1f 	bl	8000ff4 <HAL_GetTick>
 80015b6:	1b00      	subs	r0, r0, r4
 80015b8:	2802      	cmp	r0, #2
 80015ba:	d9f6      	bls.n	80015aa <HAL_RCC_OscConfig+0x2ee>
 80015bc:	e6c5      	b.n	800134a <HAL_RCC_OscConfig+0x8e>
 80015be:	bf00      	nop

080015c0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015c0:	4913      	ldr	r1, [pc, #76]	; (8001610 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80015c2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015c4:	688b      	ldr	r3, [r1, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d003      	beq.n	80015d6 <HAL_RCC_GetSysClockFreq+0x16>
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d003      	beq.n	80015da <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015d2:	4810      	ldr	r0, [pc, #64]	; (8001614 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80015d4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80015d6:	4810      	ldr	r0, [pc, #64]	; (8001618 <HAL_RCC_GetSysClockFreq+0x58>)
 80015d8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015da:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015dc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015de:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015e0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e4:	bf14      	ite	ne
 80015e6:	480c      	ldrne	r0, [pc, #48]	; (8001618 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e8:	480a      	ldreq	r0, [pc, #40]	; (8001614 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ea:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80015ee:	bf18      	it	ne
 80015f0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f6:	fba1 0100 	umull	r0, r1, r1, r0
 80015fa:	f7ff fb29 	bl	8000c50 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <HAL_RCC_GetSysClockFreq+0x50>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001606:	3301      	adds	r3, #1
 8001608:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800160a:	fbb0 f0f3 	udiv	r0, r0, r3
 800160e:	bd08      	pop	{r3, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	00f42400 	.word	0x00f42400
 8001618:	007a1200 	.word	0x007a1200

0800161c <HAL_RCC_ClockConfig>:
{
 800161c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001620:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001622:	4604      	mov	r4, r0
 8001624:	b910      	cbnz	r0, 800162c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001626:	2001      	movs	r0, #1
 8001628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800162c:	4b44      	ldr	r3, [pc, #272]	; (8001740 <HAL_RCC_ClockConfig+0x124>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	f002 020f 	and.w	r2, r2, #15
 8001634:	428a      	cmp	r2, r1
 8001636:	d328      	bcc.n	800168a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001638:	6821      	ldr	r1, [r4, #0]
 800163a:	078f      	lsls	r7, r1, #30
 800163c:	d42d      	bmi.n	800169a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163e:	07c8      	lsls	r0, r1, #31
 8001640:	d440      	bmi.n	80016c4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001642:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <HAL_RCC_ClockConfig+0x124>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	f002 020f 	and.w	r2, r2, #15
 800164a:	4295      	cmp	r5, r2
 800164c:	d366      	bcc.n	800171c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164e:	6822      	ldr	r2, [r4, #0]
 8001650:	0751      	lsls	r1, r2, #29
 8001652:	d46c      	bmi.n	800172e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001654:	0713      	lsls	r3, r2, #28
 8001656:	d507      	bpl.n	8001668 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001658:	4a3a      	ldr	r2, [pc, #232]	; (8001744 <HAL_RCC_ClockConfig+0x128>)
 800165a:	6921      	ldr	r1, [r4, #16]
 800165c:	6893      	ldr	r3, [r2, #8]
 800165e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001662:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001666:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001668:	f7ff ffaa 	bl	80015c0 <HAL_RCC_GetSysClockFreq>
 800166c:	4b35      	ldr	r3, [pc, #212]	; (8001744 <HAL_RCC_ClockConfig+0x128>)
 800166e:	4a36      	ldr	r2, [pc, #216]	; (8001748 <HAL_RCC_ClockConfig+0x12c>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001676:	5cd3      	ldrb	r3, [r2, r3]
 8001678:	40d8      	lsrs	r0, r3
 800167a:	4b34      	ldr	r3, [pc, #208]	; (800174c <HAL_RCC_ClockConfig+0x130>)
 800167c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800167e:	2000      	movs	r0, #0
 8001680:	f7ff fc6e 	bl	8000f60 <HAL_InitTick>
  return HAL_OK;
 8001684:	2000      	movs	r0, #0
 8001686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	b2ca      	uxtb	r2, r1
 800168c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	4299      	cmp	r1, r3
 8001696:	d1c6      	bne.n	8001626 <HAL_RCC_ClockConfig+0xa>
 8001698:	e7ce      	b.n	8001638 <HAL_RCC_ClockConfig+0x1c>
 800169a:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016a0:	bf1e      	ittt	ne
 80016a2:	689a      	ldrne	r2, [r3, #8]
 80016a4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80016a8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016aa:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ac:	bf42      	ittt	mi
 80016ae:	689a      	ldrmi	r2, [r3, #8]
 80016b0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80016b4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	68a0      	ldr	r0, [r4, #8]
 80016ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80016be:	4302      	orrs	r2, r0
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	e7bc      	b.n	800163e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c4:	6862      	ldr	r2, [r4, #4]
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <HAL_RCC_ClockConfig+0x128>)
 80016c8:	2a01      	cmp	r2, #1
 80016ca:	d11d      	bne.n	8001708 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d2:	d0a8      	beq.n	8001626 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d4:	4e1b      	ldr	r6, [pc, #108]	; (8001744 <HAL_RCC_ClockConfig+0x128>)
 80016d6:	68b3      	ldr	r3, [r6, #8]
 80016d8:	f023 0303 	bic.w	r3, r3, #3
 80016dc:	4313      	orrs	r3, r2
 80016de:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80016e0:	f7ff fc88 	bl	8000ff4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80016e8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ea:	68b3      	ldr	r3, [r6, #8]
 80016ec:	6862      	ldr	r2, [r4, #4]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80016f6:	d0a4      	beq.n	8001642 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f8:	f7ff fc7c 	bl	8000ff4 <HAL_GetTick>
 80016fc:	1bc0      	subs	r0, r0, r7
 80016fe:	4540      	cmp	r0, r8
 8001700:	d9f3      	bls.n	80016ea <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001702:	2003      	movs	r0, #3
}
 8001704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001708:	1e91      	subs	r1, r2, #2
 800170a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170e:	d802      	bhi.n	8001716 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001710:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001714:	e7dd      	b.n	80016d2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001716:	f013 0f02 	tst.w	r3, #2
 800171a:	e7da      	b.n	80016d2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171c:	b2ea      	uxtb	r2, r5
 800171e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	429d      	cmp	r5, r3
 8001728:	f47f af7d 	bne.w	8001626 <HAL_RCC_ClockConfig+0xa>
 800172c:	e78f      	b.n	800164e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800172e:	4905      	ldr	r1, [pc, #20]	; (8001744 <HAL_RCC_ClockConfig+0x128>)
 8001730:	68e0      	ldr	r0, [r4, #12]
 8001732:	688b      	ldr	r3, [r1, #8]
 8001734:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001738:	4303      	orrs	r3, r0
 800173a:	608b      	str	r3, [r1, #8]
 800173c:	e78a      	b.n	8001654 <HAL_RCC_ClockConfig+0x38>
 800173e:	bf00      	nop
 8001740:	40023c00 	.word	0x40023c00
 8001744:	40023800 	.word	0x40023800
 8001748:	08004390 	.word	0x08004390
 800174c:	20001778 	.word	0x20001778

08001750 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001750:	4b01      	ldr	r3, [pc, #4]	; (8001758 <HAL_RCC_GetHCLKFreq+0x8>)
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20001778 	.word	0x20001778

0800175c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <HAL_RCC_GetPCLK1Freq+0x14>)
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001766:	5cd3      	ldrb	r3, [r2, r3]
 8001768:	4a03      	ldr	r2, [pc, #12]	; (8001778 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800176a:	6810      	ldr	r0, [r2, #0]
}
 800176c:	40d8      	lsrs	r0, r3
 800176e:	4770      	bx	lr
 8001770:	40023800 	.word	0x40023800
 8001774:	080043a0 	.word	0x080043a0
 8001778:	20001778 	.word	0x20001778

0800177c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <HAL_RCC_GetPCLK2Freq+0x14>)
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001786:	5cd3      	ldrb	r3, [r2, r3]
 8001788:	4a03      	ldr	r2, [pc, #12]	; (8001798 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800178a:	6810      	ldr	r0, [r2, #0]
}
 800178c:	40d8      	lsrs	r0, r3
 800178e:	4770      	bx	lr
 8001790:	40023800 	.word	0x40023800
 8001794:	080043a0 	.word	0x080043a0
 8001798:	20001778 	.word	0x20001778

0800179c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800179c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80017a0:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80017a2:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80017a4:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017a6:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80017a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80017ac:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80017ae:	6133      	str	r3, [r6, #16]
{
 80017b0:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017b2:	6883      	ldr	r3, [r0, #8]
 80017b4:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80017b6:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017b8:	4303      	orrs	r3, r0
 80017ba:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80017bc:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017c0:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80017c2:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80017c6:	430b      	orrs	r3, r1
 80017c8:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80017ca:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80017cc:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80017ce:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80017d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80017d4:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017d6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80017da:	6173      	str	r3, [r6, #20]
 80017dc:	4b7a      	ldr	r3, [pc, #488]	; (80019c8 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017de:	d17c      	bne.n	80018da <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80017e0:	429e      	cmp	r6, r3
 80017e2:	d003      	beq.n	80017ec <UART_SetConfig+0x50>
 80017e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017e8:	429e      	cmp	r6, r3
 80017ea:	d144      	bne.n	8001876 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80017ec:	f7ff ffc6 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 80017f0:	2519      	movs	r5, #25
 80017f2:	fb05 f300 	mul.w	r3, r5, r0
 80017f6:	6860      	ldr	r0, [r4, #4]
 80017f8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80017fc:	0040      	lsls	r0, r0, #1
 80017fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8001802:	fbb3 f3f9 	udiv	r3, r3, r9
 8001806:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800180a:	f7ff ffb7 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 800180e:	6863      	ldr	r3, [r4, #4]
 8001810:	4368      	muls	r0, r5
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fbb0 f7f3 	udiv	r7, r0, r3
 8001818:	f7ff ffb0 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 800181c:	6863      	ldr	r3, [r4, #4]
 800181e:	4368      	muls	r0, r5
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fbb0 f3f3 	udiv	r3, r0, r3
 8001826:	fbb3 f3f9 	udiv	r3, r3, r9
 800182a:	fb09 7313 	mls	r3, r9, r3, r7
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	3332      	adds	r3, #50	; 0x32
 8001832:	fbb3 f3f9 	udiv	r3, r3, r9
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800183c:	f7ff ff9e 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 8001840:	6862      	ldr	r2, [r4, #4]
 8001842:	4368      	muls	r0, r5
 8001844:	0052      	lsls	r2, r2, #1
 8001846:	fbb0 faf2 	udiv	sl, r0, r2
 800184a:	f7ff ff97 	bl	800177c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800184e:	6863      	ldr	r3, [r4, #4]
 8001850:	4368      	muls	r0, r5
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	fbb0 f3f3 	udiv	r3, r0, r3
 8001858:	fbb3 f3f9 	udiv	r3, r3, r9
 800185c:	fb09 a313 	mls	r3, r9, r3, sl
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	3332      	adds	r3, #50	; 0x32
 8001864:	fbb3 f3f9 	udiv	r3, r3, r9
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800186e:	443b      	add	r3, r7
 8001870:	60b3      	str	r3, [r6, #8]
 8001872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001876:	f7ff ff71 	bl	800175c <HAL_RCC_GetPCLK1Freq>
 800187a:	2519      	movs	r5, #25
 800187c:	fb05 f300 	mul.w	r3, r5, r0
 8001880:	6860      	ldr	r0, [r4, #4]
 8001882:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001886:	0040      	lsls	r0, r0, #1
 8001888:	fbb3 f3f0 	udiv	r3, r3, r0
 800188c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001890:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001894:	f7ff ff62 	bl	800175c <HAL_RCC_GetPCLK1Freq>
 8001898:	6863      	ldr	r3, [r4, #4]
 800189a:	4368      	muls	r0, r5
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fbb0 f7f3 	udiv	r7, r0, r3
 80018a2:	f7ff ff5b 	bl	800175c <HAL_RCC_GetPCLK1Freq>
 80018a6:	6863      	ldr	r3, [r4, #4]
 80018a8:	4368      	muls	r0, r5
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80018b4:	fb09 7313 	mls	r3, r9, r3, r7
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	3332      	adds	r3, #50	; 0x32
 80018bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80018c6:	f7ff ff49 	bl	800175c <HAL_RCC_GetPCLK1Freq>
 80018ca:	6862      	ldr	r2, [r4, #4]
 80018cc:	4368      	muls	r0, r5
 80018ce:	0052      	lsls	r2, r2, #1
 80018d0:	fbb0 faf2 	udiv	sl, r0, r2
 80018d4:	f7ff ff42 	bl	800175c <HAL_RCC_GetPCLK1Freq>
 80018d8:	e7b9      	b.n	800184e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80018da:	429e      	cmp	r6, r3
 80018dc:	d002      	beq.n	80018e4 <UART_SetConfig+0x148>
 80018de:	4b3b      	ldr	r3, [pc, #236]	; (80019cc <UART_SetConfig+0x230>)
 80018e0:	429e      	cmp	r6, r3
 80018e2:	d140      	bne.n	8001966 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80018e4:	f7ff ff4a 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 80018e8:	6867      	ldr	r7, [r4, #4]
 80018ea:	2519      	movs	r5, #25
 80018ec:	f04f 0964 	mov.w	r9, #100	; 0x64
 80018f0:	fb05 f300 	mul.w	r3, r5, r0
 80018f4:	00bf      	lsls	r7, r7, #2
 80018f6:	fbb3 f3f7 	udiv	r3, r3, r7
 80018fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80018fe:	011f      	lsls	r7, r3, #4
 8001900:	f7ff ff3c 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 8001904:	6863      	ldr	r3, [r4, #4]
 8001906:	4368      	muls	r0, r5
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	fbb0 f8f3 	udiv	r8, r0, r3
 800190e:	f7ff ff35 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 8001912:	6863      	ldr	r3, [r4, #4]
 8001914:	4368      	muls	r0, r5
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	fbb0 f3f3 	udiv	r3, r0, r3
 800191c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001920:	fb09 8313 	mls	r3, r9, r3, r8
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	3332      	adds	r3, #50	; 0x32
 8001928:	fbb3 f3f9 	udiv	r3, r3, r9
 800192c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001930:	f7ff ff24 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 8001934:	6862      	ldr	r2, [r4, #4]
 8001936:	4368      	muls	r0, r5
 8001938:	0092      	lsls	r2, r2, #2
 800193a:	fbb0 faf2 	udiv	sl, r0, r2
 800193e:	f7ff ff1d 	bl	800177c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001942:	6863      	ldr	r3, [r4, #4]
 8001944:	4368      	muls	r0, r5
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	fbb0 f3f3 	udiv	r3, r0, r3
 800194c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001950:	fb09 a313 	mls	r3, r9, r3, sl
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	3332      	adds	r3, #50	; 0x32
 8001958:	fbb3 f3f9 	udiv	r3, r3, r9
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	ea43 0308 	orr.w	r3, r3, r8
 8001964:	e783      	b.n	800186e <UART_SetConfig+0xd2>
 8001966:	f7ff fef9 	bl	800175c <HAL_RCC_GetPCLK1Freq>
 800196a:	6867      	ldr	r7, [r4, #4]
 800196c:	2519      	movs	r5, #25
 800196e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001972:	fb05 f300 	mul.w	r3, r5, r0
 8001976:	00bf      	lsls	r7, r7, #2
 8001978:	fbb3 f3f7 	udiv	r3, r3, r7
 800197c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001980:	011f      	lsls	r7, r3, #4
 8001982:	f7ff feeb 	bl	800175c <HAL_RCC_GetPCLK1Freq>
 8001986:	6863      	ldr	r3, [r4, #4]
 8001988:	4368      	muls	r0, r5
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	fbb0 f8f3 	udiv	r8, r0, r3
 8001990:	f7ff fee4 	bl	800175c <HAL_RCC_GetPCLK1Freq>
 8001994:	6863      	ldr	r3, [r4, #4]
 8001996:	4368      	muls	r0, r5
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	fbb0 f3f3 	udiv	r3, r0, r3
 800199e:	fbb3 f3f9 	udiv	r3, r3, r9
 80019a2:	fb09 8313 	mls	r3, r9, r3, r8
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	3332      	adds	r3, #50	; 0x32
 80019aa:	fbb3 f3f9 	udiv	r3, r3, r9
 80019ae:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80019b2:	f7ff fed3 	bl	800175c <HAL_RCC_GetPCLK1Freq>
 80019b6:	6862      	ldr	r2, [r4, #4]
 80019b8:	4368      	muls	r0, r5
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	fbb0 faf2 	udiv	sl, r0, r2
 80019c0:	f7ff fecc 	bl	800175c <HAL_RCC_GetPCLK1Freq>
 80019c4:	e7bd      	b.n	8001942 <UART_SetConfig+0x1a6>
 80019c6:	bf00      	nop
 80019c8:	40011000 	.word	0x40011000
 80019cc:	40011400 	.word	0x40011400

080019d0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80019d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d2:	4604      	mov	r4, r0
 80019d4:	460e      	mov	r6, r1
 80019d6:	4617      	mov	r7, r2
 80019d8:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80019da:	6821      	ldr	r1, [r4, #0]
 80019dc:	680b      	ldr	r3, [r1, #0]
 80019de:	ea36 0303 	bics.w	r3, r6, r3
 80019e2:	d101      	bne.n	80019e8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80019e4:	2000      	movs	r0, #0
}
 80019e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80019e8:	1c6b      	adds	r3, r5, #1
 80019ea:	d0f7      	beq.n	80019dc <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80019ec:	b995      	cbnz	r5, 8001a14 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80019ee:	6823      	ldr	r3, [r4, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80019f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	f022 0201 	bic.w	r2, r2, #1
 80019fe:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001a00:	2320      	movs	r3, #32
 8001a02:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001a06:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001a10:	2003      	movs	r0, #3
 8001a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001a14:	f7ff faee 	bl	8000ff4 <HAL_GetTick>
 8001a18:	1bc0      	subs	r0, r0, r7
 8001a1a:	4285      	cmp	r5, r0
 8001a1c:	d2dd      	bcs.n	80019da <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001a1e:	e7e6      	b.n	80019ee <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001a20 <HAL_UART_Init>:
{
 8001a20:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001a22:	4604      	mov	r4, r0
 8001a24:	b340      	cbz	r0, 8001a78 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001a26:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a2e:	b91b      	cbnz	r3, 8001a38 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001a30:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001a34:	f000 fe06 	bl	8002644 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001a38:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a3a:	2324      	movs	r3, #36	; 0x24
 8001a3c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001a40:	68d3      	ldr	r3, [r2, #12]
 8001a42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a46:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7ff fea7 	bl	800179c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a56:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a5e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a66:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a68:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001a6a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a6c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001a6e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001a72:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001a76:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a78:	2001      	movs	r0, #1
}
 8001a7a:	bd10      	pop	{r4, pc}

08001a7c <HAL_UART_Transmit>:
{
 8001a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a80:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8001a82:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a86:	2b20      	cmp	r3, #32
{
 8001a88:	4604      	mov	r4, r0
 8001a8a:	460d      	mov	r5, r1
 8001a8c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8001a8e:	d14f      	bne.n	8001b30 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8001a90:	2900      	cmp	r1, #0
 8001a92:	d04a      	beq.n	8001b2a <HAL_UART_Transmit+0xae>
 8001a94:	2a00      	cmp	r2, #0
 8001a96:	d048      	beq.n	8001b2a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001a98:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d047      	beq.n	8001b30 <HAL_UART_Transmit+0xb4>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001aaa:	2321      	movs	r3, #33	; 0x21
 8001aac:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001ab0:	f7ff faa0 	bl	8000ff4 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001ab4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001ab8:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001aba:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001abe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	b96b      	cbnz	r3, 8001ae0 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	4632      	mov	r2, r6
 8001ac8:	2140      	movs	r1, #64	; 0x40
 8001aca:	4620      	mov	r0, r4
 8001acc:	f7ff ff80 	bl	80019d0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ad0:	b9b0      	cbnz	r0, 8001b00 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001ad2:	2320      	movs	r3, #32
 8001ad4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001ad8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001ae0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ae8:	68a3      	ldr	r3, [r4, #8]
 8001aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aee:	4632      	mov	r2, r6
 8001af0:	463b      	mov	r3, r7
 8001af2:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001af6:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001af8:	d10e      	bne.n	8001b18 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001afa:	f7ff ff69 	bl	80019d0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001afe:	b110      	cbz	r0, 8001b06 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001b00:	2003      	movs	r0, #3
 8001b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001b06:	882b      	ldrh	r3, [r5, #0]
 8001b08:	6822      	ldr	r2, [r4, #0]
 8001b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b0e:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001b10:	6923      	ldr	r3, [r4, #16]
 8001b12:	b943      	cbnz	r3, 8001b26 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001b14:	3502      	adds	r5, #2
 8001b16:	e7d2      	b.n	8001abe <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b18:	f7ff ff5a 	bl	80019d0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	d1ef      	bne.n	8001b00 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	782a      	ldrb	r2, [r5, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	3501      	adds	r5, #1
 8001b28:	e7c9      	b.n	8001abe <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001b30:	2002      	movs	r0, #2
}
 8001b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001b38 <tab_deg_to_inc_converter>:
float correction_margin_error_integration = 0;
float correction_margin_last_error = 0;
char command_string[10];


int tab_deg_to_inc_converter(float degrees_angle) {
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	ed87 0a01 	vstr	s0, [r7, #4]
    int inc = (int)(degrees_angle*1024/360); //3000 inc/evolution, 1:25reductor
 8001b42:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b46:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001b70 <tab_deg_to_inc_converter+0x38>
 8001b4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b4e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001b74 <tab_deg_to_inc_converter+0x3c>
 8001b52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b5a:	ee17 3a90 	vmov	r3, s15
 8001b5e:	60fb      	str	r3, [r7, #12]
    return inc;
 8001b60:	68fb      	ldr	r3, [r7, #12]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	44800000 	.word	0x44800000
 8001b74:	43b40000 	.word	0x43b40000

08001b78 <rad2deg>:

float rad2deg(float angle_rad)
{
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	ed87 0a01 	vstr	s0, [r7, #4]
	return angle_rad*180/PI;
 8001b82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b86:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001bc8 <rad2deg+0x50>
 8001b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b8e:	ee17 0a90 	vmov	r0, s15
 8001b92:	f7fe fce1 	bl	8000558 <__aeabi_f2d>
 8001b96:	a30a      	add	r3, pc, #40	; (adr r3, 8001bc0 <rad2deg+0x48>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	f7fe fe5a 	bl	8000854 <__aeabi_ddiv>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	460c      	mov	r4, r1
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	f7ff f802 	bl	8000bb0 <__aeabi_d2f>
 8001bac:	4603      	mov	r3, r0
 8001bae:	ee07 3a90 	vmov	s15, r3
}
 8001bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd90      	pop	{r4, r7, pc}
 8001bbc:	f3af 8000 	nop.w
 8001bc0:	2e48e8a7 	.word	0x2e48e8a7
 8001bc4:	400921ff 	.word	0x400921ff
 8001bc8:	43340000 	.word	0x43340000
 8001bcc:	00000000 	.word	0x00000000

08001bd0 <deg2rad>:
float deg2rad(float angle_deg)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	ed87 0a01 	vstr	s0, [r7, #4]
	return angle_deg*PI/180;
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7fe fcbc 	bl	8000558 <__aeabi_f2d>
 8001be0:	a30e      	add	r3, pc, #56	; (adr r3, 8001c1c <deg2rad+0x4c>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe fd0b 	bl	8000600 <__aeabi_dmul>
 8001bea:	4603      	mov	r3, r0
 8001bec:	460c      	mov	r4, r1
 8001bee:	4618      	mov	r0, r3
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <deg2rad+0x48>)
 8001bf8:	f7fe fe2c 	bl	8000854 <__aeabi_ddiv>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	460c      	mov	r4, r1
 8001c00:	4618      	mov	r0, r3
 8001c02:	4621      	mov	r1, r4
 8001c04:	f7fe ffd4 	bl	8000bb0 <__aeabi_d2f>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	ee07 3a90 	vmov	s15, r3
}
 8001c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd90      	pop	{r4, r7, pc}
 8001c18:	40668000 	.word	0x40668000
 8001c1c:	2e48e8a7 	.word	0x2e48e8a7
 8001c20:	400921ff 	.word	0x400921ff
 8001c24:	00000000 	.word	0x00000000

08001c28 <flaps2motor>:

float flaps2motor(float beta_deg)
{
 8001c28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c2c:	b08a      	sub	sp, #40	; 0x28
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	ed87 0a01 	vstr	s0, [r7, #4]
	float  Xx = G_GEOM*sin(deg2rad(beta_deg)-GAMA_GEOM);
 8001c34:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c38:	f7ff ffca 	bl	8001bd0 <deg2rad>
 8001c3c:	ee10 3a10 	vmov	r3, s0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fc89 	bl	8000558 <__aeabi_f2d>
 8001c46:	a387      	add	r3, pc, #540	; (adr r3, 8001e64 <flaps2motor+0x23c>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fb24 	bl	8000298 <__aeabi_dsub>
 8001c50:	4603      	mov	r3, r0
 8001c52:	460c      	mov	r4, r1
 8001c54:	ec44 3b17 	vmov	d7, r3, r4
 8001c58:	eeb0 0a47 	vmov.f32	s0, s14
 8001c5c:	eef0 0a67 	vmov.f32	s1, s15
 8001c60:	f001 f9fa 	bl	8003058 <sin>
 8001c64:	ec51 0b10 	vmov	r0, r1, d0
 8001c68:	a380      	add	r3, pc, #512	; (adr r3, 8001e6c <flaps2motor+0x244>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fcc7 	bl	8000600 <__aeabi_dmul>
 8001c72:	4603      	mov	r3, r0
 8001c74:	460c      	mov	r4, r1
 8001c76:	4618      	mov	r0, r3
 8001c78:	4621      	mov	r1, r4
 8001c7a:	f7fe ff99 	bl	8000bb0 <__aeabi_d2f>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
	float  Xy = G_GEOM*cos(deg2rad(beta_deg)-GAMA_GEOM);
 8001c82:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c86:	f7ff ffa3 	bl	8001bd0 <deg2rad>
 8001c8a:	ee10 3a10 	vmov	r3, s0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fc62 	bl	8000558 <__aeabi_f2d>
 8001c94:	a373      	add	r3, pc, #460	; (adr r3, 8001e64 <flaps2motor+0x23c>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	f7fe fafd 	bl	8000298 <__aeabi_dsub>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	460c      	mov	r4, r1
 8001ca2:	ec44 3b17 	vmov	d7, r3, r4
 8001ca6:	eeb0 0a47 	vmov.f32	s0, s14
 8001caa:	eef0 0a67 	vmov.f32	s1, s15
 8001cae:	f001 f98f 	bl	8002fd0 <cos>
 8001cb2:	ec51 0b10 	vmov	r0, r1, d0
 8001cb6:	a36d      	add	r3, pc, #436	; (adr r3, 8001e6c <flaps2motor+0x244>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	f7fe fca0 	bl	8000600 <__aeabi_dmul>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	460c      	mov	r4, r1
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	f7fe ff72 	bl	8000bb0 <__aeabi_d2f>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	623b      	str	r3, [r7, #32]
	float a_wy = 1;
 8001cd0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001cd4:	61fb      	str	r3, [r7, #28]
	float b_wy = -2*Xy;
 8001cd6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cda:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001cde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce2:	edc7 7a06 	vstr	s15, [r7, #24]
	float c_wy = Xy*Xy + (Xx-WX_GEOM)*(Xx-WX_GEOM) - D_GEOM*D_GEOM;
 8001ce6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cea:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf2:	ee17 0a90 	vmov	r0, s15
 8001cf6:	f7fe fc2f 	bl	8000558 <__aeabi_f2d>
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	460d      	mov	r5, r1
 8001cfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d00:	f7fe fc2a 	bl	8000558 <__aeabi_f2d>
 8001d04:	a35b      	add	r3, pc, #364	; (adr r3, 8001e74 <flaps2motor+0x24c>)
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	f7fe fac7 	bl	800029c <__adddf3>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4690      	mov	r8, r2
 8001d14:	4699      	mov	r9, r3
 8001d16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d18:	f7fe fc1e 	bl	8000558 <__aeabi_f2d>
 8001d1c:	a355      	add	r3, pc, #340	; (adr r3, 8001e74 <flaps2motor+0x24c>)
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f7fe fabb 	bl	800029c <__adddf3>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4640      	mov	r0, r8
 8001d2c:	4649      	mov	r1, r9
 8001d2e:	f7fe fc67 	bl	8000600 <__aeabi_dmul>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4620      	mov	r0, r4
 8001d38:	4629      	mov	r1, r5
 8001d3a:	f7fe faaf 	bl	800029c <__adddf3>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460c      	mov	r4, r1
 8001d42:	4618      	mov	r0, r3
 8001d44:	4621      	mov	r1, r4
 8001d46:	a34d      	add	r3, pc, #308	; (adr r3, 8001e7c <flaps2motor+0x254>)
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	f7fe faa4 	bl	8000298 <__aeabi_dsub>
 8001d50:	4603      	mov	r3, r0
 8001d52:	460c      	mov	r4, r1
 8001d54:	4618      	mov	r0, r3
 8001d56:	4621      	mov	r1, r4
 8001d58:	f7fe ff2a 	bl	8000bb0 <__aeabi_d2f>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	617b      	str	r3, [r7, #20]
	float Wy = (-b_wy - sqrt(b_wy*b_wy - 4*a_wy*c_wy))/(2*a_wy);
 8001d60:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d64:	eef1 7a67 	vneg.f32	s15, s15
 8001d68:	ee17 3a90 	vmov	r3, s15
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fbf3 	bl	8000558 <__aeabi_f2d>
 8001d72:	4604      	mov	r4, r0
 8001d74:	460d      	mov	r5, r1
 8001d76:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d82:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d86:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001d8a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d9a:	ee17 0a90 	vmov	r0, s15
 8001d9e:	f7fe fbdb 	bl	8000558 <__aeabi_f2d>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	ec43 2b10 	vmov	d0, r2, r3
 8001daa:	f001 f99d 	bl	80030e8 <sqrt>
 8001dae:	ec53 2b10 	vmov	r2, r3, d0
 8001db2:	4620      	mov	r0, r4
 8001db4:	4629      	mov	r1, r5
 8001db6:	f7fe fa6f 	bl	8000298 <__aeabi_dsub>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	460c      	mov	r4, r1
 8001dbe:	4625      	mov	r5, r4
 8001dc0:	461c      	mov	r4, r3
 8001dc2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dc6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dca:	ee17 0a90 	vmov	r0, s15
 8001dce:	f7fe fbc3 	bl	8000558 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	4629      	mov	r1, r5
 8001dda:	f7fe fd3b 	bl	8000854 <__aeabi_ddiv>
 8001dde:	4603      	mov	r3, r0
 8001de0:	460c      	mov	r4, r1
 8001de2:	4618      	mov	r0, r3
 8001de4:	4621      	mov	r1, r4
 8001de6:	f7fe fee3 	bl	8000bb0 <__aeabi_d2f>
 8001dea:	4603      	mov	r3, r0
 8001dec:	613b      	str	r3, [r7, #16]
	float alpha_rad = (Wy - W0Y_GEOM)*2*PI/P_GEOM;
 8001dee:	6938      	ldr	r0, [r7, #16]
 8001df0:	f7fe fbb2 	bl	8000558 <__aeabi_f2d>
 8001df4:	a323      	add	r3, pc, #140	; (adr r3, 8001e84 <flaps2motor+0x25c>)
 8001df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfa:	f7fe fa4f 	bl	800029c <__adddf3>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	460c      	mov	r4, r1
 8001e02:	4618      	mov	r0, r3
 8001e04:	4621      	mov	r1, r4
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	f7fe fa47 	bl	800029c <__adddf3>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	460c      	mov	r4, r1
 8001e12:	4618      	mov	r0, r3
 8001e14:	4621      	mov	r1, r4
 8001e16:	a31d      	add	r3, pc, #116	; (adr r3, 8001e8c <flaps2motor+0x264>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	f7fe fbf0 	bl	8000600 <__aeabi_dmul>
 8001e20:	4603      	mov	r3, r0
 8001e22:	460c      	mov	r4, r1
 8001e24:	4618      	mov	r0, r3
 8001e26:	4621      	mov	r1, r4
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <flaps2motor+0x238>)
 8001e2e:	f7fe fd11 	bl	8000854 <__aeabi_ddiv>
 8001e32:	4603      	mov	r3, r0
 8001e34:	460c      	mov	r4, r1
 8001e36:	4618      	mov	r0, r3
 8001e38:	4621      	mov	r1, r4
 8001e3a:	f7fe feb9 	bl	8000bb0 <__aeabi_d2f>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	60fb      	str	r3, [r7, #12]
	return rad2deg(alpha_rad);
 8001e42:	ed97 0a03 	vldr	s0, [r7, #12]
 8001e46:	f7ff fe97 	bl	8001b78 <rad2deg>
 8001e4a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e5a:	bf00      	nop
 8001e5c:	f3af 8000 	nop.w
 8001e60:	3ff80000 	.word	0x3ff80000
 8001e64:	f2e48e8a 	.word	0xf2e48e8a
 8001e68:	3fe1d21f 	.word	0x3fe1d21f
 8001e6c:	f837b4a2 	.word	0xf837b4a2
 8001e70:	4049c4c2 	.word	0x4049c4c2
 8001e74:	66666666 	.word	0x66666666
 8001e78:	403b6666 	.word	0x403b6666
 8001e7c:	851eb852 	.word	0x851eb852
 8001e80:	40a5690b 	.word	0x40a5690b
 8001e84:	fc504817 	.word	0xfc504817
 8001e88:	40213318 	.word	0x40213318
 8001e8c:	2e48e8a7 	.word	0x2e48e8a7
 8001e90:	400921ff 	.word	0x400921ff

08001e94 <do_string_command>:



char* do_string_command(char first, char second, int number)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	603a      	str	r2, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	71bb      	strb	r3, [r7, #6]
	for(int i = 0; i< sizeof(command_string); i++){
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	e007      	b.n	8001eba <do_string_command+0x26>
		command_string[i] = 0;
 8001eaa:	4a13      	ldr	r2, [pc, #76]	; (8001ef8 <do_string_command+0x64>)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	4413      	add	r3, r2
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i< sizeof(command_string); i++){
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2b09      	cmp	r3, #9
 8001ebe:	d9f4      	bls.n	8001eaa <do_string_command+0x16>
	}
	command_string[0] = first;
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <do_string_command+0x64>)
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	7013      	strb	r3, [r2, #0]
	command_string[1] = second;
 8001ec6:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <do_string_command+0x64>)
 8001ec8:	79bb      	ldrb	r3, [r7, #6]
 8001eca:	7053      	strb	r3, [r2, #1]
	char* commandIncStart = (char*)(&command_string[2]);
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <do_string_command+0x68>)
 8001ece:	613b      	str	r3, [r7, #16]
	sprintf(commandIncStart, "%d", number);
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	490b      	ldr	r1, [pc, #44]	; (8001f00 <do_string_command+0x6c>)
 8001ed4:	6938      	ldr	r0, [r7, #16]
 8001ed6:	f000 fc5b 	bl	8002790 <siprintf>
	size_t length = strlen(commandIncStart);
 8001eda:	6938      	ldr	r0, [r7, #16]
 8001edc:	f7fe f980 	bl	80001e0 <strlen>
 8001ee0:	60f8      	str	r0, [r7, #12]
	commandIncStart[length] = '\r';
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	220d      	movs	r2, #13
 8001eea:	701a      	strb	r2, [r3, #0]

	return command_string;
 8001eec:	4b02      	ldr	r3, [pc, #8]	; (8001ef8 <do_string_command+0x64>)
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20001810 	.word	0x20001810
 8001efc:	20001812 	.word	0x20001812
 8001f00:	08004340 	.word	0x08004340

08001f04 <motor_goto_position_inc>:

void motor_goto_position_inc(int position_inc)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	do_string_command('L', 'A', position_inc);
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	2141      	movs	r1, #65	; 0x41
 8001f10:	204c      	movs	r0, #76	; 0x4c
 8001f12:	f7ff ffbf 	bl	8001e94 <do_string_command>
	HAL_UART_Transmit(&huart1, command_string, strlen(command_string), 30);
 8001f16:	480b      	ldr	r0, [pc, #44]	; (8001f44 <motor_goto_position_inc+0x40>)
 8001f18:	f7fe f962 	bl	80001e0 <strlen>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	231e      	movs	r3, #30
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <motor_goto_position_inc+0x40>)
 8001f24:	4808      	ldr	r0, [pc, #32]	; (8001f48 <motor_goto_position_inc+0x44>)
 8001f26:	f7ff fda9 	bl	8001a7c <HAL_UART_Transmit>
	uint8_t* command = "M\r";
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <motor_goto_position_inc+0x48>)
 8001f2c:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, command, 2, 30);
 8001f2e:	231e      	movs	r3, #30
 8001f30:	2202      	movs	r2, #2
 8001f32:	68f9      	ldr	r1, [r7, #12]
 8001f34:	4804      	ldr	r0, [pc, #16]	; (8001f48 <motor_goto_position_inc+0x44>)
 8001f36:	f7ff fda1 	bl	8001a7c <HAL_UART_Transmit>
	// ADD DELAY HERE; THE PERIOD DEPENDS ON KALMAN FILTER FREQUENCY....
	return;
 8001f3a:	bf00      	nop
}
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20001810 	.word	0x20001810
 8001f48:	2000181c 	.word	0x2000181c
 8001f4c:	08004344 	.word	0x08004344

08001f50 <aerobrakes_control_init>:
	command = "M\r";
	HAL_UART_Transmit(&huart1, command, 2, 30);
	return; // SMALL FUNCTION TO TEST IF THE TRANSMISSION IS WORKING... THE MOTOR SHOULD ROTATE
}

void aerobrakes_control_init(void) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
    // TO CALL AT POWERING ON
//defining home
	uint8_t* command = "HO\r";
 8001f56:	4b35      	ldr	r3, [pc, #212]	; (800202c <aerobrakes_control_init+0xdc>)
 8001f58:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, command, 3, 30);
 8001f5a:	231e      	movs	r3, #30
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4833      	ldr	r0, [pc, #204]	; (8002030 <aerobrakes_control_init+0xe0>)
 8001f62:	f7ff fd8b 	bl	8001a7c <HAL_UART_Transmit>
//position limits
	command = "LL1\r";
 8001f66:	4b33      	ldr	r3, [pc, #204]	; (8002034 <aerobrakes_control_init+0xe4>)
 8001f68:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, command, 5, 30);
 8001f6a:	231e      	movs	r3, #30
 8001f6c:	2205      	movs	r2, #5
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	482f      	ldr	r0, [pc, #188]	; (8002030 <aerobrakes_control_init+0xe0>)
 8001f72:	f7ff fd83 	bl	8001a7c <HAL_UART_Transmit>
	int max_inc = tab_deg_to_inc_converter(flaps2motor(MAX_OPENING_DEG)); //" degrees for safety.
 8001f76:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8002038 <aerobrakes_control_init+0xe8>
 8001f7a:	f7ff fe55 	bl	8001c28 <flaps2motor>
 8001f7e:	eef0 7a40 	vmov.f32	s15, s0
 8001f82:	eeb0 0a67 	vmov.f32	s0, s15
 8001f86:	f7ff fdd7 	bl	8001b38 <tab_deg_to_inc_converter>
 8001f8a:	6038      	str	r0, [r7, #0]
	do_string_command('L', 'L', max_inc);
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	214c      	movs	r1, #76	; 0x4c
 8001f90:	204c      	movs	r0, #76	; 0x4c
 8001f92:	f7ff ff7f 	bl	8001e94 <do_string_command>
	HAL_UART_Transmit(&huart1, command_string, 9, 30);
 8001f96:	231e      	movs	r3, #30
 8001f98:	2209      	movs	r2, #9
 8001f9a:	4928      	ldr	r1, [pc, #160]	; (800203c <aerobrakes_control_init+0xec>)
 8001f9c:	4824      	ldr	r0, [pc, #144]	; (8002030 <aerobrakes_control_init+0xe0>)
 8001f9e:	f7ff fd6d 	bl	8001a7c <HAL_UART_Transmit>
	command = "APL1\r";
 8001fa2:	4b27      	ldr	r3, [pc, #156]	; (8002040 <aerobrakes_control_init+0xf0>)
 8001fa4:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, command, 5, 30);
 8001fa6:	231e      	movs	r3, #30
 8001fa8:	2205      	movs	r2, #5
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4820      	ldr	r0, [pc, #128]	; (8002030 <aerobrakes_control_init+0xe0>)
 8001fae:	f7ff fd65 	bl	8001a7c <HAL_UART_Transmit>
// controller properties
//	command = "SP10000\r";							MAXIMUM SPEED in inc/min
//	HAL_UART_Transmit(&huart1, command, 8, 30);
	command = "POR15\r";											//    READAPT PID PARAMS FOR FLAPS
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <aerobrakes_control_init+0xf4>)
 8001fb4:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, command, 6, 30);
 8001fb6:	231e      	movs	r3, #30
 8001fb8:	2206      	movs	r2, #6
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	481c      	ldr	r0, [pc, #112]	; (8002030 <aerobrakes_control_init+0xe0>)
 8001fbe:	f7ff fd5d 	bl	8001a7c <HAL_UART_Transmit>
	command = "I1\r";											//    READAPT PID PARAMS FOR FLAPS
 8001fc2:	4b21      	ldr	r3, [pc, #132]	; (8002048 <aerobrakes_control_init+0xf8>)
 8001fc4:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, command, 3, 30);
 8001fc6:	231e      	movs	r3, #30
 8001fc8:	2203      	movs	r2, #3
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4818      	ldr	r0, [pc, #96]	; (8002030 <aerobrakes_control_init+0xe0>)
 8001fce:	f7ff fd55 	bl	8001a7c <HAL_UART_Transmit>
	command = "PP225\r";
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <aerobrakes_control_init+0xfc>)
 8001fd4:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, command, 6, 30);
 8001fd6:	231e      	movs	r3, #30
 8001fd8:	2206      	movs	r2, #6
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4814      	ldr	r0, [pc, #80]	; (8002030 <aerobrakes_control_init+0xe0>)
 8001fde:	f7ff fd4d 	bl	8001a7c <HAL_UART_Transmit>
	command = "PD50\r";
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <aerobrakes_control_init+0x100>)
 8001fe4:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, command, 5, 30);
 8001fe6:	231e      	movs	r3, #30
 8001fe8:	2205      	movs	r2, #5
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4810      	ldr	r0, [pc, #64]	; (8002030 <aerobrakes_control_init+0xe0>)
 8001fee:	f7ff fd45 	bl	8001a7c <HAL_UART_Transmit>
	command = "LPC1000\r"; // peak current max, to be redefined
 8001ff2:	4b18      	ldr	r3, [pc, #96]	; (8002054 <aerobrakes_control_init+0x104>)
 8001ff4:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, command, 8, 30);
 8001ff6:	231e      	movs	r3, #30
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	480c      	ldr	r0, [pc, #48]	; (8002030 <aerobrakes_control_init+0xe0>)
 8001ffe:	f7ff fd3d 	bl	8001a7c <HAL_UART_Transmit>
	command = "LCC800\r"; // continuous current max_to be redefined
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <aerobrakes_control_init+0x108>)
 8002004:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, command, 7, 30);
 8002006:	231e      	movs	r3, #30
 8002008:	2207      	movs	r2, #7
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4808      	ldr	r0, [pc, #32]	; (8002030 <aerobrakes_control_init+0xe0>)
 800200e:	f7ff fd35 	bl	8001a7c <HAL_UART_Transmit>
	//Enable
	command = "EN\r";
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <aerobrakes_control_init+0x10c>)
 8002014:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, command, 3, 30);
 8002016:	231e      	movs	r3, #30
 8002018:	2203      	movs	r2, #3
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <aerobrakes_control_init+0xe0>)
 800201e:	f7ff fd2d 	bl	8001a7c <HAL_UART_Transmit>
	return;
 8002022:	bf00      	nop
}
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	08004348 	.word	0x08004348
 8002030:	2000181c 	.word	0x2000181c
 8002034:	08004350 	.word	0x08004350
 8002038:	42733333 	.word	0x42733333
 800203c:	20001810 	.word	0x20001810
 8002040:	08004358 	.word	0x08004358
 8002044:	08004360 	.word	0x08004360
 8002048:	08004368 	.word	0x08004368
 800204c:	0800436c 	.word	0x0800436c
 8002050:	08004374 	.word	0x08004374
 8002054:	0800437c 	.word	0x0800437c
 8002058:	08004388 	.word	0x08004388
 800205c:	0800434c 	.word	0x0800434c

08002060 <full_close>:


void full_close(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
	int angle_close_inc = tab_deg_to_inc_converter(0.0);
 8002066:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8002080 <full_close+0x20>
 800206a:	f7ff fd65 	bl	8001b38 <tab_deg_to_inc_converter>
 800206e:	6078      	str	r0, [r7, #4]
	motor_goto_position_inc(angle_close_inc);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff47 	bl	8001f04 <motor_goto_position_inc>
	return;
 8002076:	bf00      	nop
}
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	00000000 	.word	0x00000000

08002084 <aerobrake_helloworld>:

void aerobrake_helloworld(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
	float angle_helloworld = flaps2motor(5.0);
 800208a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800208e:	f7ff fdcb 	bl	8001c28 <flaps2motor>
 8002092:	ed87 0a01 	vstr	s0, [r7, #4]
	int angle_helloworld_inc = tab_deg_to_inc_converter(angle_helloworld);
 8002096:	ed97 0a01 	vldr	s0, [r7, #4]
 800209a:	f7ff fd4d 	bl	8001b38 <tab_deg_to_inc_converter>
 800209e:	6038      	str	r0, [r7, #0]
	motor_goto_position_inc(angle_helloworld_inc);
 80020a0:	6838      	ldr	r0, [r7, #0]
 80020a2:	f7ff ff2f 	bl	8001f04 <motor_goto_position_inc>
	HAL_Delay(500);
 80020a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020aa:	f7fe ffa9 	bl	8001000 <HAL_Delay>
	full_close();
 80020ae:	f7ff ffd7 	bl	8002060 <full_close>
	return;
 80020b2:	bf00      	nop

}
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <angle_tab>:

float angle_tab(float altitude, float speed) {
 80020bc:	b480      	push	{r7}
 80020be:	b093      	sub	sp, #76	; 0x4c
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80020c6:	edc7 0a00 	vstr	s1, [r7]
	int index_altitude=0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	647b      	str	r3, [r7, #68]	; 0x44
	if(altitude < look_up_tab[0][0])
 80020ce:	4b97      	ldr	r3, [pc, #604]	; (800232c <angle_tab+0x270>)
 80020d0:	ed93 7a00 	vldr	s14, [r3]
 80020d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80020d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e0:	dd02      	ble.n	80020e8 <angle_tab+0x2c>
	{
		return 0.0;
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	e117      	b.n	8002318 <angle_tab+0x25c>
	}
	else if(altitude > look_up_tab[TABLE_LENGTH-1][0])
 80020e8:	4b90      	ldr	r3, [pc, #576]	; (800232c <angle_tab+0x270>)
 80020ea:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80020ee:	3304      	adds	r3, #4
 80020f0:	ed93 7a00 	vldr	s14, [r3]
 80020f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80020f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002100:	d501      	bpl.n	8002106 <angle_tab+0x4a>
	{
		return (float)MAX_OPENING_DEG;
 8002102:	4b8b      	ldr	r3, [pc, #556]	; (8002330 <angle_tab+0x274>)
 8002104:	e108      	b.n	8002318 <angle_tab+0x25c>
	else
	{
		int j;
		float mean_speed_vector[TABLE_DIFF_SPEEDS_SAME_ALTITUDE];
		float mean_angle_vector[TABLE_DIFF_SPEEDS_SAME_ALTITUDE];
		while(look_up_tab[index_altitude][0] < altitude)
 8002106:	e002      	b.n	800210e <angle_tab+0x52>
		{
			index_altitude += TABLE_DIFF_SPEEDS_SAME_ALTITUDE;
 8002108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210a:	3305      	adds	r3, #5
 800210c:	647b      	str	r3, [r7, #68]	; 0x44
		while(look_up_tab[index_altitude][0] < altitude)
 800210e:	4987      	ldr	r1, [pc, #540]	; (800232c <angle_tab+0x270>)
 8002110:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	ed93 7a00 	vldr	s14, [r3]
 8002120:	edd7 7a01 	vldr	s15, [r7, #4]
 8002124:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212c:	d4ec      	bmi.n	8002108 <angle_tab+0x4c>
		}
		float phi = (altitude - look_up_tab[index_altitude-TABLE_DIFF_SPEEDS_SAME_ALTITUDE][0])/(look_up_tab[index_altitude][0] - look_up_tab[index_altitude-TABLE_DIFF_SPEEDS_SAME_ALTITUDE][0]);
 800212e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002130:	1f5a      	subs	r2, r3, #5
 8002132:	497e      	ldr	r1, [pc, #504]	; (800232c <angle_tab+0x270>)
 8002134:	4613      	mov	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	ed97 7a01 	vldr	s14, [r7, #4]
 8002146:	ee77 6a67 	vsub.f32	s13, s14, s15
 800214a:	4978      	ldr	r1, [pc, #480]	; (800232c <angle_tab+0x270>)
 800214c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800214e:	4613      	mov	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	ed93 7a00 	vldr	s14, [r3]
 800215c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800215e:	1f5a      	subs	r2, r3, #5
 8002160:	4972      	ldr	r1, [pc, #456]	; (800232c <angle_tab+0x270>)
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	edd3 7a00 	vldr	s15, [r3]
 8002170:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002178:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		for(j=0;j<TABLE_DIFF_SPEEDS_SAME_ALTITUDE; j++)
 800217c:	2300      	movs	r3, #0
 800217e:	643b      	str	r3, [r7, #64]	; 0x40
 8002180:	e060      	b.n	8002244 <angle_tab+0x188>
		{
			mean_speed_vector[j] = phi*look_up_tab[index_altitude-TABLE_DIFF_SPEEDS_SAME_ALTITUDE+j][1] + (1-phi)*look_up_tab[index_altitude+j][1];
 8002182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002184:	1f5a      	subs	r2, r3, #5
 8002186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002188:	441a      	add	r2, r3
 800218a:	4968      	ldr	r1, [pc, #416]	; (800232c <angle_tab+0x270>)
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	3304      	adds	r3, #4
 8002198:	ed93 7a00 	vldr	s14, [r3]
 800219c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80021a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021a8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80021ac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80021b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b4:	441a      	add	r2, r3
 80021b6:	495d      	ldr	r1, [pc, #372]	; (800232c <angle_tab+0x270>)
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3304      	adds	r3, #4
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80021d8:	4413      	add	r3, r2
 80021da:	3b2c      	subs	r3, #44	; 0x2c
 80021dc:	edc3 7a00 	vstr	s15, [r3]
			mean_angle_vector[j] = phi*look_up_tab[index_altitude-TABLE_DIFF_SPEEDS_SAME_ALTITUDE+j][2] + (1-phi)*look_up_tab[index_altitude+j][2];
 80021e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021e2:	1f5a      	subs	r2, r3, #5
 80021e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e6:	441a      	add	r2, r3
 80021e8:	4950      	ldr	r1, [pc, #320]	; (800232c <angle_tab+0x270>)
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	3308      	adds	r3, #8
 80021f6:	ed93 7a00 	vldr	s14, [r3]
 80021fa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80021fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002206:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800220a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800220e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002212:	441a      	add	r2, r3
 8002214:	4945      	ldr	r1, [pc, #276]	; (800232c <angle_tab+0x270>)
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	3308      	adds	r3, #8
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800222a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002236:	4413      	add	r3, r2
 8002238:	3b40      	subs	r3, #64	; 0x40
 800223a:	edc3 7a00 	vstr	s15, [r3]
		for(j=0;j<TABLE_DIFF_SPEEDS_SAME_ALTITUDE; j++)
 800223e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002240:	3301      	adds	r3, #1
 8002242:	643b      	str	r3, [r7, #64]	; 0x40
 8002244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002246:	2b04      	cmp	r3, #4
 8002248:	dd9b      	ble.n	8002182 <angle_tab+0xc6>
		}

		int index_speed = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(speed < mean_speed_vector[0])
 800224e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002252:	edd7 7a00 	vldr	s15, [r7]
 8002256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800225a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225e:	dd02      	ble.n	8002266 <angle_tab+0x1aa>
		{
			return 0.0;
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	e058      	b.n	8002318 <angle_tab+0x25c>
		}
		else if(speed > mean_speed_vector[TABLE_DIFF_SPEEDS_SAME_ALTITUDE-1])
 8002266:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800226a:	edd7 7a00 	vldr	s15, [r7]
 800226e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002276:	d501      	bpl.n	800227c <angle_tab+0x1c0>
		{
			return (float)MAX_OPENING_DEG;
 8002278:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <angle_tab+0x274>)
 800227a:	e04d      	b.n	8002318 <angle_tab+0x25c>
		}
		else
		{
			while(mean_speed_vector[index_speed] < speed)
 800227c:	e002      	b.n	8002284 <angle_tab+0x1c8>
			{
				index_speed += 1;
 800227e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002280:	3301      	adds	r3, #1
 8002282:	63fb      	str	r3, [r7, #60]	; 0x3c
			while(mean_speed_vector[index_speed] < speed)
 8002284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800228c:	4413      	add	r3, r2
 800228e:	3b2c      	subs	r3, #44	; 0x2c
 8002290:	ed93 7a00 	vldr	s14, [r3]
 8002294:	edd7 7a00 	vldr	s15, [r7]
 8002298:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	d4ed      	bmi.n	800227e <angle_tab+0x1c2>
			}
			float theta = (speed - mean_speed_vector[index_speed-1])/(mean_speed_vector[index_speed]);
 80022a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a4:	3b01      	subs	r3, #1
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80022ac:	4413      	add	r3, r2
 80022ae:	3b2c      	subs	r3, #44	; 0x2c
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	ed97 7a00 	vldr	s14, [r7]
 80022b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80022c4:	4413      	add	r3, r2
 80022c6:	3b2c      	subs	r3, #44	; 0x2c
 80022c8:	ed93 7a00 	vldr	s14, [r3]
 80022cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			float mean_angle = theta*mean_angle_vector[index_speed-1] + (1-theta)*mean_angle_vector[index_speed];
 80022d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d6:	3b01      	subs	r3, #1
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80022de:	4413      	add	r3, r2
 80022e0:	3b40      	subs	r3, #64	; 0x40
 80022e2:	ed93 7a00 	vldr	s14, [r3]
 80022e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80022ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022f2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80022f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80022fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002302:	4413      	add	r3, r2
 8002304:	3b40      	subs	r3, #64	; 0x40
 8002306:	edd3 7a00 	vldr	s15, [r3]
 800230a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800230e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002312:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			return mean_angle;
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	ee07 3a90 	vmov	s15, r3
		}
	}
}
 800231c:	eeb0 0a67 	vmov.f32	s0, s15
 8002320:	374c      	adds	r7, #76	; 0x4c
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000008 	.word	0x20000008
 8002330:	42733333 	.word	0x42733333
 8002334:	00000000 	.word	0x00000000

08002338 <command_aerobrake_controller>:


void command_aerobrake_controller(float altitude, float speed)
{
 8002338:	b5b0      	push	{r4, r5, r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af00      	add	r7, sp, #0
 800233e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002342:	edc7 0a00 	vstr	s1, [r7]
	float angle_flaps_c = angle_tab(altitude, speed);
 8002346:	edd7 0a00 	vldr	s1, [r7]
 800234a:	ed97 0a01 	vldr	s0, [r7, #4]
 800234e:	f7ff feb5 	bl	80020bc <angle_tab>
 8002352:	ed87 0a08 	vstr	s0, [r7, #32]
//    float opt_act_position_deg = 0.0;
    int opt_act_position_inc = tab_deg_to_inc_converter(flaps2motor(angle_flaps_c));
 8002356:	ed97 0a08 	vldr	s0, [r7, #32]
 800235a:	f7ff fc65 	bl	8001c28 <flaps2motor>
 800235e:	eef0 7a40 	vmov.f32	s15, s0
 8002362:	eeb0 0a67 	vmov.f32	s0, s15
 8002366:	f7ff fbe7 	bl	8001b38 <tab_deg_to_inc_converter>
 800236a:	61f8      	str	r0, [r7, #28]
    int central_inc_max_margins = tab_deg_to_inc_converter(flaps2motor(Central_angle_max_margins));
 800236c:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8002438 <command_aerobrake_controller+0x100>
 8002370:	f7ff fc5a 	bl	8001c28 <flaps2motor>
 8002374:	eef0 7a40 	vmov.f32	s15, s0
 8002378:	eeb0 0a67 	vmov.f32	s0, s15
 800237c:	f7ff fbdc 	bl	8001b38 <tab_deg_to_inc_converter>
 8002380:	61b8      	str	r0, [r7, #24]
    int full_close_inc = tab_deg_to_inc_converter(flaps2motor(0.0));
 8002382:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800243c <command_aerobrake_controller+0x104>
 8002386:	f7ff fc4f 	bl	8001c28 <flaps2motor>
 800238a:	eef0 7a40 	vmov.f32	s15, s0
 800238e:	eeb0 0a67 	vmov.f32	s0, s15
 8002392:	f7ff fbd1 	bl	8001b38 <tab_deg_to_inc_converter>
 8002396:	6178      	str	r0, [r7, #20]
    int full_open_inc = tab_deg_to_inc_converter(flaps2motor(MAX_OPENING_DEG));
 8002398:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8002440 <command_aerobrake_controller+0x108>
 800239c:	f7ff fc44 	bl	8001c28 <flaps2motor>
 80023a0:	eef0 7a40 	vmov.f32	s15, s0
 80023a4:	eeb0 0a67 	vmov.f32	s0, s15
 80023a8:	f7ff fbc6 	bl	8001b38 <tab_deg_to_inc_converter>
 80023ac:	6138      	str	r0, [r7, #16]
    int inc_error = central_inc_max_margins - opt_act_position_inc;
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	60fb      	str	r3, [r7, #12]
    int command_inc;

    // PAS DE CONTROLE PID si on est en dehors de la bande de controle;
    //pas de accumulation de l'erreur non-plus, pour éviter le wipe-out.
    //On passe en mode controle PID que lorsque l'on est à l'intérieur de la bande de controle
    if(opt_act_position_inc <= full_close_inc || opt_act_position_inc >= full_open_inc)
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	dd03      	ble.n	80023c6 <command_aerobrake_controller+0x8e>
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	db02      	blt.n	80023cc <command_aerobrake_controller+0x94>
    {
    	command_inc = opt_act_position_inc;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ca:	e027      	b.n	800241c <command_aerobrake_controller+0xe4>
    }
    else
    {
//        correction_margin_error_integration += inc_error;
//        command_inc = opt_act_position_inc - Kp_correction_margin*inc_error - Td_correction_margin*(inc_error-correction_margin_last_error) - Ki_correction_margin*correction_margin_error_integration;
        command_inc = opt_act_position_inc - Kp_correction_margin*inc_error;
 80023cc:	69f8      	ldr	r0, [r7, #28]
 80023ce:	f7fe f8b1 	bl	8000534 <__aeabi_i2d>
 80023d2:	4604      	mov	r4, r0
 80023d4:	460d      	mov	r5, r1
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f7fe f8ac 	bl	8000534 <__aeabi_i2d>
 80023dc:	a314      	add	r3, pc, #80	; (adr r3, 8002430 <command_aerobrake_controller+0xf8>)
 80023de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e2:	f7fe f90d 	bl	8000600 <__aeabi_dmul>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4620      	mov	r0, r4
 80023ec:	4629      	mov	r1, r5
 80023ee:	f7fd ff53 	bl	8000298 <__aeabi_dsub>
 80023f2:	4603      	mov	r3, r0
 80023f4:	460c      	mov	r4, r1
 80023f6:	4618      	mov	r0, r3
 80023f8:	4621      	mov	r1, r4
 80023fa:	f7fe fbb1 	bl	8000b60 <__aeabi_d2iz>
 80023fe:	4603      	mov	r3, r0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
        if(command_inc <= full_close_inc)
 8002402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	429a      	cmp	r2, r3
 8002408:	dc02      	bgt.n	8002410 <command_aerobrake_controller+0xd8>
        	command_inc = full_close_inc;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
 800240e:	e005      	b.n	800241c <command_aerobrake_controller+0xe4>
        else if(command_inc >= full_open_inc)
 8002410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	429a      	cmp	r2, r3
 8002416:	db01      	blt.n	800241c <command_aerobrake_controller+0xe4>
        	command_inc = full_open_inc;
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
    }
//    correction_margin_last_error = inc_error;

    motor_goto_position_inc(command_inc);
 800241c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800241e:	f7ff fd71 	bl	8001f04 <motor_goto_position_inc>
    return;
 8002422:	bf00      	nop
}
 8002424:	3728      	adds	r7, #40	; 0x28
 8002426:	46bd      	mov	sp, r7
 8002428:	bdb0      	pop	{r4, r5, r7, pc}
 800242a:	bf00      	nop
 800242c:	f3af 8000 	nop.w
 8002430:	33333333 	.word	0x33333333
 8002434:	3fd33333 	.word	0x3fd33333
 8002438:	42300000 	.word	0x42300000
 800243c:	00000000 	.word	0x00000000
 8002440:	42733333 	.word	0x42733333

08002444 <SystemClock_Config>:
 * @brief System Clock Configuration
 * @retval None
 */
void
SystemClock_Config (void)
{
 8002444:	b530      	push	{r4, r5, lr}
 8002446:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  /**Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE()
 8002448:	2200      	movs	r2, #0
 800244a:	4b27      	ldr	r3, [pc, #156]	; (80024e8 <SystemClock_Config+0xa4>)
 800244c:	9201      	str	r2, [sp, #4]
 800244e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002450:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002454:	6419      	str	r1, [r3, #64]	; 0x40
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  ;

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002458:	4924      	ldr	r1, [pc, #144]	; (80024ec <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE()
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002462:	9202      	str	r2, [sp, #8]
 8002464:	680b      	ldr	r3, [r1, #0]
 8002466:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800246a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800246e:	600b      	str	r3, [r1, #0]
 8002470:	680b      	ldr	r3, [r1, #0]
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002472:	920f      	str	r2, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002474:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002478:	9302      	str	r3, [sp, #8]
 800247a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800247c:	2301      	movs	r3, #1
 800247e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002480:	2310      	movs	r3, #16
 8002482:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002484:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002486:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800248a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 800248c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800248e:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002490:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 8002492:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002494:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002496:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002498:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800249a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 800249c:	f7fe ff0e 	bl	80012bc <HAL_RCC_OscConfig>
 80024a0:	b100      	cbz	r0, 80024a4 <SystemClock_Config+0x60>
 80024a2:	e7fe      	b.n	80024a2 <SystemClock_Config+0x5e>
      _Error_Handler (__FILE__, __LINE__);
    }

  /**Initializes the CPU, AHB and APB busses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80024a4:	230f      	movs	r3, #15
 80024a6:	9303      	str	r3, [sp, #12]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024a8:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024ae:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024b0:	4621      	mov	r1, r4
 80024b2:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024b4:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024b6:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024b8:	f7ff f8b0 	bl	800161c <HAL_RCC_ClockConfig>
 80024bc:	4604      	mov	r4, r0
 80024be:	b100      	cbz	r0, 80024c2 <SystemClock_Config+0x7e>
 80024c0:	e7fe      	b.n	80024c0 <SystemClock_Config+0x7c>
      _Error_Handler (__FILE__, __LINE__);
    }

  /**Configure the Systick interrupt time
   */
  HAL_SYSTICK_Config (HAL_RCC_GetHCLKFreq () / 1000);
 80024c2:	f7ff f945 	bl	8001750 <HAL_RCC_GetHCLKFreq>
 80024c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80024ce:	f7fe fdf1 	bl	80010b4 <HAL_SYSTICK_Config>

  /**Configure the Systick
   */
  HAL_SYSTICK_CLKSourceConfig (SYSTICK_CLKSOURCE_HCLK);
 80024d2:	4628      	mov	r0, r5
 80024d4:	f7fe fe04 	bl	80010e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority (SysTick_IRQn, 0, 0);
 80024d8:	4622      	mov	r2, r4
 80024da:	4621      	mov	r1, r4
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	f7fe fdb4 	bl	800104c <HAL_NVIC_SetPriority>
}
 80024e4:	b015      	add	sp, #84	; 0x54
 80024e6:	bd30      	pop	{r4, r5, pc}
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40007000 	.word	0x40007000

080024f0 <main>:
{
 80024f0:	b500      	push	{lr}
 80024f2:	b08b      	sub	sp, #44	; 0x2c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE()
 80024f4:	2400      	movs	r4, #0
  HAL_Init ();
 80024f6:	f7fe fd57 	bl	8000fa8 <HAL_Init>
  SystemClock_Config ();
 80024fa:	f7ff ffa3 	bl	8002444 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE()
 80024fe:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <main+0xd4>)
 8002500:	9401      	str	r4, [sp, #4]
 8002502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  ;
  __HAL_RCC_GPIOB_CLK_ENABLE()
  ;

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002504:	4830      	ldr	r0, [pc, #192]	; (80025c8 <main+0xd8>)
  huart1.Instance = USART1;
 8002506:	4d31      	ldr	r5, [pc, #196]	; (80025cc <main+0xdc>)
  __HAL_RCC_GPIOC_CLK_ENABLE()
 8002508:	f042 0204 	orr.w	r2, r2, #4
 800250c:	631a      	str	r2, [r3, #48]	; 0x30
 800250e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002510:	f002 0204 	and.w	r2, r2, #4
 8002514:	9201      	str	r2, [sp, #4]
 8002516:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE()
 8002518:	9402      	str	r4, [sp, #8]
 800251a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800251c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002520:	631a      	str	r2, [r3, #48]	; 0x30
 8002522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002524:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002528:	9202      	str	r2, [sp, #8]
 800252a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE()
 800252c:	9403      	str	r4, [sp, #12]
 800252e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002530:	f042 0201 	orr.w	r2, r2, #1
 8002534:	631a      	str	r2, [r3, #48]	; 0x30
 8002536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002538:	f002 0201 	and.w	r2, r2, #1
 800253c:	9203      	str	r2, [sp, #12]
 800253e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE()
 8002540:	9404      	str	r4, [sp, #16]
 8002542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002544:	f042 0202 	orr.w	r2, r2, #2
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002550:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE()
 8002552:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002554:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE()
 8002556:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002558:	f7fe feaa 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800255c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002560:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init (B1_GPIO_Port, &GPIO_InitStruct);
 8002562:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002564:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <main+0xe0>)
  HAL_GPIO_Init (B1_GPIO_Port, &GPIO_InitStruct);
 8002566:	481b      	ldr	r0, [pc, #108]	; (80025d4 <main+0xe4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002568:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init (B1_GPIO_Port, &GPIO_InitStruct);
 800256c:	f7fe fdca 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002570:	2320      	movs	r3, #32
 8002572:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init (LD2_GPIO_Port, &GPIO_InitStruct);
 8002574:	4814      	ldr	r0, [pc, #80]	; (80025c8 <main+0xd8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002578:	2301      	movs	r3, #1
  HAL_GPIO_Init (LD2_GPIO_Port, &GPIO_InitStruct);
 800257a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init (LD2_GPIO_Port, &GPIO_InitStruct);
 8002580:	f7fe fdc0 	bl	8001104 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 9600; // 115200
 8002584:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <main+0xe8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002586:	60ac      	str	r4, [r5, #8]
  huart1.Init.BaudRate = 9600; // 115200
 8002588:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800258c:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_UART_Init (&huart1) != HAL_OK)
 8002590:	4628      	mov	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002592:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002594:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002596:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002598:	616b      	str	r3, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800259a:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800259c:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init (&huart1) != HAL_OK)
 800259e:	f7ff fa3f 	bl	8001a20 <HAL_UART_Init>
 80025a2:	b100      	cbz	r0, 80025a6 <main+0xb6>
 80025a4:	e7fe      	b.n	80025a4 <main+0xb4>
  HAL_UART_Init(&huart1);
 80025a6:	4628      	mov	r0, r5
 80025a8:	f7ff fa3a 	bl	8001a20 <HAL_UART_Init>
  aerobrakes_control_init();
 80025ac:	f7ff fcd0 	bl	8001f50 <aerobrakes_control_init>
  aerobrake_helloworld();
 80025b0:	f7ff fd68 	bl	8002084 <aerobrake_helloworld>
  command_aerobrake_controller(1200.0, 250.0); // Should be somewhere in between
 80025b4:	eddf 0a09 	vldr	s1, [pc, #36]	; 80025dc <main+0xec>
 80025b8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80025e0 <main+0xf0>
 80025bc:	f7ff febc 	bl	8002338 <command_aerobrake_controller>
 80025c0:	e7fe      	b.n	80025c0 <main+0xd0>
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40020000 	.word	0x40020000
 80025cc:	2000181c 	.word	0x2000181c
 80025d0:	10210000 	.word	0x10210000
 80025d4:	40020800 	.word	0x40020800
 80025d8:	40011000 	.word	0x40011000
 80025dc:	437a0000 	.word	0x437a0000
 80025e0:	44960000 	.word	0x44960000

080025e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025e6:	2007      	movs	r0, #7
 80025e8:	f7fe fd1e 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80025ec:	2200      	movs	r2, #0
 80025ee:	4611      	mov	r1, r2
 80025f0:	f06f 000b 	mvn.w	r0, #11
 80025f4:	f7fe fd2a 	bl	800104c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80025f8:	2200      	movs	r2, #0
 80025fa:	4611      	mov	r1, r2
 80025fc:	f06f 000a 	mvn.w	r0, #10
 8002600:	f7fe fd24 	bl	800104c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002604:	2200      	movs	r2, #0
 8002606:	4611      	mov	r1, r2
 8002608:	f06f 0009 	mvn.w	r0, #9
 800260c:	f7fe fd1e 	bl	800104c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	4611      	mov	r1, r2
 8002614:	f06f 0004 	mvn.w	r0, #4
 8002618:	f7fe fd18 	bl	800104c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800261c:	2200      	movs	r2, #0
 800261e:	4611      	mov	r1, r2
 8002620:	f06f 0003 	mvn.w	r0, #3
 8002624:	f7fe fd12 	bl	800104c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002628:	2200      	movs	r2, #0
 800262a:	4611      	mov	r1, r2
 800262c:	f06f 0001 	mvn.w	r0, #1
 8002630:	f7fe fd0c 	bl	800104c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002634:	2200      	movs	r2, #0
 8002636:	4611      	mov	r1, r2
 8002638:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002640:	f7fe bd04 	b.w	800104c <HAL_NVIC_SetPriority>

08002644 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002644:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002646:	6802      	ldr	r2, [r0, #0]
 8002648:	4b10      	ldr	r3, [pc, #64]	; (800268c <HAL_UART_MspInit+0x48>)
 800264a:	429a      	cmp	r2, r3
 800264c:	d11a      	bne.n	8002684 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002654:	480f      	ldr	r0, [pc, #60]	; (8002694 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002656:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002658:	f042 0210 	orr.w	r2, r2, #16
 800265c:	645a      	str	r2, [r3, #68]	; 0x44
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002668:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800266c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	2302      	movs	r3, #2
 8002670:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002672:	2301      	movs	r3, #1
 8002674:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002676:	2303      	movs	r3, #3
 8002678:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800267c:	2307      	movs	r3, #7
 800267e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002680:	f7fe fd40 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002684:	b007      	add	sp, #28
 8002686:	f85d fb04 	ldr.w	pc, [sp], #4
 800268a:	bf00      	nop
 800268c:	40011000 	.word	0x40011000
 8002690:	40023800 	.word	0x40023800
 8002694:	40020000 	.word	0x40020000

08002698 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002698:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800269a:	f7fe fc9f 	bl	8000fdc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800269e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80026a2:	f7fe bd2a 	b.w	80010fa <HAL_SYSTICK_IRQHandler>
	...

080026a8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a8:	490f      	ldr	r1, [pc, #60]	; (80026e8 <SystemInit+0x40>)
 80026aa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80026ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <SystemInit+0x44>)
 80026b8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026ba:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80026bc:	f042 0201 	orr.w	r2, r2, #1
 80026c0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80026c2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80026ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026ce:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80026d0:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <SystemInit+0x48>)
 80026d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026da:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80026dc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80026e2:	608b      	str	r3, [r1, #8]
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000ed00 	.word	0xe000ed00
 80026ec:	40023800 	.word	0x40023800
 80026f0:	24003010 	.word	0x24003010

080026f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800272c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026fa:	e003      	b.n	8002704 <LoopCopyDataInit>

080026fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002700:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002702:	3104      	adds	r1, #4

08002704 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002704:	480b      	ldr	r0, [pc, #44]	; (8002734 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002708:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800270a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800270c:	d3f6      	bcc.n	80026fc <CopyDataInit>
  ldr  r2, =_sbss
 800270e:	4a0b      	ldr	r2, [pc, #44]	; (800273c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002710:	e002      	b.n	8002718 <LoopFillZerobss>

08002712 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002712:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002714:	f842 3b04 	str.w	r3, [r2], #4

08002718 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800271a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800271c:	d3f9      	bcc.n	8002712 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800271e:	f7ff ffc3 	bl	80026a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002722:	f000 f811 	bl	8002748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002726:	f7ff fee3 	bl	80024f0 <main>
  bx  lr    
 800272a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800272c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002730:	080045c8 	.word	0x080045c8
  ldr  r0, =_sdata
 8002734:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002738:	200017e4 	.word	0x200017e4
  ldr  r2, =_sbss
 800273c:	200017e4 	.word	0x200017e4
  ldr  r3, = _ebss
 8002740:	20001860 	.word	0x20001860

08002744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002744:	e7fe      	b.n	8002744 <ADC_IRQHandler>
	...

08002748 <__libc_init_array>:
 8002748:	b570      	push	{r4, r5, r6, lr}
 800274a:	4e0d      	ldr	r6, [pc, #52]	; (8002780 <__libc_init_array+0x38>)
 800274c:	4c0d      	ldr	r4, [pc, #52]	; (8002784 <__libc_init_array+0x3c>)
 800274e:	1ba4      	subs	r4, r4, r6
 8002750:	10a4      	asrs	r4, r4, #2
 8002752:	2500      	movs	r5, #0
 8002754:	42a5      	cmp	r5, r4
 8002756:	d109      	bne.n	800276c <__libc_init_array+0x24>
 8002758:	4e0b      	ldr	r6, [pc, #44]	; (8002788 <__libc_init_array+0x40>)
 800275a:	4c0c      	ldr	r4, [pc, #48]	; (800278c <__libc_init_array+0x44>)
 800275c:	f001 fde4 	bl	8004328 <_init>
 8002760:	1ba4      	subs	r4, r4, r6
 8002762:	10a4      	asrs	r4, r4, #2
 8002764:	2500      	movs	r5, #0
 8002766:	42a5      	cmp	r5, r4
 8002768:	d105      	bne.n	8002776 <__libc_init_array+0x2e>
 800276a:	bd70      	pop	{r4, r5, r6, pc}
 800276c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002770:	4798      	blx	r3
 8002772:	3501      	adds	r5, #1
 8002774:	e7ee      	b.n	8002754 <__libc_init_array+0xc>
 8002776:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800277a:	4798      	blx	r3
 800277c:	3501      	adds	r5, #1
 800277e:	e7f2      	b.n	8002766 <__libc_init_array+0x1e>
 8002780:	080045c0 	.word	0x080045c0
 8002784:	080045c0 	.word	0x080045c0
 8002788:	080045c0 	.word	0x080045c0
 800278c:	080045c4 	.word	0x080045c4

08002790 <siprintf>:
 8002790:	b40e      	push	{r1, r2, r3}
 8002792:	b500      	push	{lr}
 8002794:	b09c      	sub	sp, #112	; 0x70
 8002796:	f44f 7102 	mov.w	r1, #520	; 0x208
 800279a:	ab1d      	add	r3, sp, #116	; 0x74
 800279c:	f8ad 1014 	strh.w	r1, [sp, #20]
 80027a0:	9002      	str	r0, [sp, #8]
 80027a2:	9006      	str	r0, [sp, #24]
 80027a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027a8:	480a      	ldr	r0, [pc, #40]	; (80027d4 <siprintf+0x44>)
 80027aa:	9104      	str	r1, [sp, #16]
 80027ac:	9107      	str	r1, [sp, #28]
 80027ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80027b6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80027ba:	6800      	ldr	r0, [r0, #0]
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	a902      	add	r1, sp, #8
 80027c0:	f000 f866 	bl	8002890 <_svfiprintf_r>
 80027c4:	9b02      	ldr	r3, [sp, #8]
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
 80027ca:	b01c      	add	sp, #112	; 0x70
 80027cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80027d0:	b003      	add	sp, #12
 80027d2:	4770      	bx	lr
 80027d4:	2000177c 	.word	0x2000177c

080027d8 <__ssputs_r>:
 80027d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027dc:	688e      	ldr	r6, [r1, #8]
 80027de:	429e      	cmp	r6, r3
 80027e0:	4682      	mov	sl, r0
 80027e2:	460c      	mov	r4, r1
 80027e4:	4691      	mov	r9, r2
 80027e6:	4698      	mov	r8, r3
 80027e8:	d835      	bhi.n	8002856 <__ssputs_r+0x7e>
 80027ea:	898a      	ldrh	r2, [r1, #12]
 80027ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027f0:	d031      	beq.n	8002856 <__ssputs_r+0x7e>
 80027f2:	6825      	ldr	r5, [r4, #0]
 80027f4:	6909      	ldr	r1, [r1, #16]
 80027f6:	1a6f      	subs	r7, r5, r1
 80027f8:	6965      	ldr	r5, [r4, #20]
 80027fa:	2302      	movs	r3, #2
 80027fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002800:	fb95 f5f3 	sdiv	r5, r5, r3
 8002804:	f108 0301 	add.w	r3, r8, #1
 8002808:	443b      	add	r3, r7
 800280a:	429d      	cmp	r5, r3
 800280c:	bf38      	it	cc
 800280e:	461d      	movcc	r5, r3
 8002810:	0553      	lsls	r3, r2, #21
 8002812:	d531      	bpl.n	8002878 <__ssputs_r+0xa0>
 8002814:	4629      	mov	r1, r5
 8002816:	f000 fb39 	bl	8002e8c <_malloc_r>
 800281a:	4606      	mov	r6, r0
 800281c:	b950      	cbnz	r0, 8002834 <__ssputs_r+0x5c>
 800281e:	230c      	movs	r3, #12
 8002820:	f8ca 3000 	str.w	r3, [sl]
 8002824:	89a3      	ldrh	r3, [r4, #12]
 8002826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800282a:	81a3      	strh	r3, [r4, #12]
 800282c:	f04f 30ff 	mov.w	r0, #4294967295
 8002830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002834:	463a      	mov	r2, r7
 8002836:	6921      	ldr	r1, [r4, #16]
 8002838:	f000 fab4 	bl	8002da4 <memcpy>
 800283c:	89a3      	ldrh	r3, [r4, #12]
 800283e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002846:	81a3      	strh	r3, [r4, #12]
 8002848:	6126      	str	r6, [r4, #16]
 800284a:	6165      	str	r5, [r4, #20]
 800284c:	443e      	add	r6, r7
 800284e:	1bed      	subs	r5, r5, r7
 8002850:	6026      	str	r6, [r4, #0]
 8002852:	60a5      	str	r5, [r4, #8]
 8002854:	4646      	mov	r6, r8
 8002856:	4546      	cmp	r6, r8
 8002858:	bf28      	it	cs
 800285a:	4646      	movcs	r6, r8
 800285c:	4632      	mov	r2, r6
 800285e:	4649      	mov	r1, r9
 8002860:	6820      	ldr	r0, [r4, #0]
 8002862:	f000 faaa 	bl	8002dba <memmove>
 8002866:	68a3      	ldr	r3, [r4, #8]
 8002868:	1b9b      	subs	r3, r3, r6
 800286a:	60a3      	str	r3, [r4, #8]
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	441e      	add	r6, r3
 8002870:	6026      	str	r6, [r4, #0]
 8002872:	2000      	movs	r0, #0
 8002874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002878:	462a      	mov	r2, r5
 800287a:	f000 fb65 	bl	8002f48 <_realloc_r>
 800287e:	4606      	mov	r6, r0
 8002880:	2800      	cmp	r0, #0
 8002882:	d1e1      	bne.n	8002848 <__ssputs_r+0x70>
 8002884:	6921      	ldr	r1, [r4, #16]
 8002886:	4650      	mov	r0, sl
 8002888:	f000 fab2 	bl	8002df0 <_free_r>
 800288c:	e7c7      	b.n	800281e <__ssputs_r+0x46>
	...

08002890 <_svfiprintf_r>:
 8002890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002894:	b09d      	sub	sp, #116	; 0x74
 8002896:	4680      	mov	r8, r0
 8002898:	9303      	str	r3, [sp, #12]
 800289a:	898b      	ldrh	r3, [r1, #12]
 800289c:	061c      	lsls	r4, r3, #24
 800289e:	460d      	mov	r5, r1
 80028a0:	4616      	mov	r6, r2
 80028a2:	d50f      	bpl.n	80028c4 <_svfiprintf_r+0x34>
 80028a4:	690b      	ldr	r3, [r1, #16]
 80028a6:	b96b      	cbnz	r3, 80028c4 <_svfiprintf_r+0x34>
 80028a8:	2140      	movs	r1, #64	; 0x40
 80028aa:	f000 faef 	bl	8002e8c <_malloc_r>
 80028ae:	6028      	str	r0, [r5, #0]
 80028b0:	6128      	str	r0, [r5, #16]
 80028b2:	b928      	cbnz	r0, 80028c0 <_svfiprintf_r+0x30>
 80028b4:	230c      	movs	r3, #12
 80028b6:	f8c8 3000 	str.w	r3, [r8]
 80028ba:	f04f 30ff 	mov.w	r0, #4294967295
 80028be:	e0c5      	b.n	8002a4c <_svfiprintf_r+0x1bc>
 80028c0:	2340      	movs	r3, #64	; 0x40
 80028c2:	616b      	str	r3, [r5, #20]
 80028c4:	2300      	movs	r3, #0
 80028c6:	9309      	str	r3, [sp, #36]	; 0x24
 80028c8:	2320      	movs	r3, #32
 80028ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028ce:	2330      	movs	r3, #48	; 0x30
 80028d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028d4:	f04f 0b01 	mov.w	fp, #1
 80028d8:	4637      	mov	r7, r6
 80028da:	463c      	mov	r4, r7
 80028dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d13c      	bne.n	800295e <_svfiprintf_r+0xce>
 80028e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80028e8:	d00b      	beq.n	8002902 <_svfiprintf_r+0x72>
 80028ea:	4653      	mov	r3, sl
 80028ec:	4632      	mov	r2, r6
 80028ee:	4629      	mov	r1, r5
 80028f0:	4640      	mov	r0, r8
 80028f2:	f7ff ff71 	bl	80027d8 <__ssputs_r>
 80028f6:	3001      	adds	r0, #1
 80028f8:	f000 80a3 	beq.w	8002a42 <_svfiprintf_r+0x1b2>
 80028fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028fe:	4453      	add	r3, sl
 8002900:	9309      	str	r3, [sp, #36]	; 0x24
 8002902:	783b      	ldrb	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 809c 	beq.w	8002a42 <_svfiprintf_r+0x1b2>
 800290a:	2300      	movs	r3, #0
 800290c:	f04f 32ff 	mov.w	r2, #4294967295
 8002910:	9304      	str	r3, [sp, #16]
 8002912:	9307      	str	r3, [sp, #28]
 8002914:	9205      	str	r2, [sp, #20]
 8002916:	9306      	str	r3, [sp, #24]
 8002918:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800291c:	931a      	str	r3, [sp, #104]	; 0x68
 800291e:	2205      	movs	r2, #5
 8002920:	7821      	ldrb	r1, [r4, #0]
 8002922:	4850      	ldr	r0, [pc, #320]	; (8002a64 <_svfiprintf_r+0x1d4>)
 8002924:	f7fd fc64 	bl	80001f0 <memchr>
 8002928:	1c67      	adds	r7, r4, #1
 800292a:	9b04      	ldr	r3, [sp, #16]
 800292c:	b9d8      	cbnz	r0, 8002966 <_svfiprintf_r+0xd6>
 800292e:	06d9      	lsls	r1, r3, #27
 8002930:	bf44      	itt	mi
 8002932:	2220      	movmi	r2, #32
 8002934:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002938:	071a      	lsls	r2, r3, #28
 800293a:	bf44      	itt	mi
 800293c:	222b      	movmi	r2, #43	; 0x2b
 800293e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002942:	7822      	ldrb	r2, [r4, #0]
 8002944:	2a2a      	cmp	r2, #42	; 0x2a
 8002946:	d016      	beq.n	8002976 <_svfiprintf_r+0xe6>
 8002948:	9a07      	ldr	r2, [sp, #28]
 800294a:	2100      	movs	r1, #0
 800294c:	200a      	movs	r0, #10
 800294e:	4627      	mov	r7, r4
 8002950:	3401      	adds	r4, #1
 8002952:	783b      	ldrb	r3, [r7, #0]
 8002954:	3b30      	subs	r3, #48	; 0x30
 8002956:	2b09      	cmp	r3, #9
 8002958:	d951      	bls.n	80029fe <_svfiprintf_r+0x16e>
 800295a:	b1c9      	cbz	r1, 8002990 <_svfiprintf_r+0x100>
 800295c:	e011      	b.n	8002982 <_svfiprintf_r+0xf2>
 800295e:	2b25      	cmp	r3, #37	; 0x25
 8002960:	d0c0      	beq.n	80028e4 <_svfiprintf_r+0x54>
 8002962:	4627      	mov	r7, r4
 8002964:	e7b9      	b.n	80028da <_svfiprintf_r+0x4a>
 8002966:	4a3f      	ldr	r2, [pc, #252]	; (8002a64 <_svfiprintf_r+0x1d4>)
 8002968:	1a80      	subs	r0, r0, r2
 800296a:	fa0b f000 	lsl.w	r0, fp, r0
 800296e:	4318      	orrs	r0, r3
 8002970:	9004      	str	r0, [sp, #16]
 8002972:	463c      	mov	r4, r7
 8002974:	e7d3      	b.n	800291e <_svfiprintf_r+0x8e>
 8002976:	9a03      	ldr	r2, [sp, #12]
 8002978:	1d11      	adds	r1, r2, #4
 800297a:	6812      	ldr	r2, [r2, #0]
 800297c:	9103      	str	r1, [sp, #12]
 800297e:	2a00      	cmp	r2, #0
 8002980:	db01      	blt.n	8002986 <_svfiprintf_r+0xf6>
 8002982:	9207      	str	r2, [sp, #28]
 8002984:	e004      	b.n	8002990 <_svfiprintf_r+0x100>
 8002986:	4252      	negs	r2, r2
 8002988:	f043 0302 	orr.w	r3, r3, #2
 800298c:	9207      	str	r2, [sp, #28]
 800298e:	9304      	str	r3, [sp, #16]
 8002990:	783b      	ldrb	r3, [r7, #0]
 8002992:	2b2e      	cmp	r3, #46	; 0x2e
 8002994:	d10e      	bne.n	80029b4 <_svfiprintf_r+0x124>
 8002996:	787b      	ldrb	r3, [r7, #1]
 8002998:	2b2a      	cmp	r3, #42	; 0x2a
 800299a:	f107 0101 	add.w	r1, r7, #1
 800299e:	d132      	bne.n	8002a06 <_svfiprintf_r+0x176>
 80029a0:	9b03      	ldr	r3, [sp, #12]
 80029a2:	1d1a      	adds	r2, r3, #4
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	9203      	str	r2, [sp, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bfb8      	it	lt
 80029ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80029b0:	3702      	adds	r7, #2
 80029b2:	9305      	str	r3, [sp, #20]
 80029b4:	4c2c      	ldr	r4, [pc, #176]	; (8002a68 <_svfiprintf_r+0x1d8>)
 80029b6:	7839      	ldrb	r1, [r7, #0]
 80029b8:	2203      	movs	r2, #3
 80029ba:	4620      	mov	r0, r4
 80029bc:	f7fd fc18 	bl	80001f0 <memchr>
 80029c0:	b138      	cbz	r0, 80029d2 <_svfiprintf_r+0x142>
 80029c2:	2340      	movs	r3, #64	; 0x40
 80029c4:	1b00      	subs	r0, r0, r4
 80029c6:	fa03 f000 	lsl.w	r0, r3, r0
 80029ca:	9b04      	ldr	r3, [sp, #16]
 80029cc:	4303      	orrs	r3, r0
 80029ce:	9304      	str	r3, [sp, #16]
 80029d0:	3701      	adds	r7, #1
 80029d2:	7839      	ldrb	r1, [r7, #0]
 80029d4:	4825      	ldr	r0, [pc, #148]	; (8002a6c <_svfiprintf_r+0x1dc>)
 80029d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029da:	2206      	movs	r2, #6
 80029dc:	1c7e      	adds	r6, r7, #1
 80029de:	f7fd fc07 	bl	80001f0 <memchr>
 80029e2:	2800      	cmp	r0, #0
 80029e4:	d035      	beq.n	8002a52 <_svfiprintf_r+0x1c2>
 80029e6:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <_svfiprintf_r+0x1e0>)
 80029e8:	b9fb      	cbnz	r3, 8002a2a <_svfiprintf_r+0x19a>
 80029ea:	9b03      	ldr	r3, [sp, #12]
 80029ec:	3307      	adds	r3, #7
 80029ee:	f023 0307 	bic.w	r3, r3, #7
 80029f2:	3308      	adds	r3, #8
 80029f4:	9303      	str	r3, [sp, #12]
 80029f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029f8:	444b      	add	r3, r9
 80029fa:	9309      	str	r3, [sp, #36]	; 0x24
 80029fc:	e76c      	b.n	80028d8 <_svfiprintf_r+0x48>
 80029fe:	fb00 3202 	mla	r2, r0, r2, r3
 8002a02:	2101      	movs	r1, #1
 8002a04:	e7a3      	b.n	800294e <_svfiprintf_r+0xbe>
 8002a06:	2300      	movs	r3, #0
 8002a08:	9305      	str	r3, [sp, #20]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	240a      	movs	r4, #10
 8002a0e:	460f      	mov	r7, r1
 8002a10:	3101      	adds	r1, #1
 8002a12:	783a      	ldrb	r2, [r7, #0]
 8002a14:	3a30      	subs	r2, #48	; 0x30
 8002a16:	2a09      	cmp	r2, #9
 8002a18:	d903      	bls.n	8002a22 <_svfiprintf_r+0x192>
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ca      	beq.n	80029b4 <_svfiprintf_r+0x124>
 8002a1e:	9005      	str	r0, [sp, #20]
 8002a20:	e7c8      	b.n	80029b4 <_svfiprintf_r+0x124>
 8002a22:	fb04 2000 	mla	r0, r4, r0, r2
 8002a26:	2301      	movs	r3, #1
 8002a28:	e7f1      	b.n	8002a0e <_svfiprintf_r+0x17e>
 8002a2a:	ab03      	add	r3, sp, #12
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	462a      	mov	r2, r5
 8002a30:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <_svfiprintf_r+0x1e4>)
 8002a32:	a904      	add	r1, sp, #16
 8002a34:	4640      	mov	r0, r8
 8002a36:	f3af 8000 	nop.w
 8002a3a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002a3e:	4681      	mov	r9, r0
 8002a40:	d1d9      	bne.n	80029f6 <_svfiprintf_r+0x166>
 8002a42:	89ab      	ldrh	r3, [r5, #12]
 8002a44:	065b      	lsls	r3, r3, #25
 8002a46:	f53f af38 	bmi.w	80028ba <_svfiprintf_r+0x2a>
 8002a4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a4c:	b01d      	add	sp, #116	; 0x74
 8002a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a52:	ab03      	add	r3, sp, #12
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	462a      	mov	r2, r5
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <_svfiprintf_r+0x1e4>)
 8002a5a:	a904      	add	r1, sp, #16
 8002a5c:	4640      	mov	r0, r8
 8002a5e:	f000 f881 	bl	8002b64 <_printf_i>
 8002a62:	e7ea      	b.n	8002a3a <_svfiprintf_r+0x1aa>
 8002a64:	080043a8 	.word	0x080043a8
 8002a68:	080043ae 	.word	0x080043ae
 8002a6c:	080043b2 	.word	0x080043b2
 8002a70:	00000000 	.word	0x00000000
 8002a74:	080027d9 	.word	0x080027d9

08002a78 <_printf_common>:
 8002a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a7c:	4691      	mov	r9, r2
 8002a7e:	461f      	mov	r7, r3
 8002a80:	688a      	ldr	r2, [r1, #8]
 8002a82:	690b      	ldr	r3, [r1, #16]
 8002a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	bfb8      	it	lt
 8002a8c:	4613      	movlt	r3, r2
 8002a8e:	f8c9 3000 	str.w	r3, [r9]
 8002a92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a96:	4606      	mov	r6, r0
 8002a98:	460c      	mov	r4, r1
 8002a9a:	b112      	cbz	r2, 8002aa2 <_printf_common+0x2a>
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f8c9 3000 	str.w	r3, [r9]
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	0699      	lsls	r1, r3, #26
 8002aa6:	bf42      	ittt	mi
 8002aa8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002aac:	3302      	addmi	r3, #2
 8002aae:	f8c9 3000 	strmi.w	r3, [r9]
 8002ab2:	6825      	ldr	r5, [r4, #0]
 8002ab4:	f015 0506 	ands.w	r5, r5, #6
 8002ab8:	d107      	bne.n	8002aca <_printf_common+0x52>
 8002aba:	f104 0a19 	add.w	sl, r4, #25
 8002abe:	68e3      	ldr	r3, [r4, #12]
 8002ac0:	f8d9 2000 	ldr.w	r2, [r9]
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	429d      	cmp	r5, r3
 8002ac8:	db29      	blt.n	8002b1e <_printf_common+0xa6>
 8002aca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ace:	6822      	ldr	r2, [r4, #0]
 8002ad0:	3300      	adds	r3, #0
 8002ad2:	bf18      	it	ne
 8002ad4:	2301      	movne	r3, #1
 8002ad6:	0692      	lsls	r2, r2, #26
 8002ad8:	d42e      	bmi.n	8002b38 <_printf_common+0xc0>
 8002ada:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ade:	4639      	mov	r1, r7
 8002ae0:	4630      	mov	r0, r6
 8002ae2:	47c0      	blx	r8
 8002ae4:	3001      	adds	r0, #1
 8002ae6:	d021      	beq.n	8002b2c <_printf_common+0xb4>
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	68e5      	ldr	r5, [r4, #12]
 8002aec:	f8d9 2000 	ldr.w	r2, [r9]
 8002af0:	f003 0306 	and.w	r3, r3, #6
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	bf08      	it	eq
 8002af8:	1aad      	subeq	r5, r5, r2
 8002afa:	68a3      	ldr	r3, [r4, #8]
 8002afc:	6922      	ldr	r2, [r4, #16]
 8002afe:	bf0c      	ite	eq
 8002b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b04:	2500      	movne	r5, #0
 8002b06:	4293      	cmp	r3, r2
 8002b08:	bfc4      	itt	gt
 8002b0a:	1a9b      	subgt	r3, r3, r2
 8002b0c:	18ed      	addgt	r5, r5, r3
 8002b0e:	f04f 0900 	mov.w	r9, #0
 8002b12:	341a      	adds	r4, #26
 8002b14:	454d      	cmp	r5, r9
 8002b16:	d11b      	bne.n	8002b50 <_printf_common+0xd8>
 8002b18:	2000      	movs	r0, #0
 8002b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b1e:	2301      	movs	r3, #1
 8002b20:	4652      	mov	r2, sl
 8002b22:	4639      	mov	r1, r7
 8002b24:	4630      	mov	r0, r6
 8002b26:	47c0      	blx	r8
 8002b28:	3001      	adds	r0, #1
 8002b2a:	d103      	bne.n	8002b34 <_printf_common+0xbc>
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b34:	3501      	adds	r5, #1
 8002b36:	e7c2      	b.n	8002abe <_printf_common+0x46>
 8002b38:	18e1      	adds	r1, r4, r3
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	2030      	movs	r0, #48	; 0x30
 8002b3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b42:	4422      	add	r2, r4
 8002b44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	e7c4      	b.n	8002ada <_printf_common+0x62>
 8002b50:	2301      	movs	r3, #1
 8002b52:	4622      	mov	r2, r4
 8002b54:	4639      	mov	r1, r7
 8002b56:	4630      	mov	r0, r6
 8002b58:	47c0      	blx	r8
 8002b5a:	3001      	adds	r0, #1
 8002b5c:	d0e6      	beq.n	8002b2c <_printf_common+0xb4>
 8002b5e:	f109 0901 	add.w	r9, r9, #1
 8002b62:	e7d7      	b.n	8002b14 <_printf_common+0x9c>

08002b64 <_printf_i>:
 8002b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b68:	4617      	mov	r7, r2
 8002b6a:	7e0a      	ldrb	r2, [r1, #24]
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	2a6e      	cmp	r2, #110	; 0x6e
 8002b70:	4698      	mov	r8, r3
 8002b72:	4606      	mov	r6, r0
 8002b74:	460c      	mov	r4, r1
 8002b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b78:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002b7c:	f000 80bc 	beq.w	8002cf8 <_printf_i+0x194>
 8002b80:	d81a      	bhi.n	8002bb8 <_printf_i+0x54>
 8002b82:	2a63      	cmp	r2, #99	; 0x63
 8002b84:	d02e      	beq.n	8002be4 <_printf_i+0x80>
 8002b86:	d80a      	bhi.n	8002b9e <_printf_i+0x3a>
 8002b88:	2a00      	cmp	r2, #0
 8002b8a:	f000 80c8 	beq.w	8002d1e <_printf_i+0x1ba>
 8002b8e:	2a58      	cmp	r2, #88	; 0x58
 8002b90:	f000 808a 	beq.w	8002ca8 <_printf_i+0x144>
 8002b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b98:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002b9c:	e02a      	b.n	8002bf4 <_printf_i+0x90>
 8002b9e:	2a64      	cmp	r2, #100	; 0x64
 8002ba0:	d001      	beq.n	8002ba6 <_printf_i+0x42>
 8002ba2:	2a69      	cmp	r2, #105	; 0x69
 8002ba4:	d1f6      	bne.n	8002b94 <_printf_i+0x30>
 8002ba6:	6821      	ldr	r1, [r4, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002bae:	d023      	beq.n	8002bf8 <_printf_i+0x94>
 8002bb0:	1d11      	adds	r1, r2, #4
 8002bb2:	6019      	str	r1, [r3, #0]
 8002bb4:	6813      	ldr	r3, [r2, #0]
 8002bb6:	e027      	b.n	8002c08 <_printf_i+0xa4>
 8002bb8:	2a73      	cmp	r2, #115	; 0x73
 8002bba:	f000 80b4 	beq.w	8002d26 <_printf_i+0x1c2>
 8002bbe:	d808      	bhi.n	8002bd2 <_printf_i+0x6e>
 8002bc0:	2a6f      	cmp	r2, #111	; 0x6f
 8002bc2:	d02a      	beq.n	8002c1a <_printf_i+0xb6>
 8002bc4:	2a70      	cmp	r2, #112	; 0x70
 8002bc6:	d1e5      	bne.n	8002b94 <_printf_i+0x30>
 8002bc8:	680a      	ldr	r2, [r1, #0]
 8002bca:	f042 0220 	orr.w	r2, r2, #32
 8002bce:	600a      	str	r2, [r1, #0]
 8002bd0:	e003      	b.n	8002bda <_printf_i+0x76>
 8002bd2:	2a75      	cmp	r2, #117	; 0x75
 8002bd4:	d021      	beq.n	8002c1a <_printf_i+0xb6>
 8002bd6:	2a78      	cmp	r2, #120	; 0x78
 8002bd8:	d1dc      	bne.n	8002b94 <_printf_i+0x30>
 8002bda:	2278      	movs	r2, #120	; 0x78
 8002bdc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002be0:	496e      	ldr	r1, [pc, #440]	; (8002d9c <_printf_i+0x238>)
 8002be2:	e064      	b.n	8002cae <_printf_i+0x14a>
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002bea:	1d11      	adds	r1, r2, #4
 8002bec:	6019      	str	r1, [r3, #0]
 8002bee:	6813      	ldr	r3, [r2, #0]
 8002bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0a3      	b.n	8002d40 <_printf_i+0x1dc>
 8002bf8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002bfc:	f102 0104 	add.w	r1, r2, #4
 8002c00:	6019      	str	r1, [r3, #0]
 8002c02:	d0d7      	beq.n	8002bb4 <_printf_i+0x50>
 8002c04:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	da03      	bge.n	8002c14 <_printf_i+0xb0>
 8002c0c:	222d      	movs	r2, #45	; 0x2d
 8002c0e:	425b      	negs	r3, r3
 8002c10:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002c14:	4962      	ldr	r1, [pc, #392]	; (8002da0 <_printf_i+0x23c>)
 8002c16:	220a      	movs	r2, #10
 8002c18:	e017      	b.n	8002c4a <_printf_i+0xe6>
 8002c1a:	6820      	ldr	r0, [r4, #0]
 8002c1c:	6819      	ldr	r1, [r3, #0]
 8002c1e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002c22:	d003      	beq.n	8002c2c <_printf_i+0xc8>
 8002c24:	1d08      	adds	r0, r1, #4
 8002c26:	6018      	str	r0, [r3, #0]
 8002c28:	680b      	ldr	r3, [r1, #0]
 8002c2a:	e006      	b.n	8002c3a <_printf_i+0xd6>
 8002c2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c30:	f101 0004 	add.w	r0, r1, #4
 8002c34:	6018      	str	r0, [r3, #0]
 8002c36:	d0f7      	beq.n	8002c28 <_printf_i+0xc4>
 8002c38:	880b      	ldrh	r3, [r1, #0]
 8002c3a:	4959      	ldr	r1, [pc, #356]	; (8002da0 <_printf_i+0x23c>)
 8002c3c:	2a6f      	cmp	r2, #111	; 0x6f
 8002c3e:	bf14      	ite	ne
 8002c40:	220a      	movne	r2, #10
 8002c42:	2208      	moveq	r2, #8
 8002c44:	2000      	movs	r0, #0
 8002c46:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002c4a:	6865      	ldr	r5, [r4, #4]
 8002c4c:	60a5      	str	r5, [r4, #8]
 8002c4e:	2d00      	cmp	r5, #0
 8002c50:	f2c0 809c 	blt.w	8002d8c <_printf_i+0x228>
 8002c54:	6820      	ldr	r0, [r4, #0]
 8002c56:	f020 0004 	bic.w	r0, r0, #4
 8002c5a:	6020      	str	r0, [r4, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d13f      	bne.n	8002ce0 <_printf_i+0x17c>
 8002c60:	2d00      	cmp	r5, #0
 8002c62:	f040 8095 	bne.w	8002d90 <_printf_i+0x22c>
 8002c66:	4675      	mov	r5, lr
 8002c68:	2a08      	cmp	r2, #8
 8002c6a:	d10b      	bne.n	8002c84 <_printf_i+0x120>
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	07da      	lsls	r2, r3, #31
 8002c70:	d508      	bpl.n	8002c84 <_printf_i+0x120>
 8002c72:	6923      	ldr	r3, [r4, #16]
 8002c74:	6862      	ldr	r2, [r4, #4]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	bfde      	ittt	le
 8002c7a:	2330      	movle	r3, #48	; 0x30
 8002c7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c84:	ebae 0305 	sub.w	r3, lr, r5
 8002c88:	6123      	str	r3, [r4, #16]
 8002c8a:	f8cd 8000 	str.w	r8, [sp]
 8002c8e:	463b      	mov	r3, r7
 8002c90:	aa03      	add	r2, sp, #12
 8002c92:	4621      	mov	r1, r4
 8002c94:	4630      	mov	r0, r6
 8002c96:	f7ff feef 	bl	8002a78 <_printf_common>
 8002c9a:	3001      	adds	r0, #1
 8002c9c:	d155      	bne.n	8002d4a <_printf_i+0x1e6>
 8002c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca2:	b005      	add	sp, #20
 8002ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ca8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002cac:	493c      	ldr	r1, [pc, #240]	; (8002da0 <_printf_i+0x23c>)
 8002cae:	6822      	ldr	r2, [r4, #0]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002cb6:	f100 0504 	add.w	r5, r0, #4
 8002cba:	601d      	str	r5, [r3, #0]
 8002cbc:	d001      	beq.n	8002cc2 <_printf_i+0x15e>
 8002cbe:	6803      	ldr	r3, [r0, #0]
 8002cc0:	e002      	b.n	8002cc8 <_printf_i+0x164>
 8002cc2:	0655      	lsls	r5, r2, #25
 8002cc4:	d5fb      	bpl.n	8002cbe <_printf_i+0x15a>
 8002cc6:	8803      	ldrh	r3, [r0, #0]
 8002cc8:	07d0      	lsls	r0, r2, #31
 8002cca:	bf44      	itt	mi
 8002ccc:	f042 0220 	orrmi.w	r2, r2, #32
 8002cd0:	6022      	strmi	r2, [r4, #0]
 8002cd2:	b91b      	cbnz	r3, 8002cdc <_printf_i+0x178>
 8002cd4:	6822      	ldr	r2, [r4, #0]
 8002cd6:	f022 0220 	bic.w	r2, r2, #32
 8002cda:	6022      	str	r2, [r4, #0]
 8002cdc:	2210      	movs	r2, #16
 8002cde:	e7b1      	b.n	8002c44 <_printf_i+0xe0>
 8002ce0:	4675      	mov	r5, lr
 8002ce2:	fbb3 f0f2 	udiv	r0, r3, r2
 8002ce6:	fb02 3310 	mls	r3, r2, r0, r3
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2800      	cmp	r0, #0
 8002cf4:	d1f5      	bne.n	8002ce2 <_printf_i+0x17e>
 8002cf6:	e7b7      	b.n	8002c68 <_printf_i+0x104>
 8002cf8:	6808      	ldr	r0, [r1, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	6949      	ldr	r1, [r1, #20]
 8002cfe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002d02:	d004      	beq.n	8002d0e <_printf_i+0x1aa>
 8002d04:	1d10      	adds	r0, r2, #4
 8002d06:	6018      	str	r0, [r3, #0]
 8002d08:	6813      	ldr	r3, [r2, #0]
 8002d0a:	6019      	str	r1, [r3, #0]
 8002d0c:	e007      	b.n	8002d1e <_printf_i+0x1ba>
 8002d0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d12:	f102 0004 	add.w	r0, r2, #4
 8002d16:	6018      	str	r0, [r3, #0]
 8002d18:	6813      	ldr	r3, [r2, #0]
 8002d1a:	d0f6      	beq.n	8002d0a <_printf_i+0x1a6>
 8002d1c:	8019      	strh	r1, [r3, #0]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	6123      	str	r3, [r4, #16]
 8002d22:	4675      	mov	r5, lr
 8002d24:	e7b1      	b.n	8002c8a <_printf_i+0x126>
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	1d11      	adds	r1, r2, #4
 8002d2a:	6019      	str	r1, [r3, #0]
 8002d2c:	6815      	ldr	r5, [r2, #0]
 8002d2e:	6862      	ldr	r2, [r4, #4]
 8002d30:	2100      	movs	r1, #0
 8002d32:	4628      	mov	r0, r5
 8002d34:	f7fd fa5c 	bl	80001f0 <memchr>
 8002d38:	b108      	cbz	r0, 8002d3e <_printf_i+0x1da>
 8002d3a:	1b40      	subs	r0, r0, r5
 8002d3c:	6060      	str	r0, [r4, #4]
 8002d3e:	6863      	ldr	r3, [r4, #4]
 8002d40:	6123      	str	r3, [r4, #16]
 8002d42:	2300      	movs	r3, #0
 8002d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d48:	e79f      	b.n	8002c8a <_printf_i+0x126>
 8002d4a:	6923      	ldr	r3, [r4, #16]
 8002d4c:	462a      	mov	r2, r5
 8002d4e:	4639      	mov	r1, r7
 8002d50:	4630      	mov	r0, r6
 8002d52:	47c0      	blx	r8
 8002d54:	3001      	adds	r0, #1
 8002d56:	d0a2      	beq.n	8002c9e <_printf_i+0x13a>
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	079b      	lsls	r3, r3, #30
 8002d5c:	d507      	bpl.n	8002d6e <_printf_i+0x20a>
 8002d5e:	2500      	movs	r5, #0
 8002d60:	f104 0919 	add.w	r9, r4, #25
 8002d64:	68e3      	ldr	r3, [r4, #12]
 8002d66:	9a03      	ldr	r2, [sp, #12]
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	429d      	cmp	r5, r3
 8002d6c:	db05      	blt.n	8002d7a <_printf_i+0x216>
 8002d6e:	68e0      	ldr	r0, [r4, #12]
 8002d70:	9b03      	ldr	r3, [sp, #12]
 8002d72:	4298      	cmp	r0, r3
 8002d74:	bfb8      	it	lt
 8002d76:	4618      	movlt	r0, r3
 8002d78:	e793      	b.n	8002ca2 <_printf_i+0x13e>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	464a      	mov	r2, r9
 8002d7e:	4639      	mov	r1, r7
 8002d80:	4630      	mov	r0, r6
 8002d82:	47c0      	blx	r8
 8002d84:	3001      	adds	r0, #1
 8002d86:	d08a      	beq.n	8002c9e <_printf_i+0x13a>
 8002d88:	3501      	adds	r5, #1
 8002d8a:	e7eb      	b.n	8002d64 <_printf_i+0x200>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1a7      	bne.n	8002ce0 <_printf_i+0x17c>
 8002d90:	780b      	ldrb	r3, [r1, #0]
 8002d92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d9a:	e765      	b.n	8002c68 <_printf_i+0x104>
 8002d9c:	080043ca 	.word	0x080043ca
 8002da0:	080043b9 	.word	0x080043b9

08002da4 <memcpy>:
 8002da4:	b510      	push	{r4, lr}
 8002da6:	1e43      	subs	r3, r0, #1
 8002da8:	440a      	add	r2, r1
 8002daa:	4291      	cmp	r1, r2
 8002dac:	d100      	bne.n	8002db0 <memcpy+0xc>
 8002dae:	bd10      	pop	{r4, pc}
 8002db0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002db4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002db8:	e7f7      	b.n	8002daa <memcpy+0x6>

08002dba <memmove>:
 8002dba:	4288      	cmp	r0, r1
 8002dbc:	b510      	push	{r4, lr}
 8002dbe:	eb01 0302 	add.w	r3, r1, r2
 8002dc2:	d803      	bhi.n	8002dcc <memmove+0x12>
 8002dc4:	1e42      	subs	r2, r0, #1
 8002dc6:	4299      	cmp	r1, r3
 8002dc8:	d10c      	bne.n	8002de4 <memmove+0x2a>
 8002dca:	bd10      	pop	{r4, pc}
 8002dcc:	4298      	cmp	r0, r3
 8002dce:	d2f9      	bcs.n	8002dc4 <memmove+0xa>
 8002dd0:	1881      	adds	r1, r0, r2
 8002dd2:	1ad2      	subs	r2, r2, r3
 8002dd4:	42d3      	cmn	r3, r2
 8002dd6:	d100      	bne.n	8002dda <memmove+0x20>
 8002dd8:	bd10      	pop	{r4, pc}
 8002dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002dde:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002de2:	e7f7      	b.n	8002dd4 <memmove+0x1a>
 8002de4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002de8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002dec:	e7eb      	b.n	8002dc6 <memmove+0xc>
	...

08002df0 <_free_r>:
 8002df0:	b538      	push	{r3, r4, r5, lr}
 8002df2:	4605      	mov	r5, r0
 8002df4:	2900      	cmp	r1, #0
 8002df6:	d045      	beq.n	8002e84 <_free_r+0x94>
 8002df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dfc:	1f0c      	subs	r4, r1, #4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	bfb8      	it	lt
 8002e02:	18e4      	addlt	r4, r4, r3
 8002e04:	f000 f8d6 	bl	8002fb4 <__malloc_lock>
 8002e08:	4a1f      	ldr	r2, [pc, #124]	; (8002e88 <_free_r+0x98>)
 8002e0a:	6813      	ldr	r3, [r2, #0]
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	b933      	cbnz	r3, 8002e1e <_free_r+0x2e>
 8002e10:	6063      	str	r3, [r4, #4]
 8002e12:	6014      	str	r4, [r2, #0]
 8002e14:	4628      	mov	r0, r5
 8002e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e1a:	f000 b8cc 	b.w	8002fb6 <__malloc_unlock>
 8002e1e:	42a3      	cmp	r3, r4
 8002e20:	d90c      	bls.n	8002e3c <_free_r+0x4c>
 8002e22:	6821      	ldr	r1, [r4, #0]
 8002e24:	1862      	adds	r2, r4, r1
 8002e26:	4293      	cmp	r3, r2
 8002e28:	bf04      	itt	eq
 8002e2a:	681a      	ldreq	r2, [r3, #0]
 8002e2c:	685b      	ldreq	r3, [r3, #4]
 8002e2e:	6063      	str	r3, [r4, #4]
 8002e30:	bf04      	itt	eq
 8002e32:	1852      	addeq	r2, r2, r1
 8002e34:	6022      	streq	r2, [r4, #0]
 8002e36:	6004      	str	r4, [r0, #0]
 8002e38:	e7ec      	b.n	8002e14 <_free_r+0x24>
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	b10a      	cbz	r2, 8002e44 <_free_r+0x54>
 8002e40:	42a2      	cmp	r2, r4
 8002e42:	d9fa      	bls.n	8002e3a <_free_r+0x4a>
 8002e44:	6819      	ldr	r1, [r3, #0]
 8002e46:	1858      	adds	r0, r3, r1
 8002e48:	42a0      	cmp	r0, r4
 8002e4a:	d10b      	bne.n	8002e64 <_free_r+0x74>
 8002e4c:	6820      	ldr	r0, [r4, #0]
 8002e4e:	4401      	add	r1, r0
 8002e50:	1858      	adds	r0, r3, r1
 8002e52:	4282      	cmp	r2, r0
 8002e54:	6019      	str	r1, [r3, #0]
 8002e56:	d1dd      	bne.n	8002e14 <_free_r+0x24>
 8002e58:	6810      	ldr	r0, [r2, #0]
 8002e5a:	6852      	ldr	r2, [r2, #4]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	4401      	add	r1, r0
 8002e60:	6019      	str	r1, [r3, #0]
 8002e62:	e7d7      	b.n	8002e14 <_free_r+0x24>
 8002e64:	d902      	bls.n	8002e6c <_free_r+0x7c>
 8002e66:	230c      	movs	r3, #12
 8002e68:	602b      	str	r3, [r5, #0]
 8002e6a:	e7d3      	b.n	8002e14 <_free_r+0x24>
 8002e6c:	6820      	ldr	r0, [r4, #0]
 8002e6e:	1821      	adds	r1, r4, r0
 8002e70:	428a      	cmp	r2, r1
 8002e72:	bf04      	itt	eq
 8002e74:	6811      	ldreq	r1, [r2, #0]
 8002e76:	6852      	ldreq	r2, [r2, #4]
 8002e78:	6062      	str	r2, [r4, #4]
 8002e7a:	bf04      	itt	eq
 8002e7c:	1809      	addeq	r1, r1, r0
 8002e7e:	6021      	streq	r1, [r4, #0]
 8002e80:	605c      	str	r4, [r3, #4]
 8002e82:	e7c7      	b.n	8002e14 <_free_r+0x24>
 8002e84:	bd38      	pop	{r3, r4, r5, pc}
 8002e86:	bf00      	nop
 8002e88:	20001800 	.word	0x20001800

08002e8c <_malloc_r>:
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	1ccd      	adds	r5, r1, #3
 8002e90:	f025 0503 	bic.w	r5, r5, #3
 8002e94:	3508      	adds	r5, #8
 8002e96:	2d0c      	cmp	r5, #12
 8002e98:	bf38      	it	cc
 8002e9a:	250c      	movcc	r5, #12
 8002e9c:	2d00      	cmp	r5, #0
 8002e9e:	4606      	mov	r6, r0
 8002ea0:	db01      	blt.n	8002ea6 <_malloc_r+0x1a>
 8002ea2:	42a9      	cmp	r1, r5
 8002ea4:	d903      	bls.n	8002eae <_malloc_r+0x22>
 8002ea6:	230c      	movs	r3, #12
 8002ea8:	6033      	str	r3, [r6, #0]
 8002eaa:	2000      	movs	r0, #0
 8002eac:	bd70      	pop	{r4, r5, r6, pc}
 8002eae:	f000 f881 	bl	8002fb4 <__malloc_lock>
 8002eb2:	4a23      	ldr	r2, [pc, #140]	; (8002f40 <_malloc_r+0xb4>)
 8002eb4:	6814      	ldr	r4, [r2, #0]
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	b991      	cbnz	r1, 8002ee0 <_malloc_r+0x54>
 8002eba:	4c22      	ldr	r4, [pc, #136]	; (8002f44 <_malloc_r+0xb8>)
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	b91b      	cbnz	r3, 8002ec8 <_malloc_r+0x3c>
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	f000 f867 	bl	8002f94 <_sbrk_r>
 8002ec6:	6020      	str	r0, [r4, #0]
 8002ec8:	4629      	mov	r1, r5
 8002eca:	4630      	mov	r0, r6
 8002ecc:	f000 f862 	bl	8002f94 <_sbrk_r>
 8002ed0:	1c43      	adds	r3, r0, #1
 8002ed2:	d126      	bne.n	8002f22 <_malloc_r+0x96>
 8002ed4:	230c      	movs	r3, #12
 8002ed6:	6033      	str	r3, [r6, #0]
 8002ed8:	4630      	mov	r0, r6
 8002eda:	f000 f86c 	bl	8002fb6 <__malloc_unlock>
 8002ede:	e7e4      	b.n	8002eaa <_malloc_r+0x1e>
 8002ee0:	680b      	ldr	r3, [r1, #0]
 8002ee2:	1b5b      	subs	r3, r3, r5
 8002ee4:	d41a      	bmi.n	8002f1c <_malloc_r+0x90>
 8002ee6:	2b0b      	cmp	r3, #11
 8002ee8:	d90f      	bls.n	8002f0a <_malloc_r+0x7e>
 8002eea:	600b      	str	r3, [r1, #0]
 8002eec:	50cd      	str	r5, [r1, r3]
 8002eee:	18cc      	adds	r4, r1, r3
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	f000 f860 	bl	8002fb6 <__malloc_unlock>
 8002ef6:	f104 000b 	add.w	r0, r4, #11
 8002efa:	1d23      	adds	r3, r4, #4
 8002efc:	f020 0007 	bic.w	r0, r0, #7
 8002f00:	1ac3      	subs	r3, r0, r3
 8002f02:	d01b      	beq.n	8002f3c <_malloc_r+0xb0>
 8002f04:	425a      	negs	r2, r3
 8002f06:	50e2      	str	r2, [r4, r3]
 8002f08:	bd70      	pop	{r4, r5, r6, pc}
 8002f0a:	428c      	cmp	r4, r1
 8002f0c:	bf0d      	iteet	eq
 8002f0e:	6863      	ldreq	r3, [r4, #4]
 8002f10:	684b      	ldrne	r3, [r1, #4]
 8002f12:	6063      	strne	r3, [r4, #4]
 8002f14:	6013      	streq	r3, [r2, #0]
 8002f16:	bf18      	it	ne
 8002f18:	460c      	movne	r4, r1
 8002f1a:	e7e9      	b.n	8002ef0 <_malloc_r+0x64>
 8002f1c:	460c      	mov	r4, r1
 8002f1e:	6849      	ldr	r1, [r1, #4]
 8002f20:	e7ca      	b.n	8002eb8 <_malloc_r+0x2c>
 8002f22:	1cc4      	adds	r4, r0, #3
 8002f24:	f024 0403 	bic.w	r4, r4, #3
 8002f28:	42a0      	cmp	r0, r4
 8002f2a:	d005      	beq.n	8002f38 <_malloc_r+0xac>
 8002f2c:	1a21      	subs	r1, r4, r0
 8002f2e:	4630      	mov	r0, r6
 8002f30:	f000 f830 	bl	8002f94 <_sbrk_r>
 8002f34:	3001      	adds	r0, #1
 8002f36:	d0cd      	beq.n	8002ed4 <_malloc_r+0x48>
 8002f38:	6025      	str	r5, [r4, #0]
 8002f3a:	e7d9      	b.n	8002ef0 <_malloc_r+0x64>
 8002f3c:	bd70      	pop	{r4, r5, r6, pc}
 8002f3e:	bf00      	nop
 8002f40:	20001800 	.word	0x20001800
 8002f44:	20001804 	.word	0x20001804

08002f48 <_realloc_r>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	4607      	mov	r7, r0
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	460e      	mov	r6, r1
 8002f50:	b921      	cbnz	r1, 8002f5c <_realloc_r+0x14>
 8002f52:	4611      	mov	r1, r2
 8002f54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f58:	f7ff bf98 	b.w	8002e8c <_malloc_r>
 8002f5c:	b922      	cbnz	r2, 8002f68 <_realloc_r+0x20>
 8002f5e:	f7ff ff47 	bl	8002df0 <_free_r>
 8002f62:	4625      	mov	r5, r4
 8002f64:	4628      	mov	r0, r5
 8002f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f68:	f000 f826 	bl	8002fb8 <_malloc_usable_size_r>
 8002f6c:	4284      	cmp	r4, r0
 8002f6e:	d90f      	bls.n	8002f90 <_realloc_r+0x48>
 8002f70:	4621      	mov	r1, r4
 8002f72:	4638      	mov	r0, r7
 8002f74:	f7ff ff8a 	bl	8002e8c <_malloc_r>
 8002f78:	4605      	mov	r5, r0
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	d0f2      	beq.n	8002f64 <_realloc_r+0x1c>
 8002f7e:	4631      	mov	r1, r6
 8002f80:	4622      	mov	r2, r4
 8002f82:	f7ff ff0f 	bl	8002da4 <memcpy>
 8002f86:	4631      	mov	r1, r6
 8002f88:	4638      	mov	r0, r7
 8002f8a:	f7ff ff31 	bl	8002df0 <_free_r>
 8002f8e:	e7e9      	b.n	8002f64 <_realloc_r+0x1c>
 8002f90:	4635      	mov	r5, r6
 8002f92:	e7e7      	b.n	8002f64 <_realloc_r+0x1c>

08002f94 <_sbrk_r>:
 8002f94:	b538      	push	{r3, r4, r5, lr}
 8002f96:	4c06      	ldr	r4, [pc, #24]	; (8002fb0 <_sbrk_r+0x1c>)
 8002f98:	2300      	movs	r3, #0
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	6023      	str	r3, [r4, #0]
 8002fa0:	f001 f9b4 	bl	800430c <_sbrk>
 8002fa4:	1c43      	adds	r3, r0, #1
 8002fa6:	d102      	bne.n	8002fae <_sbrk_r+0x1a>
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	b103      	cbz	r3, 8002fae <_sbrk_r+0x1a>
 8002fac:	602b      	str	r3, [r5, #0]
 8002fae:	bd38      	pop	{r3, r4, r5, pc}
 8002fb0:	2000185c 	.word	0x2000185c

08002fb4 <__malloc_lock>:
 8002fb4:	4770      	bx	lr

08002fb6 <__malloc_unlock>:
 8002fb6:	4770      	bx	lr

08002fb8 <_malloc_usable_size_r>:
 8002fb8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	f1a0 0004 	sub.w	r0, r0, #4
 8002fc2:	bfbc      	itt	lt
 8002fc4:	580b      	ldrlt	r3, [r1, r0]
 8002fc6:	18c0      	addlt	r0, r0, r3
 8002fc8:	4770      	bx	lr
 8002fca:	0000      	movs	r0, r0
 8002fcc:	0000      	movs	r0, r0
	...

08002fd0 <cos>:
 8002fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002fd2:	ec51 0b10 	vmov	r0, r1, d0
 8002fd6:	4a1e      	ldr	r2, [pc, #120]	; (8003050 <cos+0x80>)
 8002fd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	dc06      	bgt.n	8002fee <cos+0x1e>
 8002fe0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8003048 <cos+0x78>
 8002fe4:	f000 fb80 	bl	80036e8 <__kernel_cos>
 8002fe8:	ec51 0b10 	vmov	r0, r1, d0
 8002fec:	e007      	b.n	8002ffe <cos+0x2e>
 8002fee:	4a19      	ldr	r2, [pc, #100]	; (8003054 <cos+0x84>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	dd09      	ble.n	8003008 <cos+0x38>
 8002ff4:	ee10 2a10 	vmov	r2, s0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	f7fd f94d 	bl	8000298 <__aeabi_dsub>
 8002ffe:	ec41 0b10 	vmov	d0, r0, r1
 8003002:	b005      	add	sp, #20
 8003004:	f85d fb04 	ldr.w	pc, [sp], #4
 8003008:	4668      	mov	r0, sp
 800300a:	f000 f8c9 	bl	80031a0 <__ieee754_rem_pio2>
 800300e:	f000 0003 	and.w	r0, r0, #3
 8003012:	2801      	cmp	r0, #1
 8003014:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003018:	ed9d 0b00 	vldr	d0, [sp]
 800301c:	d007      	beq.n	800302e <cos+0x5e>
 800301e:	2802      	cmp	r0, #2
 8003020:	d00e      	beq.n	8003040 <cos+0x70>
 8003022:	2800      	cmp	r0, #0
 8003024:	d0de      	beq.n	8002fe4 <cos+0x14>
 8003026:	2001      	movs	r0, #1
 8003028:	f000 ff96 	bl	8003f58 <__kernel_sin>
 800302c:	e7dc      	b.n	8002fe8 <cos+0x18>
 800302e:	f000 ff93 	bl	8003f58 <__kernel_sin>
 8003032:	ec53 2b10 	vmov	r2, r3, d0
 8003036:	ee10 0a10 	vmov	r0, s0
 800303a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800303e:	e7de      	b.n	8002ffe <cos+0x2e>
 8003040:	f000 fb52 	bl	80036e8 <__kernel_cos>
 8003044:	e7f5      	b.n	8003032 <cos+0x62>
 8003046:	bf00      	nop
	...
 8003050:	3fe921fb 	.word	0x3fe921fb
 8003054:	7fefffff 	.word	0x7fefffff

08003058 <sin>:
 8003058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800305a:	ec51 0b10 	vmov	r0, r1, d0
 800305e:	4a20      	ldr	r2, [pc, #128]	; (80030e0 <sin+0x88>)
 8003060:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003064:	4293      	cmp	r3, r2
 8003066:	dc07      	bgt.n	8003078 <sin+0x20>
 8003068:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80030d8 <sin+0x80>
 800306c:	2000      	movs	r0, #0
 800306e:	f000 ff73 	bl	8003f58 <__kernel_sin>
 8003072:	ec51 0b10 	vmov	r0, r1, d0
 8003076:	e007      	b.n	8003088 <sin+0x30>
 8003078:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <sin+0x8c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	dd09      	ble.n	8003092 <sin+0x3a>
 800307e:	ee10 2a10 	vmov	r2, s0
 8003082:	460b      	mov	r3, r1
 8003084:	f7fd f908 	bl	8000298 <__aeabi_dsub>
 8003088:	ec41 0b10 	vmov	d0, r0, r1
 800308c:	b005      	add	sp, #20
 800308e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003092:	4668      	mov	r0, sp
 8003094:	f000 f884 	bl	80031a0 <__ieee754_rem_pio2>
 8003098:	f000 0003 	and.w	r0, r0, #3
 800309c:	2801      	cmp	r0, #1
 800309e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80030a2:	ed9d 0b00 	vldr	d0, [sp]
 80030a6:	d004      	beq.n	80030b2 <sin+0x5a>
 80030a8:	2802      	cmp	r0, #2
 80030aa:	d005      	beq.n	80030b8 <sin+0x60>
 80030ac:	b970      	cbnz	r0, 80030cc <sin+0x74>
 80030ae:	2001      	movs	r0, #1
 80030b0:	e7dd      	b.n	800306e <sin+0x16>
 80030b2:	f000 fb19 	bl	80036e8 <__kernel_cos>
 80030b6:	e7dc      	b.n	8003072 <sin+0x1a>
 80030b8:	2001      	movs	r0, #1
 80030ba:	f000 ff4d 	bl	8003f58 <__kernel_sin>
 80030be:	ec53 2b10 	vmov	r2, r3, d0
 80030c2:	ee10 0a10 	vmov	r0, s0
 80030c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80030ca:	e7dd      	b.n	8003088 <sin+0x30>
 80030cc:	f000 fb0c 	bl	80036e8 <__kernel_cos>
 80030d0:	e7f5      	b.n	80030be <sin+0x66>
 80030d2:	bf00      	nop
 80030d4:	f3af 8000 	nop.w
	...
 80030e0:	3fe921fb 	.word	0x3fe921fb
 80030e4:	7fefffff 	.word	0x7fefffff

080030e8 <sqrt>:
 80030e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030ec:	ed2d 8b02 	vpush	{d8}
 80030f0:	b08b      	sub	sp, #44	; 0x2c
 80030f2:	ec55 4b10 	vmov	r4, r5, d0
 80030f6:	f000 fa45 	bl	8003584 <__ieee754_sqrt>
 80030fa:	4b26      	ldr	r3, [pc, #152]	; (8003194 <sqrt+0xac>)
 80030fc:	eeb0 8a40 	vmov.f32	s16, s0
 8003100:	eef0 8a60 	vmov.f32	s17, s1
 8003104:	f993 6000 	ldrsb.w	r6, [r3]
 8003108:	1c73      	adds	r3, r6, #1
 800310a:	d02a      	beq.n	8003162 <sqrt+0x7a>
 800310c:	4622      	mov	r2, r4
 800310e:	462b      	mov	r3, r5
 8003110:	4620      	mov	r0, r4
 8003112:	4629      	mov	r1, r5
 8003114:	f7fd fd0e 	bl	8000b34 <__aeabi_dcmpun>
 8003118:	4607      	mov	r7, r0
 800311a:	bb10      	cbnz	r0, 8003162 <sqrt+0x7a>
 800311c:	f04f 0800 	mov.w	r8, #0
 8003120:	f04f 0900 	mov.w	r9, #0
 8003124:	4642      	mov	r2, r8
 8003126:	464b      	mov	r3, r9
 8003128:	4620      	mov	r0, r4
 800312a:	4629      	mov	r1, r5
 800312c:	f7fd fcda 	bl	8000ae4 <__aeabi_dcmplt>
 8003130:	b1b8      	cbz	r0, 8003162 <sqrt+0x7a>
 8003132:	2301      	movs	r3, #1
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	4b18      	ldr	r3, [pc, #96]	; (8003198 <sqrt+0xb0>)
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	9708      	str	r7, [sp, #32]
 800313c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003140:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003144:	b9b6      	cbnz	r6, 8003174 <sqrt+0x8c>
 8003146:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800314a:	4668      	mov	r0, sp
 800314c:	f001 f84c 	bl	80041e8 <matherr>
 8003150:	b1d0      	cbz	r0, 8003188 <sqrt+0xa0>
 8003152:	9b08      	ldr	r3, [sp, #32]
 8003154:	b11b      	cbz	r3, 800315e <sqrt+0x76>
 8003156:	f001 f8d3 	bl	8004300 <__errno>
 800315a:	9b08      	ldr	r3, [sp, #32]
 800315c:	6003      	str	r3, [r0, #0]
 800315e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8003162:	eeb0 0a48 	vmov.f32	s0, s16
 8003166:	eef0 0a68 	vmov.f32	s1, s17
 800316a:	b00b      	add	sp, #44	; 0x2c
 800316c:	ecbd 8b02 	vpop	{d8}
 8003170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003174:	4642      	mov	r2, r8
 8003176:	464b      	mov	r3, r9
 8003178:	4640      	mov	r0, r8
 800317a:	4649      	mov	r1, r9
 800317c:	f7fd fb6a 	bl	8000854 <__aeabi_ddiv>
 8003180:	2e02      	cmp	r6, #2
 8003182:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003186:	d1e0      	bne.n	800314a <sqrt+0x62>
 8003188:	f001 f8ba 	bl	8004300 <__errno>
 800318c:	2321      	movs	r3, #33	; 0x21
 800318e:	6003      	str	r3, [r0, #0]
 8003190:	e7df      	b.n	8003152 <sqrt+0x6a>
 8003192:	bf00      	nop
 8003194:	200017e0 	.word	0x200017e0
 8003198:	080043db 	.word	0x080043db
 800319c:	00000000 	.word	0x00000000

080031a0 <__ieee754_rem_pio2>:
 80031a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031a4:	ec57 6b10 	vmov	r6, r7, d0
 80031a8:	4bc3      	ldr	r3, [pc, #780]	; (80034b8 <__ieee754_rem_pio2+0x318>)
 80031aa:	b08d      	sub	sp, #52	; 0x34
 80031ac:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80031b0:	4598      	cmp	r8, r3
 80031b2:	4604      	mov	r4, r0
 80031b4:	9704      	str	r7, [sp, #16]
 80031b6:	dc07      	bgt.n	80031c8 <__ieee754_rem_pio2+0x28>
 80031b8:	2200      	movs	r2, #0
 80031ba:	2300      	movs	r3, #0
 80031bc:	ed84 0b00 	vstr	d0, [r4]
 80031c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80031c4:	2500      	movs	r5, #0
 80031c6:	e027      	b.n	8003218 <__ieee754_rem_pio2+0x78>
 80031c8:	4bbc      	ldr	r3, [pc, #752]	; (80034bc <__ieee754_rem_pio2+0x31c>)
 80031ca:	4598      	cmp	r8, r3
 80031cc:	dc75      	bgt.n	80032ba <__ieee754_rem_pio2+0x11a>
 80031ce:	9b04      	ldr	r3, [sp, #16]
 80031d0:	4dbb      	ldr	r5, [pc, #748]	; (80034c0 <__ieee754_rem_pio2+0x320>)
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	ee10 0a10 	vmov	r0, s0
 80031d8:	a3a9      	add	r3, pc, #676	; (adr r3, 8003480 <__ieee754_rem_pio2+0x2e0>)
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	4639      	mov	r1, r7
 80031e0:	dd36      	ble.n	8003250 <__ieee754_rem_pio2+0xb0>
 80031e2:	f7fd f859 	bl	8000298 <__aeabi_dsub>
 80031e6:	45a8      	cmp	r8, r5
 80031e8:	4606      	mov	r6, r0
 80031ea:	460f      	mov	r7, r1
 80031ec:	d018      	beq.n	8003220 <__ieee754_rem_pio2+0x80>
 80031ee:	a3a6      	add	r3, pc, #664	; (adr r3, 8003488 <__ieee754_rem_pio2+0x2e8>)
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	f7fd f850 	bl	8000298 <__aeabi_dsub>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	e9c4 2300 	strd	r2, r3, [r4]
 8003200:	4630      	mov	r0, r6
 8003202:	4639      	mov	r1, r7
 8003204:	f7fd f848 	bl	8000298 <__aeabi_dsub>
 8003208:	a39f      	add	r3, pc, #636	; (adr r3, 8003488 <__ieee754_rem_pio2+0x2e8>)
 800320a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320e:	f7fd f843 	bl	8000298 <__aeabi_dsub>
 8003212:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003216:	2501      	movs	r5, #1
 8003218:	4628      	mov	r0, r5
 800321a:	b00d      	add	sp, #52	; 0x34
 800321c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003220:	a39b      	add	r3, pc, #620	; (adr r3, 8003490 <__ieee754_rem_pio2+0x2f0>)
 8003222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003226:	f7fd f837 	bl	8000298 <__aeabi_dsub>
 800322a:	a39b      	add	r3, pc, #620	; (adr r3, 8003498 <__ieee754_rem_pio2+0x2f8>)
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	4606      	mov	r6, r0
 8003232:	460f      	mov	r7, r1
 8003234:	f7fd f830 	bl	8000298 <__aeabi_dsub>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	e9c4 2300 	strd	r2, r3, [r4]
 8003240:	4630      	mov	r0, r6
 8003242:	4639      	mov	r1, r7
 8003244:	f7fd f828 	bl	8000298 <__aeabi_dsub>
 8003248:	a393      	add	r3, pc, #588	; (adr r3, 8003498 <__ieee754_rem_pio2+0x2f8>)
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	e7de      	b.n	800320e <__ieee754_rem_pio2+0x6e>
 8003250:	f7fd f824 	bl	800029c <__adddf3>
 8003254:	45a8      	cmp	r8, r5
 8003256:	4606      	mov	r6, r0
 8003258:	460f      	mov	r7, r1
 800325a:	d016      	beq.n	800328a <__ieee754_rem_pio2+0xea>
 800325c:	a38a      	add	r3, pc, #552	; (adr r3, 8003488 <__ieee754_rem_pio2+0x2e8>)
 800325e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003262:	f7fd f81b 	bl	800029c <__adddf3>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	e9c4 2300 	strd	r2, r3, [r4]
 800326e:	4630      	mov	r0, r6
 8003270:	4639      	mov	r1, r7
 8003272:	f7fd f811 	bl	8000298 <__aeabi_dsub>
 8003276:	a384      	add	r3, pc, #528	; (adr r3, 8003488 <__ieee754_rem_pio2+0x2e8>)
 8003278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327c:	f7fd f80e 	bl	800029c <__adddf3>
 8003280:	f04f 35ff 	mov.w	r5, #4294967295
 8003284:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003288:	e7c6      	b.n	8003218 <__ieee754_rem_pio2+0x78>
 800328a:	a381      	add	r3, pc, #516	; (adr r3, 8003490 <__ieee754_rem_pio2+0x2f0>)
 800328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003290:	f7fd f804 	bl	800029c <__adddf3>
 8003294:	a380      	add	r3, pc, #512	; (adr r3, 8003498 <__ieee754_rem_pio2+0x2f8>)
 8003296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329a:	4606      	mov	r6, r0
 800329c:	460f      	mov	r7, r1
 800329e:	f7fc fffd 	bl	800029c <__adddf3>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	e9c4 2300 	strd	r2, r3, [r4]
 80032aa:	4630      	mov	r0, r6
 80032ac:	4639      	mov	r1, r7
 80032ae:	f7fc fff3 	bl	8000298 <__aeabi_dsub>
 80032b2:	a379      	add	r3, pc, #484	; (adr r3, 8003498 <__ieee754_rem_pio2+0x2f8>)
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	e7e0      	b.n	800327c <__ieee754_rem_pio2+0xdc>
 80032ba:	4b82      	ldr	r3, [pc, #520]	; (80034c4 <__ieee754_rem_pio2+0x324>)
 80032bc:	4598      	cmp	r8, r3
 80032be:	f300 80d0 	bgt.w	8003462 <__ieee754_rem_pio2+0x2c2>
 80032c2:	f000 ff03 	bl	80040cc <fabs>
 80032c6:	ec57 6b10 	vmov	r6, r7, d0
 80032ca:	ee10 0a10 	vmov	r0, s0
 80032ce:	a374      	add	r3, pc, #464	; (adr r3, 80034a0 <__ieee754_rem_pio2+0x300>)
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	4639      	mov	r1, r7
 80032d6:	f7fd f993 	bl	8000600 <__aeabi_dmul>
 80032da:	2200      	movs	r2, #0
 80032dc:	4b7a      	ldr	r3, [pc, #488]	; (80034c8 <__ieee754_rem_pio2+0x328>)
 80032de:	f7fc ffdd 	bl	800029c <__adddf3>
 80032e2:	f7fd fc3d 	bl	8000b60 <__aeabi_d2iz>
 80032e6:	4605      	mov	r5, r0
 80032e8:	f7fd f924 	bl	8000534 <__aeabi_i2d>
 80032ec:	a364      	add	r3, pc, #400	; (adr r3, 8003480 <__ieee754_rem_pio2+0x2e0>)
 80032ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032f6:	f7fd f983 	bl	8000600 <__aeabi_dmul>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4630      	mov	r0, r6
 8003300:	4639      	mov	r1, r7
 8003302:	f7fc ffc9 	bl	8000298 <__aeabi_dsub>
 8003306:	a360      	add	r3, pc, #384	; (adr r3, 8003488 <__ieee754_rem_pio2+0x2e8>)
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	4682      	mov	sl, r0
 800330e:	468b      	mov	fp, r1
 8003310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003314:	f7fd f974 	bl	8000600 <__aeabi_dmul>
 8003318:	2d1f      	cmp	r5, #31
 800331a:	4606      	mov	r6, r0
 800331c:	460f      	mov	r7, r1
 800331e:	dc2a      	bgt.n	8003376 <__ieee754_rem_pio2+0x1d6>
 8003320:	1e6a      	subs	r2, r5, #1
 8003322:	4b6a      	ldr	r3, [pc, #424]	; (80034cc <__ieee754_rem_pio2+0x32c>)
 8003324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003328:	4598      	cmp	r8, r3
 800332a:	d024      	beq.n	8003376 <__ieee754_rem_pio2+0x1d6>
 800332c:	4632      	mov	r2, r6
 800332e:	463b      	mov	r3, r7
 8003330:	4650      	mov	r0, sl
 8003332:	4659      	mov	r1, fp
 8003334:	f7fc ffb0 	bl	8000298 <__aeabi_dsub>
 8003338:	e9c4 0100 	strd	r0, r1, [r4]
 800333c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003340:	4650      	mov	r0, sl
 8003342:	4642      	mov	r2, r8
 8003344:	464b      	mov	r3, r9
 8003346:	4659      	mov	r1, fp
 8003348:	f7fc ffa6 	bl	8000298 <__aeabi_dsub>
 800334c:	463b      	mov	r3, r7
 800334e:	4632      	mov	r2, r6
 8003350:	f7fc ffa2 	bl	8000298 <__aeabi_dsub>
 8003354:	9b04      	ldr	r3, [sp, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800335c:	f6bf af5c 	bge.w	8003218 <__ieee754_rem_pio2+0x78>
 8003360:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003364:	6063      	str	r3, [r4, #4]
 8003366:	f8c4 8000 	str.w	r8, [r4]
 800336a:	60a0      	str	r0, [r4, #8]
 800336c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003370:	60e3      	str	r3, [r4, #12]
 8003372:	426d      	negs	r5, r5
 8003374:	e750      	b.n	8003218 <__ieee754_rem_pio2+0x78>
 8003376:	4632      	mov	r2, r6
 8003378:	463b      	mov	r3, r7
 800337a:	4650      	mov	r0, sl
 800337c:	4659      	mov	r1, fp
 800337e:	f7fc ff8b 	bl	8000298 <__aeabi_dsub>
 8003382:	ea4f 5228 	mov.w	r2, r8, asr #20
 8003386:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b10      	cmp	r3, #16
 800338e:	e9c4 0100 	strd	r0, r1, [r4]
 8003392:	9205      	str	r2, [sp, #20]
 8003394:	ddd2      	ble.n	800333c <__ieee754_rem_pio2+0x19c>
 8003396:	a33e      	add	r3, pc, #248	; (adr r3, 8003490 <__ieee754_rem_pio2+0x2f0>)
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033a0:	f7fd f92e 	bl	8000600 <__aeabi_dmul>
 80033a4:	4606      	mov	r6, r0
 80033a6:	460f      	mov	r7, r1
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4650      	mov	r0, sl
 80033ae:	4659      	mov	r1, fp
 80033b0:	f7fc ff72 	bl	8000298 <__aeabi_dsub>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4680      	mov	r8, r0
 80033ba:	4689      	mov	r9, r1
 80033bc:	4650      	mov	r0, sl
 80033be:	4659      	mov	r1, fp
 80033c0:	f7fc ff6a 	bl	8000298 <__aeabi_dsub>
 80033c4:	4632      	mov	r2, r6
 80033c6:	463b      	mov	r3, r7
 80033c8:	f7fc ff66 	bl	8000298 <__aeabi_dsub>
 80033cc:	a332      	add	r3, pc, #200	; (adr r3, 8003498 <__ieee754_rem_pio2+0x2f8>)
 80033ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d2:	4606      	mov	r6, r0
 80033d4:	460f      	mov	r7, r1
 80033d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033da:	f7fd f911 	bl	8000600 <__aeabi_dmul>
 80033de:	4632      	mov	r2, r6
 80033e0:	463b      	mov	r3, r7
 80033e2:	f7fc ff59 	bl	8000298 <__aeabi_dsub>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4606      	mov	r6, r0
 80033ec:	460f      	mov	r7, r1
 80033ee:	4640      	mov	r0, r8
 80033f0:	4649      	mov	r1, r9
 80033f2:	f7fc ff51 	bl	8000298 <__aeabi_dsub>
 80033f6:	9a05      	ldr	r2, [sp, #20]
 80033f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b31      	cmp	r3, #49	; 0x31
 8003400:	e9c4 0100 	strd	r0, r1, [r4]
 8003404:	dd2a      	ble.n	800345c <__ieee754_rem_pio2+0x2bc>
 8003406:	a328      	add	r3, pc, #160	; (adr r3, 80034a8 <__ieee754_rem_pio2+0x308>)
 8003408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003410:	f7fd f8f6 	bl	8000600 <__aeabi_dmul>
 8003414:	4606      	mov	r6, r0
 8003416:	460f      	mov	r7, r1
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4640      	mov	r0, r8
 800341e:	4649      	mov	r1, r9
 8003420:	f7fc ff3a 	bl	8000298 <__aeabi_dsub>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4682      	mov	sl, r0
 800342a:	468b      	mov	fp, r1
 800342c:	4640      	mov	r0, r8
 800342e:	4649      	mov	r1, r9
 8003430:	f7fc ff32 	bl	8000298 <__aeabi_dsub>
 8003434:	4632      	mov	r2, r6
 8003436:	463b      	mov	r3, r7
 8003438:	f7fc ff2e 	bl	8000298 <__aeabi_dsub>
 800343c:	a31c      	add	r3, pc, #112	; (adr r3, 80034b0 <__ieee754_rem_pio2+0x310>)
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	4606      	mov	r6, r0
 8003444:	460f      	mov	r7, r1
 8003446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800344a:	f7fd f8d9 	bl	8000600 <__aeabi_dmul>
 800344e:	4632      	mov	r2, r6
 8003450:	463b      	mov	r3, r7
 8003452:	f7fc ff21 	bl	8000298 <__aeabi_dsub>
 8003456:	4606      	mov	r6, r0
 8003458:	460f      	mov	r7, r1
 800345a:	e767      	b.n	800332c <__ieee754_rem_pio2+0x18c>
 800345c:	46c2      	mov	sl, r8
 800345e:	46cb      	mov	fp, r9
 8003460:	e76c      	b.n	800333c <__ieee754_rem_pio2+0x19c>
 8003462:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <__ieee754_rem_pio2+0x330>)
 8003464:	4598      	cmp	r8, r3
 8003466:	dd35      	ble.n	80034d4 <__ieee754_rem_pio2+0x334>
 8003468:	ee10 2a10 	vmov	r2, s0
 800346c:	463b      	mov	r3, r7
 800346e:	4630      	mov	r0, r6
 8003470:	4639      	mov	r1, r7
 8003472:	f7fc ff11 	bl	8000298 <__aeabi_dsub>
 8003476:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800347a:	e9c4 0100 	strd	r0, r1, [r4]
 800347e:	e6a1      	b.n	80031c4 <__ieee754_rem_pio2+0x24>
 8003480:	54400000 	.word	0x54400000
 8003484:	3ff921fb 	.word	0x3ff921fb
 8003488:	1a626331 	.word	0x1a626331
 800348c:	3dd0b461 	.word	0x3dd0b461
 8003490:	1a600000 	.word	0x1a600000
 8003494:	3dd0b461 	.word	0x3dd0b461
 8003498:	2e037073 	.word	0x2e037073
 800349c:	3ba3198a 	.word	0x3ba3198a
 80034a0:	6dc9c883 	.word	0x6dc9c883
 80034a4:	3fe45f30 	.word	0x3fe45f30
 80034a8:	2e000000 	.word	0x2e000000
 80034ac:	3ba3198a 	.word	0x3ba3198a
 80034b0:	252049c1 	.word	0x252049c1
 80034b4:	397b839a 	.word	0x397b839a
 80034b8:	3fe921fb 	.word	0x3fe921fb
 80034bc:	4002d97b 	.word	0x4002d97b
 80034c0:	3ff921fb 	.word	0x3ff921fb
 80034c4:	413921fb 	.word	0x413921fb
 80034c8:	3fe00000 	.word	0x3fe00000
 80034cc:	080043e0 	.word	0x080043e0
 80034d0:	7fefffff 	.word	0x7fefffff
 80034d4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80034d8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80034dc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80034e0:	4630      	mov	r0, r6
 80034e2:	460f      	mov	r7, r1
 80034e4:	f7fd fb3c 	bl	8000b60 <__aeabi_d2iz>
 80034e8:	f7fd f824 	bl	8000534 <__aeabi_i2d>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4630      	mov	r0, r6
 80034f2:	4639      	mov	r1, r7
 80034f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80034f8:	f7fc fece 	bl	8000298 <__aeabi_dsub>
 80034fc:	2200      	movs	r2, #0
 80034fe:	4b1f      	ldr	r3, [pc, #124]	; (800357c <__ieee754_rem_pio2+0x3dc>)
 8003500:	f7fd f87e 	bl	8000600 <__aeabi_dmul>
 8003504:	460f      	mov	r7, r1
 8003506:	4606      	mov	r6, r0
 8003508:	f7fd fb2a 	bl	8000b60 <__aeabi_d2iz>
 800350c:	f7fd f812 	bl	8000534 <__aeabi_i2d>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4630      	mov	r0, r6
 8003516:	4639      	mov	r1, r7
 8003518:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800351c:	f7fc febc 	bl	8000298 <__aeabi_dsub>
 8003520:	2200      	movs	r2, #0
 8003522:	4b16      	ldr	r3, [pc, #88]	; (800357c <__ieee754_rem_pio2+0x3dc>)
 8003524:	f7fd f86c 	bl	8000600 <__aeabi_dmul>
 8003528:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800352c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003530:	f04f 0803 	mov.w	r8, #3
 8003534:	2600      	movs	r6, #0
 8003536:	2700      	movs	r7, #0
 8003538:	4632      	mov	r2, r6
 800353a:	463b      	mov	r3, r7
 800353c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003540:	f108 3aff 	add.w	sl, r8, #4294967295
 8003544:	f7fd fac4 	bl	8000ad0 <__aeabi_dcmpeq>
 8003548:	b9b0      	cbnz	r0, 8003578 <__ieee754_rem_pio2+0x3d8>
 800354a:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <__ieee754_rem_pio2+0x3e0>)
 800354c:	9301      	str	r3, [sp, #4]
 800354e:	2302      	movs	r3, #2
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	462a      	mov	r2, r5
 8003554:	4643      	mov	r3, r8
 8003556:	4621      	mov	r1, r4
 8003558:	a806      	add	r0, sp, #24
 800355a:	f000 f9ad 	bl	80038b8 <__kernel_rem_pio2>
 800355e:	9b04      	ldr	r3, [sp, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	4605      	mov	r5, r0
 8003564:	f6bf ae58 	bge.w	8003218 <__ieee754_rem_pio2+0x78>
 8003568:	6863      	ldr	r3, [r4, #4]
 800356a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800356e:	6063      	str	r3, [r4, #4]
 8003570:	68e3      	ldr	r3, [r4, #12]
 8003572:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003576:	e6fb      	b.n	8003370 <__ieee754_rem_pio2+0x1d0>
 8003578:	46d0      	mov	r8, sl
 800357a:	e7dd      	b.n	8003538 <__ieee754_rem_pio2+0x398>
 800357c:	41700000 	.word	0x41700000
 8003580:	08004460 	.word	0x08004460

08003584 <__ieee754_sqrt>:
 8003584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003588:	ec55 4b10 	vmov	r4, r5, d0
 800358c:	4e54      	ldr	r6, [pc, #336]	; (80036e0 <__ieee754_sqrt+0x15c>)
 800358e:	43ae      	bics	r6, r5
 8003590:	ee10 0a10 	vmov	r0, s0
 8003594:	462b      	mov	r3, r5
 8003596:	462a      	mov	r2, r5
 8003598:	4621      	mov	r1, r4
 800359a:	d113      	bne.n	80035c4 <__ieee754_sqrt+0x40>
 800359c:	ee10 2a10 	vmov	r2, s0
 80035a0:	462b      	mov	r3, r5
 80035a2:	ee10 0a10 	vmov	r0, s0
 80035a6:	4629      	mov	r1, r5
 80035a8:	f7fd f82a 	bl	8000600 <__aeabi_dmul>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4620      	mov	r0, r4
 80035b2:	4629      	mov	r1, r5
 80035b4:	f7fc fe72 	bl	800029c <__adddf3>
 80035b8:	4604      	mov	r4, r0
 80035ba:	460d      	mov	r5, r1
 80035bc:	ec45 4b10 	vmov	d0, r4, r5
 80035c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035c4:	2d00      	cmp	r5, #0
 80035c6:	dc10      	bgt.n	80035ea <__ieee754_sqrt+0x66>
 80035c8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80035cc:	4330      	orrs	r0, r6
 80035ce:	d0f5      	beq.n	80035bc <__ieee754_sqrt+0x38>
 80035d0:	b15d      	cbz	r5, 80035ea <__ieee754_sqrt+0x66>
 80035d2:	ee10 2a10 	vmov	r2, s0
 80035d6:	462b      	mov	r3, r5
 80035d8:	4620      	mov	r0, r4
 80035da:	4629      	mov	r1, r5
 80035dc:	f7fc fe5c 	bl	8000298 <__aeabi_dsub>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	f7fd f936 	bl	8000854 <__aeabi_ddiv>
 80035e8:	e7e6      	b.n	80035b8 <__ieee754_sqrt+0x34>
 80035ea:	151b      	asrs	r3, r3, #20
 80035ec:	d10c      	bne.n	8003608 <__ieee754_sqrt+0x84>
 80035ee:	2a00      	cmp	r2, #0
 80035f0:	d06d      	beq.n	80036ce <__ieee754_sqrt+0x14a>
 80035f2:	2000      	movs	r0, #0
 80035f4:	02d6      	lsls	r6, r2, #11
 80035f6:	d56e      	bpl.n	80036d6 <__ieee754_sqrt+0x152>
 80035f8:	1e44      	subs	r4, r0, #1
 80035fa:	1b1b      	subs	r3, r3, r4
 80035fc:	f1c0 0420 	rsb	r4, r0, #32
 8003600:	fa21 f404 	lsr.w	r4, r1, r4
 8003604:	4322      	orrs	r2, r4
 8003606:	4081      	lsls	r1, r0
 8003608:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800360c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003610:	07dd      	lsls	r5, r3, #31
 8003612:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003616:	bf42      	ittt	mi
 8003618:	0052      	lslmi	r2, r2, #1
 800361a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800361e:	0049      	lslmi	r1, r1, #1
 8003620:	1058      	asrs	r0, r3, #1
 8003622:	2500      	movs	r5, #0
 8003624:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8003628:	441a      	add	r2, r3
 800362a:	0049      	lsls	r1, r1, #1
 800362c:	2316      	movs	r3, #22
 800362e:	462c      	mov	r4, r5
 8003630:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003634:	19a7      	adds	r7, r4, r6
 8003636:	4297      	cmp	r7, r2
 8003638:	bfde      	ittt	le
 800363a:	1bd2      	suble	r2, r2, r7
 800363c:	19bc      	addle	r4, r7, r6
 800363e:	19ad      	addle	r5, r5, r6
 8003640:	0052      	lsls	r2, r2, #1
 8003642:	3b01      	subs	r3, #1
 8003644:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8003648:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800364c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003650:	d1f0      	bne.n	8003634 <__ieee754_sqrt+0xb0>
 8003652:	f04f 0e20 	mov.w	lr, #32
 8003656:	469c      	mov	ip, r3
 8003658:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800365c:	42a2      	cmp	r2, r4
 800365e:	eb06 070c 	add.w	r7, r6, ip
 8003662:	dc02      	bgt.n	800366a <__ieee754_sqrt+0xe6>
 8003664:	d112      	bne.n	800368c <__ieee754_sqrt+0x108>
 8003666:	428f      	cmp	r7, r1
 8003668:	d810      	bhi.n	800368c <__ieee754_sqrt+0x108>
 800366a:	2f00      	cmp	r7, #0
 800366c:	eb07 0c06 	add.w	ip, r7, r6
 8003670:	da34      	bge.n	80036dc <__ieee754_sqrt+0x158>
 8003672:	f1bc 0f00 	cmp.w	ip, #0
 8003676:	db31      	blt.n	80036dc <__ieee754_sqrt+0x158>
 8003678:	f104 0801 	add.w	r8, r4, #1
 800367c:	1b12      	subs	r2, r2, r4
 800367e:	428f      	cmp	r7, r1
 8003680:	bf88      	it	hi
 8003682:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8003686:	1bc9      	subs	r1, r1, r7
 8003688:	4433      	add	r3, r6
 800368a:	4644      	mov	r4, r8
 800368c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8003690:	f1be 0e01 	subs.w	lr, lr, #1
 8003694:	443a      	add	r2, r7
 8003696:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800369a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800369e:	d1dd      	bne.n	800365c <__ieee754_sqrt+0xd8>
 80036a0:	430a      	orrs	r2, r1
 80036a2:	d006      	beq.n	80036b2 <__ieee754_sqrt+0x12e>
 80036a4:	1c5c      	adds	r4, r3, #1
 80036a6:	bf13      	iteet	ne
 80036a8:	3301      	addne	r3, #1
 80036aa:	3501      	addeq	r5, #1
 80036ac:	4673      	moveq	r3, lr
 80036ae:	f023 0301 	bicne.w	r3, r3, #1
 80036b2:	106a      	asrs	r2, r5, #1
 80036b4:	085b      	lsrs	r3, r3, #1
 80036b6:	07e9      	lsls	r1, r5, #31
 80036b8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80036bc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80036c0:	bf48      	it	mi
 80036c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80036c6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80036ca:	461c      	mov	r4, r3
 80036cc:	e776      	b.n	80035bc <__ieee754_sqrt+0x38>
 80036ce:	0aca      	lsrs	r2, r1, #11
 80036d0:	3b15      	subs	r3, #21
 80036d2:	0549      	lsls	r1, r1, #21
 80036d4:	e78b      	b.n	80035ee <__ieee754_sqrt+0x6a>
 80036d6:	0052      	lsls	r2, r2, #1
 80036d8:	3001      	adds	r0, #1
 80036da:	e78b      	b.n	80035f4 <__ieee754_sqrt+0x70>
 80036dc:	46a0      	mov	r8, r4
 80036de:	e7cd      	b.n	800367c <__ieee754_sqrt+0xf8>
 80036e0:	7ff00000 	.word	0x7ff00000
 80036e4:	00000000 	.word	0x00000000

080036e8 <__kernel_cos>:
 80036e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ec:	ec59 8b10 	vmov	r8, r9, d0
 80036f0:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 80036f4:	b085      	sub	sp, #20
 80036f6:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80036fa:	ed8d 1b00 	vstr	d1, [sp]
 80036fe:	da07      	bge.n	8003710 <__kernel_cos+0x28>
 8003700:	ee10 0a10 	vmov	r0, s0
 8003704:	4649      	mov	r1, r9
 8003706:	f7fd fa2b 	bl	8000b60 <__aeabi_d2iz>
 800370a:	2800      	cmp	r0, #0
 800370c:	f000 80aa 	beq.w	8003864 <__kernel_cos+0x17c>
 8003710:	4642      	mov	r2, r8
 8003712:	464b      	mov	r3, r9
 8003714:	4640      	mov	r0, r8
 8003716:	4649      	mov	r1, r9
 8003718:	f7fc ff72 	bl	8000600 <__aeabi_dmul>
 800371c:	a359      	add	r3, pc, #356	; (adr r3, 8003884 <__kernel_cos+0x19c>)
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	4604      	mov	r4, r0
 8003724:	460d      	mov	r5, r1
 8003726:	f7fc ff6b 	bl	8000600 <__aeabi_dmul>
 800372a:	a358      	add	r3, pc, #352	; (adr r3, 800388c <__kernel_cos+0x1a4>)
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	f7fc fdb4 	bl	800029c <__adddf3>
 8003734:	4622      	mov	r2, r4
 8003736:	462b      	mov	r3, r5
 8003738:	f7fc ff62 	bl	8000600 <__aeabi_dmul>
 800373c:	a355      	add	r3, pc, #340	; (adr r3, 8003894 <__kernel_cos+0x1ac>)
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f7fc fda9 	bl	8000298 <__aeabi_dsub>
 8003746:	4622      	mov	r2, r4
 8003748:	462b      	mov	r3, r5
 800374a:	f7fc ff59 	bl	8000600 <__aeabi_dmul>
 800374e:	a353      	add	r3, pc, #332	; (adr r3, 800389c <__kernel_cos+0x1b4>)
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	f7fc fda2 	bl	800029c <__adddf3>
 8003758:	4622      	mov	r2, r4
 800375a:	462b      	mov	r3, r5
 800375c:	f7fc ff50 	bl	8000600 <__aeabi_dmul>
 8003760:	a350      	add	r3, pc, #320	; (adr r3, 80038a4 <__kernel_cos+0x1bc>)
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	f7fc fd97 	bl	8000298 <__aeabi_dsub>
 800376a:	4622      	mov	r2, r4
 800376c:	462b      	mov	r3, r5
 800376e:	f7fc ff47 	bl	8000600 <__aeabi_dmul>
 8003772:	a34e      	add	r3, pc, #312	; (adr r3, 80038ac <__kernel_cos+0x1c4>)
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	f7fc fd90 	bl	800029c <__adddf3>
 800377c:	462b      	mov	r3, r5
 800377e:	4622      	mov	r2, r4
 8003780:	f7fc ff3e 	bl	8000600 <__aeabi_dmul>
 8003784:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <__kernel_cos+0x188>)
 8003786:	429f      	cmp	r7, r3
 8003788:	4682      	mov	sl, r0
 800378a:	468b      	mov	fp, r1
 800378c:	dc2c      	bgt.n	80037e8 <__kernel_cos+0x100>
 800378e:	2200      	movs	r2, #0
 8003790:	4b38      	ldr	r3, [pc, #224]	; (8003874 <__kernel_cos+0x18c>)
 8003792:	4620      	mov	r0, r4
 8003794:	4629      	mov	r1, r5
 8003796:	f7fc ff33 	bl	8000600 <__aeabi_dmul>
 800379a:	4652      	mov	r2, sl
 800379c:	4606      	mov	r6, r0
 800379e:	460f      	mov	r7, r1
 80037a0:	465b      	mov	r3, fp
 80037a2:	4620      	mov	r0, r4
 80037a4:	4629      	mov	r1, r5
 80037a6:	f7fc ff2b 	bl	8000600 <__aeabi_dmul>
 80037aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80037ae:	4604      	mov	r4, r0
 80037b0:	460d      	mov	r5, r1
 80037b2:	4640      	mov	r0, r8
 80037b4:	4649      	mov	r1, r9
 80037b6:	f7fc ff23 	bl	8000600 <__aeabi_dmul>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4620      	mov	r0, r4
 80037c0:	4629      	mov	r1, r5
 80037c2:	f7fc fd69 	bl	8000298 <__aeabi_dsub>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4630      	mov	r0, r6
 80037cc:	4639      	mov	r1, r7
 80037ce:	f7fc fd63 	bl	8000298 <__aeabi_dsub>
 80037d2:	460b      	mov	r3, r1
 80037d4:	4928      	ldr	r1, [pc, #160]	; (8003878 <__kernel_cos+0x190>)
 80037d6:	4602      	mov	r2, r0
 80037d8:	2000      	movs	r0, #0
 80037da:	f7fc fd5d 	bl	8000298 <__aeabi_dsub>
 80037de:	ec41 0b10 	vmov	d0, r0, r1
 80037e2:	b005      	add	sp, #20
 80037e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e8:	4b24      	ldr	r3, [pc, #144]	; (800387c <__kernel_cos+0x194>)
 80037ea:	4923      	ldr	r1, [pc, #140]	; (8003878 <__kernel_cos+0x190>)
 80037ec:	429f      	cmp	r7, r3
 80037ee:	bfd7      	itett	le
 80037f0:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 80037f4:	4f22      	ldrgt	r7, [pc, #136]	; (8003880 <__kernel_cos+0x198>)
 80037f6:	2200      	movle	r2, #0
 80037f8:	4616      	movle	r6, r2
 80037fa:	bfd4      	ite	le
 80037fc:	461f      	movle	r7, r3
 80037fe:	2600      	movgt	r6, #0
 8003800:	4632      	mov	r2, r6
 8003802:	463b      	mov	r3, r7
 8003804:	2000      	movs	r0, #0
 8003806:	f7fc fd47 	bl	8000298 <__aeabi_dsub>
 800380a:	2200      	movs	r2, #0
 800380c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003810:	4b18      	ldr	r3, [pc, #96]	; (8003874 <__kernel_cos+0x18c>)
 8003812:	4620      	mov	r0, r4
 8003814:	4629      	mov	r1, r5
 8003816:	f7fc fef3 	bl	8000600 <__aeabi_dmul>
 800381a:	4632      	mov	r2, r6
 800381c:	463b      	mov	r3, r7
 800381e:	f7fc fd3b 	bl	8000298 <__aeabi_dsub>
 8003822:	4652      	mov	r2, sl
 8003824:	4606      	mov	r6, r0
 8003826:	460f      	mov	r7, r1
 8003828:	465b      	mov	r3, fp
 800382a:	4620      	mov	r0, r4
 800382c:	4629      	mov	r1, r5
 800382e:	f7fc fee7 	bl	8000600 <__aeabi_dmul>
 8003832:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003836:	4604      	mov	r4, r0
 8003838:	460d      	mov	r5, r1
 800383a:	4640      	mov	r0, r8
 800383c:	4649      	mov	r1, r9
 800383e:	f7fc fedf 	bl	8000600 <__aeabi_dmul>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4620      	mov	r0, r4
 8003848:	4629      	mov	r1, r5
 800384a:	f7fc fd25 	bl	8000298 <__aeabi_dsub>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4630      	mov	r0, r6
 8003854:	4639      	mov	r1, r7
 8003856:	f7fc fd1f 	bl	8000298 <__aeabi_dsub>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003862:	e7ba      	b.n	80037da <__kernel_cos+0xf2>
 8003864:	2000      	movs	r0, #0
 8003866:	4904      	ldr	r1, [pc, #16]	; (8003878 <__kernel_cos+0x190>)
 8003868:	e7b9      	b.n	80037de <__kernel_cos+0xf6>
 800386a:	bf00      	nop
 800386c:	f3af 8000 	nop.w
 8003870:	3fd33332 	.word	0x3fd33332
 8003874:	3fe00000 	.word	0x3fe00000
 8003878:	3ff00000 	.word	0x3ff00000
 800387c:	3fe90000 	.word	0x3fe90000
 8003880:	3fd20000 	.word	0x3fd20000
 8003884:	be8838d4 	.word	0xbe8838d4
 8003888:	bda8fae9 	.word	0xbda8fae9
 800388c:	bdb4b1c4 	.word	0xbdb4b1c4
 8003890:	3e21ee9e 	.word	0x3e21ee9e
 8003894:	809c52ad 	.word	0x809c52ad
 8003898:	3e927e4f 	.word	0x3e927e4f
 800389c:	19cb1590 	.word	0x19cb1590
 80038a0:	3efa01a0 	.word	0x3efa01a0
 80038a4:	16c15177 	.word	0x16c15177
 80038a8:	3f56c16c 	.word	0x3f56c16c
 80038ac:	5555554c 	.word	0x5555554c
 80038b0:	3fa55555 	.word	0x3fa55555
 80038b4:	00000000 	.word	0x00000000

080038b8 <__kernel_rem_pio2>:
 80038b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038bc:	ed2d 8b02 	vpush	{d8}
 80038c0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80038c4:	1ed4      	subs	r4, r2, #3
 80038c6:	9306      	str	r3, [sp, #24]
 80038c8:	9102      	str	r1, [sp, #8]
 80038ca:	4bc3      	ldr	r3, [pc, #780]	; (8003bd8 <__kernel_rem_pio2+0x320>)
 80038cc:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80038ce:	9009      	str	r0, [sp, #36]	; 0x24
 80038d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	9b06      	ldr	r3, [sp, #24]
 80038d8:	3b01      	subs	r3, #1
 80038da:	9304      	str	r3, [sp, #16]
 80038dc:	2318      	movs	r3, #24
 80038de:	fb94 f4f3 	sdiv	r4, r4, r3
 80038e2:	f06f 0317 	mvn.w	r3, #23
 80038e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80038ea:	fb04 3303 	mla	r3, r4, r3, r3
 80038ee:	eb03 0a02 	add.w	sl, r3, r2
 80038f2:	9b00      	ldr	r3, [sp, #0]
 80038f4:	9a04      	ldr	r2, [sp, #16]
 80038f6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8003bc8 <__kernel_rem_pio2+0x310>
 80038fa:	eb03 0802 	add.w	r8, r3, r2
 80038fe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003900:	1aa7      	subs	r7, r4, r2
 8003902:	ae20      	add	r6, sp, #128	; 0x80
 8003904:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003908:	2500      	movs	r5, #0
 800390a:	4545      	cmp	r5, r8
 800390c:	dd13      	ble.n	8003936 <__kernel_rem_pio2+0x7e>
 800390e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8003bc8 <__kernel_rem_pio2+0x310>
 8003912:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8003916:	2600      	movs	r6, #0
 8003918:	9b00      	ldr	r3, [sp, #0]
 800391a:	429e      	cmp	r6, r3
 800391c:	dc32      	bgt.n	8003984 <__kernel_rem_pio2+0xcc>
 800391e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003920:	9303      	str	r3, [sp, #12]
 8003922:	9b06      	ldr	r3, [sp, #24]
 8003924:	199d      	adds	r5, r3, r6
 8003926:	ab20      	add	r3, sp, #128	; 0x80
 8003928:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800392c:	9308      	str	r3, [sp, #32]
 800392e:	ec59 8b18 	vmov	r8, r9, d8
 8003932:	2700      	movs	r7, #0
 8003934:	e01f      	b.n	8003976 <__kernel_rem_pio2+0xbe>
 8003936:	42ef      	cmn	r7, r5
 8003938:	d407      	bmi.n	800394a <__kernel_rem_pio2+0x92>
 800393a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800393e:	f7fc fdf9 	bl	8000534 <__aeabi_i2d>
 8003942:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003946:	3501      	adds	r5, #1
 8003948:	e7df      	b.n	800390a <__kernel_rem_pio2+0x52>
 800394a:	ec51 0b18 	vmov	r0, r1, d8
 800394e:	e7f8      	b.n	8003942 <__kernel_rem_pio2+0x8a>
 8003950:	9908      	ldr	r1, [sp, #32]
 8003952:	9d03      	ldr	r5, [sp, #12]
 8003954:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003958:	9108      	str	r1, [sp, #32]
 800395a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800395e:	9503      	str	r5, [sp, #12]
 8003960:	f7fc fe4e 	bl	8000600 <__aeabi_dmul>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4640      	mov	r0, r8
 800396a:	4649      	mov	r1, r9
 800396c:	f7fc fc96 	bl	800029c <__adddf3>
 8003970:	3701      	adds	r7, #1
 8003972:	4680      	mov	r8, r0
 8003974:	4689      	mov	r9, r1
 8003976:	9b04      	ldr	r3, [sp, #16]
 8003978:	429f      	cmp	r7, r3
 800397a:	dde9      	ble.n	8003950 <__kernel_rem_pio2+0x98>
 800397c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003980:	3601      	adds	r6, #1
 8003982:	e7c9      	b.n	8003918 <__kernel_rem_pio2+0x60>
 8003984:	9b00      	ldr	r3, [sp, #0]
 8003986:	9f00      	ldr	r7, [sp, #0]
 8003988:	aa0c      	add	r2, sp, #48	; 0x30
 800398a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800398e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003990:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003992:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003996:	930a      	str	r3, [sp, #40]	; 0x28
 8003998:	ab98      	add	r3, sp, #608	; 0x260
 800399a:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800399e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80039a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80039a6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80039aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039ae:	9308      	str	r3, [sp, #32]
 80039b0:	9a08      	ldr	r2, [sp, #32]
 80039b2:	ab98      	add	r3, sp, #608	; 0x260
 80039b4:	4413      	add	r3, r2
 80039b6:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 80039ba:	2600      	movs	r6, #0
 80039bc:	1bbb      	subs	r3, r7, r6
 80039be:	2b00      	cmp	r3, #0
 80039c0:	dc77      	bgt.n	8003ab2 <__kernel_rem_pio2+0x1fa>
 80039c2:	ec49 8b10 	vmov	d0, r8, r9
 80039c6:	4650      	mov	r0, sl
 80039c8:	f000 fc12 	bl	80041f0 <scalbn>
 80039cc:	ec55 4b10 	vmov	r4, r5, d0
 80039d0:	2200      	movs	r2, #0
 80039d2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80039d6:	ee10 0a10 	vmov	r0, s0
 80039da:	4629      	mov	r1, r5
 80039dc:	f7fc fe10 	bl	8000600 <__aeabi_dmul>
 80039e0:	ec41 0b10 	vmov	d0, r0, r1
 80039e4:	f000 fb7c 	bl	80040e0 <floor>
 80039e8:	2200      	movs	r2, #0
 80039ea:	ec51 0b10 	vmov	r0, r1, d0
 80039ee:	4b7b      	ldr	r3, [pc, #492]	; (8003bdc <__kernel_rem_pio2+0x324>)
 80039f0:	f7fc fe06 	bl	8000600 <__aeabi_dmul>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4620      	mov	r0, r4
 80039fa:	4629      	mov	r1, r5
 80039fc:	f7fc fc4c 	bl	8000298 <__aeabi_dsub>
 8003a00:	460d      	mov	r5, r1
 8003a02:	4604      	mov	r4, r0
 8003a04:	f7fd f8ac 	bl	8000b60 <__aeabi_d2iz>
 8003a08:	9003      	str	r0, [sp, #12]
 8003a0a:	f7fc fd93 	bl	8000534 <__aeabi_i2d>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4620      	mov	r0, r4
 8003a14:	4629      	mov	r1, r5
 8003a16:	f7fc fc3f 	bl	8000298 <__aeabi_dsub>
 8003a1a:	f1ba 0f00 	cmp.w	sl, #0
 8003a1e:	4680      	mov	r8, r0
 8003a20:	4689      	mov	r9, r1
 8003a22:	dd6b      	ble.n	8003afc <__kernel_rem_pio2+0x244>
 8003a24:	1e7a      	subs	r2, r7, #1
 8003a26:	ab0c      	add	r3, sp, #48	; 0x30
 8003a28:	f1ca 0118 	rsb	r1, sl, #24
 8003a2c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003a30:	9c03      	ldr	r4, [sp, #12]
 8003a32:	fa40 f301 	asr.w	r3, r0, r1
 8003a36:	441c      	add	r4, r3
 8003a38:	408b      	lsls	r3, r1
 8003a3a:	1ac0      	subs	r0, r0, r3
 8003a3c:	ab0c      	add	r3, sp, #48	; 0x30
 8003a3e:	9403      	str	r4, [sp, #12]
 8003a40:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003a44:	f1ca 0317 	rsb	r3, sl, #23
 8003a48:	fa40 fb03 	asr.w	fp, r0, r3
 8003a4c:	f1bb 0f00 	cmp.w	fp, #0
 8003a50:	dd62      	ble.n	8003b18 <__kernel_rem_pio2+0x260>
 8003a52:	9b03      	ldr	r3, [sp, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	3301      	adds	r3, #1
 8003a58:	9303      	str	r3, [sp, #12]
 8003a5a:	4614      	mov	r4, r2
 8003a5c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003a60:	4297      	cmp	r7, r2
 8003a62:	f300 8089 	bgt.w	8003b78 <__kernel_rem_pio2+0x2c0>
 8003a66:	f1ba 0f00 	cmp.w	sl, #0
 8003a6a:	dd07      	ble.n	8003a7c <__kernel_rem_pio2+0x1c4>
 8003a6c:	f1ba 0f01 	cmp.w	sl, #1
 8003a70:	f000 8096 	beq.w	8003ba0 <__kernel_rem_pio2+0x2e8>
 8003a74:	f1ba 0f02 	cmp.w	sl, #2
 8003a78:	f000 809c 	beq.w	8003bb4 <__kernel_rem_pio2+0x2fc>
 8003a7c:	f1bb 0f02 	cmp.w	fp, #2
 8003a80:	d14a      	bne.n	8003b18 <__kernel_rem_pio2+0x260>
 8003a82:	4642      	mov	r2, r8
 8003a84:	464b      	mov	r3, r9
 8003a86:	2000      	movs	r0, #0
 8003a88:	4955      	ldr	r1, [pc, #340]	; (8003be0 <__kernel_rem_pio2+0x328>)
 8003a8a:	f7fc fc05 	bl	8000298 <__aeabi_dsub>
 8003a8e:	4680      	mov	r8, r0
 8003a90:	4689      	mov	r9, r1
 8003a92:	2c00      	cmp	r4, #0
 8003a94:	d040      	beq.n	8003b18 <__kernel_rem_pio2+0x260>
 8003a96:	4650      	mov	r0, sl
 8003a98:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8003bd0 <__kernel_rem_pio2+0x318>
 8003a9c:	f000 fba8 	bl	80041f0 <scalbn>
 8003aa0:	4640      	mov	r0, r8
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	ec53 2b10 	vmov	r2, r3, d0
 8003aa8:	f7fc fbf6 	bl	8000298 <__aeabi_dsub>
 8003aac:	4680      	mov	r8, r0
 8003aae:	4689      	mov	r9, r1
 8003ab0:	e032      	b.n	8003b18 <__kernel_rem_pio2+0x260>
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	4b4b      	ldr	r3, [pc, #300]	; (8003be4 <__kernel_rem_pio2+0x32c>)
 8003ab6:	4640      	mov	r0, r8
 8003ab8:	4649      	mov	r1, r9
 8003aba:	f7fc fda1 	bl	8000600 <__aeabi_dmul>
 8003abe:	f7fd f84f 	bl	8000b60 <__aeabi_d2iz>
 8003ac2:	f7fc fd37 	bl	8000534 <__aeabi_i2d>
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	4b47      	ldr	r3, [pc, #284]	; (8003be8 <__kernel_rem_pio2+0x330>)
 8003aca:	4604      	mov	r4, r0
 8003acc:	460d      	mov	r5, r1
 8003ace:	f7fc fd97 	bl	8000600 <__aeabi_dmul>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4640      	mov	r0, r8
 8003ad8:	4649      	mov	r1, r9
 8003ada:	f7fc fbdd 	bl	8000298 <__aeabi_dsub>
 8003ade:	f7fd f83f 	bl	8000b60 <__aeabi_d2iz>
 8003ae2:	ab0c      	add	r3, sp, #48	; 0x30
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8003aea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003aee:	4620      	mov	r0, r4
 8003af0:	f7fc fbd4 	bl	800029c <__adddf3>
 8003af4:	3601      	adds	r6, #1
 8003af6:	4680      	mov	r8, r0
 8003af8:	4689      	mov	r9, r1
 8003afa:	e75f      	b.n	80039bc <__kernel_rem_pio2+0x104>
 8003afc:	d106      	bne.n	8003b0c <__kernel_rem_pio2+0x254>
 8003afe:	1e7b      	subs	r3, r7, #1
 8003b00:	aa0c      	add	r2, sp, #48	; 0x30
 8003b02:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b06:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8003b0a:	e79f      	b.n	8003a4c <__kernel_rem_pio2+0x194>
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	4b37      	ldr	r3, [pc, #220]	; (8003bec <__kernel_rem_pio2+0x334>)
 8003b10:	f7fc fffc 	bl	8000b0c <__aeabi_dcmpge>
 8003b14:	bb68      	cbnz	r0, 8003b72 <__kernel_rem_pio2+0x2ba>
 8003b16:	4683      	mov	fp, r0
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	4640      	mov	r0, r8
 8003b1e:	4649      	mov	r1, r9
 8003b20:	f7fc ffd6 	bl	8000ad0 <__aeabi_dcmpeq>
 8003b24:	2800      	cmp	r0, #0
 8003b26:	f000 80c1 	beq.w	8003cac <__kernel_rem_pio2+0x3f4>
 8003b2a:	1e7c      	subs	r4, r7, #1
 8003b2c:	4623      	mov	r3, r4
 8003b2e:	2200      	movs	r2, #0
 8003b30:	9900      	ldr	r1, [sp, #0]
 8003b32:	428b      	cmp	r3, r1
 8003b34:	da5c      	bge.n	8003bf0 <__kernel_rem_pio2+0x338>
 8003b36:	2a00      	cmp	r2, #0
 8003b38:	f040 808b 	bne.w	8003c52 <__kernel_rem_pio2+0x39a>
 8003b3c:	2401      	movs	r4, #1
 8003b3e:	f06f 0203 	mvn.w	r2, #3
 8003b42:	fb02 f304 	mul.w	r3, r2, r4
 8003b46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b48:	58cb      	ldr	r3, [r1, r3]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d056      	beq.n	8003bfc <__kernel_rem_pio2+0x344>
 8003b4e:	9b08      	ldr	r3, [sp, #32]
 8003b50:	aa98      	add	r2, sp, #608	; 0x260
 8003b52:	4413      	add	r3, r2
 8003b54:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8003b58:	9b06      	ldr	r3, [sp, #24]
 8003b5a:	19dd      	adds	r5, r3, r7
 8003b5c:	ab20      	add	r3, sp, #128	; 0x80
 8003b5e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003b62:	19e3      	adds	r3, r4, r7
 8003b64:	1c7e      	adds	r6, r7, #1
 8003b66:	9303      	str	r3, [sp, #12]
 8003b68:	9b03      	ldr	r3, [sp, #12]
 8003b6a:	429e      	cmp	r6, r3
 8003b6c:	dd48      	ble.n	8003c00 <__kernel_rem_pio2+0x348>
 8003b6e:	461f      	mov	r7, r3
 8003b70:	e712      	b.n	8003998 <__kernel_rem_pio2+0xe0>
 8003b72:	f04f 0b02 	mov.w	fp, #2
 8003b76:	e76c      	b.n	8003a52 <__kernel_rem_pio2+0x19a>
 8003b78:	ab0c      	add	r3, sp, #48	; 0x30
 8003b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b7e:	b94c      	cbnz	r4, 8003b94 <__kernel_rem_pio2+0x2dc>
 8003b80:	b12b      	cbz	r3, 8003b8e <__kernel_rem_pio2+0x2d6>
 8003b82:	a80c      	add	r0, sp, #48	; 0x30
 8003b84:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003b88:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	3201      	adds	r2, #1
 8003b90:	461c      	mov	r4, r3
 8003b92:	e765      	b.n	8003a60 <__kernel_rem_pio2+0x1a8>
 8003b94:	a80c      	add	r0, sp, #48	; 0x30
 8003b96:	1acb      	subs	r3, r1, r3
 8003b98:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003b9c:	4623      	mov	r3, r4
 8003b9e:	e7f6      	b.n	8003b8e <__kernel_rem_pio2+0x2d6>
 8003ba0:	1e7a      	subs	r2, r7, #1
 8003ba2:	ab0c      	add	r3, sp, #48	; 0x30
 8003ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003bac:	a90c      	add	r1, sp, #48	; 0x30
 8003bae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003bb2:	e763      	b.n	8003a7c <__kernel_rem_pio2+0x1c4>
 8003bb4:	1e7a      	subs	r2, r7, #1
 8003bb6:	ab0c      	add	r3, sp, #48	; 0x30
 8003bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bbc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003bc0:	e7f4      	b.n	8003bac <__kernel_rem_pio2+0x2f4>
 8003bc2:	bf00      	nop
 8003bc4:	f3af 8000 	nop.w
	...
 8003bd4:	3ff00000 	.word	0x3ff00000
 8003bd8:	080045a8 	.word	0x080045a8
 8003bdc:	40200000 	.word	0x40200000
 8003be0:	3ff00000 	.word	0x3ff00000
 8003be4:	3e700000 	.word	0x3e700000
 8003be8:	41700000 	.word	0x41700000
 8003bec:	3fe00000 	.word	0x3fe00000
 8003bf0:	a90c      	add	r1, sp, #48	; 0x30
 8003bf2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	e799      	b.n	8003b30 <__kernel_rem_pio2+0x278>
 8003bfc:	3401      	adds	r4, #1
 8003bfe:	e7a0      	b.n	8003b42 <__kernel_rem_pio2+0x28a>
 8003c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c02:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003c06:	f7fc fc95 	bl	8000534 <__aeabi_i2d>
 8003c0a:	e8e5 0102 	strd	r0, r1, [r5], #8
 8003c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c10:	9508      	str	r5, [sp, #32]
 8003c12:	461c      	mov	r4, r3
 8003c14:	2700      	movs	r7, #0
 8003c16:	f04f 0800 	mov.w	r8, #0
 8003c1a:	f04f 0900 	mov.w	r9, #0
 8003c1e:	9b04      	ldr	r3, [sp, #16]
 8003c20:	429f      	cmp	r7, r3
 8003c22:	dd03      	ble.n	8003c2c <__kernel_rem_pio2+0x374>
 8003c24:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003c28:	3601      	adds	r6, #1
 8003c2a:	e79d      	b.n	8003b68 <__kernel_rem_pio2+0x2b0>
 8003c2c:	9908      	ldr	r1, [sp, #32]
 8003c2e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003c32:	9108      	str	r1, [sp, #32]
 8003c34:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003c38:	f7fc fce2 	bl	8000600 <__aeabi_dmul>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4640      	mov	r0, r8
 8003c42:	4649      	mov	r1, r9
 8003c44:	f7fc fb2a 	bl	800029c <__adddf3>
 8003c48:	3701      	adds	r7, #1
 8003c4a:	4680      	mov	r8, r0
 8003c4c:	4689      	mov	r9, r1
 8003c4e:	e7e6      	b.n	8003c1e <__kernel_rem_pio2+0x366>
 8003c50:	3c01      	subs	r4, #1
 8003c52:	ab0c      	add	r3, sp, #48	; 0x30
 8003c54:	f1aa 0a18 	sub.w	sl, sl, #24
 8003c58:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f7      	beq.n	8003c50 <__kernel_rem_pio2+0x398>
 8003c60:	4650      	mov	r0, sl
 8003c62:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8003f38 <__kernel_rem_pio2+0x680>
 8003c66:	f000 fac3 	bl	80041f0 <scalbn>
 8003c6a:	00e5      	lsls	r5, r4, #3
 8003c6c:	ab98      	add	r3, sp, #608	; 0x260
 8003c6e:	eb03 0905 	add.w	r9, r3, r5
 8003c72:	ec57 6b10 	vmov	r6, r7, d0
 8003c76:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8003c7a:	46a0      	mov	r8, r4
 8003c7c:	f1b8 0f00 	cmp.w	r8, #0
 8003c80:	da4d      	bge.n	8003d1e <__kernel_rem_pio2+0x466>
 8003c82:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8003f40 <__kernel_rem_pio2+0x688>
 8003c86:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	9304      	str	r3, [sp, #16]
 8003c8e:	4657      	mov	r7, sl
 8003c90:	9b04      	ldr	r3, [sp, #16]
 8003c92:	ebb4 0903 	subs.w	r9, r4, r3
 8003c96:	d476      	bmi.n	8003d86 <__kernel_rem_pio2+0x4ce>
 8003c98:	4bab      	ldr	r3, [pc, #684]	; (8003f48 <__kernel_rem_pio2+0x690>)
 8003c9a:	461e      	mov	r6, r3
 8003c9c:	ab70      	add	r3, sp, #448	; 0x1c0
 8003c9e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8003ca2:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003ca6:	f04f 0800 	mov.w	r8, #0
 8003caa:	e05e      	b.n	8003d6a <__kernel_rem_pio2+0x4b2>
 8003cac:	f1ca 0000 	rsb	r0, sl, #0
 8003cb0:	ec49 8b10 	vmov	d0, r8, r9
 8003cb4:	f000 fa9c 	bl	80041f0 <scalbn>
 8003cb8:	ec55 4b10 	vmov	r4, r5, d0
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	4ba3      	ldr	r3, [pc, #652]	; (8003f4c <__kernel_rem_pio2+0x694>)
 8003cc0:	ee10 0a10 	vmov	r0, s0
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	f7fc ff21 	bl	8000b0c <__aeabi_dcmpge>
 8003cca:	b1f8      	cbz	r0, 8003d0c <__kernel_rem_pio2+0x454>
 8003ccc:	2200      	movs	r2, #0
 8003cce:	4ba0      	ldr	r3, [pc, #640]	; (8003f50 <__kernel_rem_pio2+0x698>)
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	f7fc fc94 	bl	8000600 <__aeabi_dmul>
 8003cd8:	f7fc ff42 	bl	8000b60 <__aeabi_d2iz>
 8003cdc:	4606      	mov	r6, r0
 8003cde:	f7fc fc29 	bl	8000534 <__aeabi_i2d>
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	4b99      	ldr	r3, [pc, #612]	; (8003f4c <__kernel_rem_pio2+0x694>)
 8003ce6:	f7fc fc8b 	bl	8000600 <__aeabi_dmul>
 8003cea:	460b      	mov	r3, r1
 8003cec:	4602      	mov	r2, r0
 8003cee:	4629      	mov	r1, r5
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f7fc fad1 	bl	8000298 <__aeabi_dsub>
 8003cf6:	f7fc ff33 	bl	8000b60 <__aeabi_d2iz>
 8003cfa:	1c7c      	adds	r4, r7, #1
 8003cfc:	ab0c      	add	r3, sp, #48	; 0x30
 8003cfe:	f10a 0a18 	add.w	sl, sl, #24
 8003d02:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8003d06:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8003d0a:	e7a9      	b.n	8003c60 <__kernel_rem_pio2+0x3a8>
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	4629      	mov	r1, r5
 8003d10:	f7fc ff26 	bl	8000b60 <__aeabi_d2iz>
 8003d14:	ab0c      	add	r3, sp, #48	; 0x30
 8003d16:	463c      	mov	r4, r7
 8003d18:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8003d1c:	e7a0      	b.n	8003c60 <__kernel_rem_pio2+0x3a8>
 8003d1e:	ab0c      	add	r3, sp, #48	; 0x30
 8003d20:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003d24:	f7fc fc06 	bl	8000534 <__aeabi_i2d>
 8003d28:	4632      	mov	r2, r6
 8003d2a:	463b      	mov	r3, r7
 8003d2c:	f7fc fc68 	bl	8000600 <__aeabi_dmul>
 8003d30:	2200      	movs	r2, #0
 8003d32:	e969 0102 	strd	r0, r1, [r9, #-8]!
 8003d36:	4b86      	ldr	r3, [pc, #536]	; (8003f50 <__kernel_rem_pio2+0x698>)
 8003d38:	4630      	mov	r0, r6
 8003d3a:	4639      	mov	r1, r7
 8003d3c:	f7fc fc60 	bl	8000600 <__aeabi_dmul>
 8003d40:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d44:	4606      	mov	r6, r0
 8003d46:	460f      	mov	r7, r1
 8003d48:	e798      	b.n	8003c7c <__kernel_rem_pio2+0x3c4>
 8003d4a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8003d4e:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8003d52:	f7fc fc55 	bl	8000600 <__aeabi_dmul>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d5e:	f7fc fa9d 	bl	800029c <__adddf3>
 8003d62:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003d66:	f108 0801 	add.w	r8, r8, #1
 8003d6a:	9b00      	ldr	r3, [sp, #0]
 8003d6c:	4598      	cmp	r8, r3
 8003d6e:	dc02      	bgt.n	8003d76 <__kernel_rem_pio2+0x4be>
 8003d70:	9b04      	ldr	r3, [sp, #16]
 8003d72:	4598      	cmp	r8, r3
 8003d74:	dde9      	ble.n	8003d4a <__kernel_rem_pio2+0x492>
 8003d76:	9b04      	ldr	r3, [sp, #16]
 8003d78:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	ecaa 7b02 	vstmia	sl!, {d7}
 8003d82:	9304      	str	r3, [sp, #16]
 8003d84:	e784      	b.n	8003c90 <__kernel_rem_pio2+0x3d8>
 8003d86:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d85d      	bhi.n	8003e48 <__kernel_rem_pio2+0x590>
 8003d8c:	e8df f003 	tbb	[pc, r3]
 8003d90:	0226264b 	.word	0x0226264b
 8003d94:	ab98      	add	r3, sp, #608	; 0x260
 8003d96:	441d      	add	r5, r3
 8003d98:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8003d9c:	462e      	mov	r6, r5
 8003d9e:	46a2      	mov	sl, r4
 8003da0:	f1ba 0f00 	cmp.w	sl, #0
 8003da4:	dc6e      	bgt.n	8003e84 <__kernel_rem_pio2+0x5cc>
 8003da6:	462e      	mov	r6, r5
 8003da8:	46a2      	mov	sl, r4
 8003daa:	f1ba 0f01 	cmp.w	sl, #1
 8003dae:	f300 808a 	bgt.w	8003ec6 <__kernel_rem_pio2+0x60e>
 8003db2:	2000      	movs	r0, #0
 8003db4:	2100      	movs	r1, #0
 8003db6:	2c01      	cmp	r4, #1
 8003db8:	f300 80a6 	bgt.w	8003f08 <__kernel_rem_pio2+0x650>
 8003dbc:	f1bb 0f00 	cmp.w	fp, #0
 8003dc0:	f040 80a8 	bne.w	8003f14 <__kernel_rem_pio2+0x65c>
 8003dc4:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8003dc8:	9c02      	ldr	r4, [sp, #8]
 8003dca:	e9c4 2300 	strd	r2, r3, [r4]
 8003dce:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8003dd2:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8003dd6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003dda:	e035      	b.n	8003e48 <__kernel_rem_pio2+0x590>
 8003ddc:	3508      	adds	r5, #8
 8003dde:	ab48      	add	r3, sp, #288	; 0x120
 8003de0:	441d      	add	r5, r3
 8003de2:	4626      	mov	r6, r4
 8003de4:	2000      	movs	r0, #0
 8003de6:	2100      	movs	r1, #0
 8003de8:	2e00      	cmp	r6, #0
 8003dea:	da3c      	bge.n	8003e66 <__kernel_rem_pio2+0x5ae>
 8003dec:	f1bb 0f00 	cmp.w	fp, #0
 8003df0:	d03f      	beq.n	8003e72 <__kernel_rem_pio2+0x5ba>
 8003df2:	4602      	mov	r2, r0
 8003df4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003df8:	9d02      	ldr	r5, [sp, #8]
 8003dfa:	e9c5 2300 	strd	r2, r3, [r5]
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8003e06:	f7fc fa47 	bl	8000298 <__aeabi_dsub>
 8003e0a:	ae4a      	add	r6, sp, #296	; 0x128
 8003e0c:	2501      	movs	r5, #1
 8003e0e:	42ac      	cmp	r4, r5
 8003e10:	da32      	bge.n	8003e78 <__kernel_rem_pio2+0x5c0>
 8003e12:	f1bb 0f00 	cmp.w	fp, #0
 8003e16:	d002      	beq.n	8003e1e <__kernel_rem_pio2+0x566>
 8003e18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	9b02      	ldr	r3, [sp, #8]
 8003e20:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003e24:	e010      	b.n	8003e48 <__kernel_rem_pio2+0x590>
 8003e26:	ab98      	add	r3, sp, #608	; 0x260
 8003e28:	441d      	add	r5, r3
 8003e2a:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8003e2e:	2000      	movs	r0, #0
 8003e30:	2100      	movs	r1, #0
 8003e32:	2c00      	cmp	r4, #0
 8003e34:	da11      	bge.n	8003e5a <__kernel_rem_pio2+0x5a2>
 8003e36:	f1bb 0f00 	cmp.w	fp, #0
 8003e3a:	d002      	beq.n	8003e42 <__kernel_rem_pio2+0x58a>
 8003e3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003e40:	4619      	mov	r1, r3
 8003e42:	9b02      	ldr	r3, [sp, #8]
 8003e44:	e9c3 0100 	strd	r0, r1, [r3]
 8003e48:	9b03      	ldr	r3, [sp, #12]
 8003e4a:	f003 0007 	and.w	r0, r3, #7
 8003e4e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8003e52:	ecbd 8b02 	vpop	{d8}
 8003e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e5a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8003e5e:	f7fc fa1d 	bl	800029c <__adddf3>
 8003e62:	3c01      	subs	r4, #1
 8003e64:	e7e5      	b.n	8003e32 <__kernel_rem_pio2+0x57a>
 8003e66:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8003e6a:	f7fc fa17 	bl	800029c <__adddf3>
 8003e6e:	3e01      	subs	r6, #1
 8003e70:	e7ba      	b.n	8003de8 <__kernel_rem_pio2+0x530>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	e7bf      	b.n	8003df8 <__kernel_rem_pio2+0x540>
 8003e78:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8003e7c:	f7fc fa0e 	bl	800029c <__adddf3>
 8003e80:	3501      	adds	r5, #1
 8003e82:	e7c4      	b.n	8003e0e <__kernel_rem_pio2+0x556>
 8003e84:	ed16 7b02 	vldr	d7, [r6, #-8]
 8003e88:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8003e8c:	ec53 2b17 	vmov	r2, r3, d7
 8003e90:	4640      	mov	r0, r8
 8003e92:	4649      	mov	r1, r9
 8003e94:	ed8d 7b00 	vstr	d7, [sp]
 8003e98:	f7fc fa00 	bl	800029c <__adddf3>
 8003e9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4640      	mov	r0, r8
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	f7fc f9f6 	bl	8000298 <__aeabi_dsub>
 8003eac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003eb0:	f7fc f9f4 	bl	800029c <__adddf3>
 8003eb4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003eb8:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8003ebc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ec0:	ed06 7b02 	vstr	d7, [r6, #-8]
 8003ec4:	e76c      	b.n	8003da0 <__kernel_rem_pio2+0x4e8>
 8003ec6:	ed16 7b02 	vldr	d7, [r6, #-8]
 8003eca:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8003ece:	ec53 2b17 	vmov	r2, r3, d7
 8003ed2:	4640      	mov	r0, r8
 8003ed4:	4649      	mov	r1, r9
 8003ed6:	ed8d 7b00 	vstr	d7, [sp]
 8003eda:	f7fc f9df 	bl	800029c <__adddf3>
 8003ede:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4640      	mov	r0, r8
 8003ee8:	4649      	mov	r1, r9
 8003eea:	f7fc f9d5 	bl	8000298 <__aeabi_dsub>
 8003eee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ef2:	f7fc f9d3 	bl	800029c <__adddf3>
 8003ef6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003efa:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8003efe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f02:	ed06 7b02 	vstr	d7, [r6, #-8]
 8003f06:	e750      	b.n	8003daa <__kernel_rem_pio2+0x4f2>
 8003f08:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8003f0c:	f7fc f9c6 	bl	800029c <__adddf3>
 8003f10:	3c01      	subs	r4, #1
 8003f12:	e750      	b.n	8003db6 <__kernel_rem_pio2+0x4fe>
 8003f14:	9a02      	ldr	r2, [sp, #8]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6110      	str	r0, [r2, #16]
 8003f1e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003f22:	6053      	str	r3, [r2, #4]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	6093      	str	r3, [r2, #8]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003f2e:	60d3      	str	r3, [r2, #12]
 8003f30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f34:	6153      	str	r3, [r2, #20]
 8003f36:	e787      	b.n	8003e48 <__kernel_rem_pio2+0x590>
 8003f38:	00000000 	.word	0x00000000
 8003f3c:	3ff00000 	.word	0x3ff00000
	...
 8003f48:	08004568 	.word	0x08004568
 8003f4c:	41700000 	.word	0x41700000
 8003f50:	3e700000 	.word	0x3e700000
 8003f54:	00000000 	.word	0x00000000

08003f58 <__kernel_sin>:
 8003f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f5c:	ec55 4b10 	vmov	r4, r5, d0
 8003f60:	b085      	sub	sp, #20
 8003f62:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003f66:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003f6a:	ed8d 1b00 	vstr	d1, [sp]
 8003f6e:	9002      	str	r0, [sp, #8]
 8003f70:	da06      	bge.n	8003f80 <__kernel_sin+0x28>
 8003f72:	ee10 0a10 	vmov	r0, s0
 8003f76:	4629      	mov	r1, r5
 8003f78:	f7fc fdf2 	bl	8000b60 <__aeabi_d2iz>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	d051      	beq.n	8004024 <__kernel_sin+0xcc>
 8003f80:	4622      	mov	r2, r4
 8003f82:	462b      	mov	r3, r5
 8003f84:	4620      	mov	r0, r4
 8003f86:	4629      	mov	r1, r5
 8003f88:	f7fc fb3a 	bl	8000600 <__aeabi_dmul>
 8003f8c:	4682      	mov	sl, r0
 8003f8e:	468b      	mov	fp, r1
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4620      	mov	r0, r4
 8003f96:	4629      	mov	r1, r5
 8003f98:	f7fc fb32 	bl	8000600 <__aeabi_dmul>
 8003f9c:	a341      	add	r3, pc, #260	; (adr r3, 80040a4 <__kernel_sin+0x14c>)
 8003f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa2:	4680      	mov	r8, r0
 8003fa4:	4689      	mov	r9, r1
 8003fa6:	4650      	mov	r0, sl
 8003fa8:	4659      	mov	r1, fp
 8003faa:	f7fc fb29 	bl	8000600 <__aeabi_dmul>
 8003fae:	a33f      	add	r3, pc, #252	; (adr r3, 80040ac <__kernel_sin+0x154>)
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f7fc f970 	bl	8000298 <__aeabi_dsub>
 8003fb8:	4652      	mov	r2, sl
 8003fba:	465b      	mov	r3, fp
 8003fbc:	f7fc fb20 	bl	8000600 <__aeabi_dmul>
 8003fc0:	a33c      	add	r3, pc, #240	; (adr r3, 80040b4 <__kernel_sin+0x15c>)
 8003fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc6:	f7fc f969 	bl	800029c <__adddf3>
 8003fca:	4652      	mov	r2, sl
 8003fcc:	465b      	mov	r3, fp
 8003fce:	f7fc fb17 	bl	8000600 <__aeabi_dmul>
 8003fd2:	a33a      	add	r3, pc, #232	; (adr r3, 80040bc <__kernel_sin+0x164>)
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	f7fc f95e 	bl	8000298 <__aeabi_dsub>
 8003fdc:	4652      	mov	r2, sl
 8003fde:	465b      	mov	r3, fp
 8003fe0:	f7fc fb0e 	bl	8000600 <__aeabi_dmul>
 8003fe4:	a337      	add	r3, pc, #220	; (adr r3, 80040c4 <__kernel_sin+0x16c>)
 8003fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fea:	f7fc f957 	bl	800029c <__adddf3>
 8003fee:	9b02      	ldr	r3, [sp, #8]
 8003ff0:	4606      	mov	r6, r0
 8003ff2:	460f      	mov	r7, r1
 8003ff4:	b9db      	cbnz	r3, 800402e <__kernel_sin+0xd6>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4650      	mov	r0, sl
 8003ffc:	4659      	mov	r1, fp
 8003ffe:	f7fc faff 	bl	8000600 <__aeabi_dmul>
 8004002:	a325      	add	r3, pc, #148	; (adr r3, 8004098 <__kernel_sin+0x140>)
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f7fc f946 	bl	8000298 <__aeabi_dsub>
 800400c:	4642      	mov	r2, r8
 800400e:	464b      	mov	r3, r9
 8004010:	f7fc faf6 	bl	8000600 <__aeabi_dmul>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4620      	mov	r0, r4
 800401a:	4629      	mov	r1, r5
 800401c:	f7fc f93e 	bl	800029c <__adddf3>
 8004020:	4604      	mov	r4, r0
 8004022:	460d      	mov	r5, r1
 8004024:	ec45 4b10 	vmov	d0, r4, r5
 8004028:	b005      	add	sp, #20
 800402a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402e:	2200      	movs	r2, #0
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <__kernel_sin+0x148>)
 8004032:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004036:	f7fc fae3 	bl	8000600 <__aeabi_dmul>
 800403a:	4632      	mov	r2, r6
 800403c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004040:	463b      	mov	r3, r7
 8004042:	4640      	mov	r0, r8
 8004044:	4649      	mov	r1, r9
 8004046:	f7fc fadb 	bl	8000600 <__aeabi_dmul>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004052:	f7fc f921 	bl	8000298 <__aeabi_dsub>
 8004056:	4652      	mov	r2, sl
 8004058:	465b      	mov	r3, fp
 800405a:	f7fc fad1 	bl	8000600 <__aeabi_dmul>
 800405e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004062:	f7fc f919 	bl	8000298 <__aeabi_dsub>
 8004066:	a30c      	add	r3, pc, #48	; (adr r3, 8004098 <__kernel_sin+0x140>)
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	4606      	mov	r6, r0
 800406e:	460f      	mov	r7, r1
 8004070:	4640      	mov	r0, r8
 8004072:	4649      	mov	r1, r9
 8004074:	f7fc fac4 	bl	8000600 <__aeabi_dmul>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4630      	mov	r0, r6
 800407e:	4639      	mov	r1, r7
 8004080:	f7fc f90c 	bl	800029c <__adddf3>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4620      	mov	r0, r4
 800408a:	4629      	mov	r1, r5
 800408c:	f7fc f904 	bl	8000298 <__aeabi_dsub>
 8004090:	e7c6      	b.n	8004020 <__kernel_sin+0xc8>
 8004092:	bf00      	nop
 8004094:	f3af 8000 	nop.w
 8004098:	55555549 	.word	0x55555549
 800409c:	3fc55555 	.word	0x3fc55555
 80040a0:	3fe00000 	.word	0x3fe00000
 80040a4:	5acfd57c 	.word	0x5acfd57c
 80040a8:	3de5d93a 	.word	0x3de5d93a
 80040ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80040b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80040b4:	57b1fe7d 	.word	0x57b1fe7d
 80040b8:	3ec71de3 	.word	0x3ec71de3
 80040bc:	19c161d5 	.word	0x19c161d5
 80040c0:	3f2a01a0 	.word	0x3f2a01a0
 80040c4:	1110f8a6 	.word	0x1110f8a6
 80040c8:	3f811111 	.word	0x3f811111

080040cc <fabs>:
 80040cc:	ec53 2b10 	vmov	r2, r3, d0
 80040d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040d4:	ec43 2b10 	vmov	d0, r2, r3
 80040d8:	4770      	bx	lr
 80040da:	0000      	movs	r0, r0
 80040dc:	0000      	movs	r0, r0
	...

080040e0 <floor>:
 80040e0:	ec51 0b10 	vmov	r0, r1, d0
 80040e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80040ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80040f0:	2e13      	cmp	r6, #19
 80040f2:	ee10 8a10 	vmov	r8, s0
 80040f6:	460c      	mov	r4, r1
 80040f8:	ee10 5a10 	vmov	r5, s0
 80040fc:	dc35      	bgt.n	800416a <floor+0x8a>
 80040fe:	2e00      	cmp	r6, #0
 8004100:	da17      	bge.n	8004132 <floor+0x52>
 8004102:	a335      	add	r3, pc, #212	; (adr r3, 80041d8 <floor+0xf8>)
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	f7fc f8c8 	bl	800029c <__adddf3>
 800410c:	2200      	movs	r2, #0
 800410e:	2300      	movs	r3, #0
 8004110:	f7fc fd06 	bl	8000b20 <__aeabi_dcmpgt>
 8004114:	b150      	cbz	r0, 800412c <floor+0x4c>
 8004116:	2c00      	cmp	r4, #0
 8004118:	da5a      	bge.n	80041d0 <floor+0xf0>
 800411a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800411e:	ea53 0308 	orrs.w	r3, r3, r8
 8004122:	4b2f      	ldr	r3, [pc, #188]	; (80041e0 <floor+0x100>)
 8004124:	f04f 0500 	mov.w	r5, #0
 8004128:	bf18      	it	ne
 800412a:	461c      	movne	r4, r3
 800412c:	4621      	mov	r1, r4
 800412e:	4628      	mov	r0, r5
 8004130:	e025      	b.n	800417e <floor+0x9e>
 8004132:	4f2c      	ldr	r7, [pc, #176]	; (80041e4 <floor+0x104>)
 8004134:	4137      	asrs	r7, r6
 8004136:	ea01 0307 	and.w	r3, r1, r7
 800413a:	4303      	orrs	r3, r0
 800413c:	d01f      	beq.n	800417e <floor+0x9e>
 800413e:	a326      	add	r3, pc, #152	; (adr r3, 80041d8 <floor+0xf8>)
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	f7fc f8aa 	bl	800029c <__adddf3>
 8004148:	2200      	movs	r2, #0
 800414a:	2300      	movs	r3, #0
 800414c:	f7fc fce8 	bl	8000b20 <__aeabi_dcmpgt>
 8004150:	2800      	cmp	r0, #0
 8004152:	d0eb      	beq.n	800412c <floor+0x4c>
 8004154:	2c00      	cmp	r4, #0
 8004156:	bfbe      	ittt	lt
 8004158:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800415c:	fa43 f606 	asrlt.w	r6, r3, r6
 8004160:	19a4      	addlt	r4, r4, r6
 8004162:	ea24 0407 	bic.w	r4, r4, r7
 8004166:	2500      	movs	r5, #0
 8004168:	e7e0      	b.n	800412c <floor+0x4c>
 800416a:	2e33      	cmp	r6, #51	; 0x33
 800416c:	dd0b      	ble.n	8004186 <floor+0xa6>
 800416e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004172:	d104      	bne.n	800417e <floor+0x9e>
 8004174:	ee10 2a10 	vmov	r2, s0
 8004178:	460b      	mov	r3, r1
 800417a:	f7fc f88f 	bl	800029c <__adddf3>
 800417e:	ec41 0b10 	vmov	d0, r0, r1
 8004182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004186:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800418a:	f04f 33ff 	mov.w	r3, #4294967295
 800418e:	fa23 f707 	lsr.w	r7, r3, r7
 8004192:	4238      	tst	r0, r7
 8004194:	d0f3      	beq.n	800417e <floor+0x9e>
 8004196:	a310      	add	r3, pc, #64	; (adr r3, 80041d8 <floor+0xf8>)
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	f7fc f87e 	bl	800029c <__adddf3>
 80041a0:	2200      	movs	r2, #0
 80041a2:	2300      	movs	r3, #0
 80041a4:	f7fc fcbc 	bl	8000b20 <__aeabi_dcmpgt>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d0bf      	beq.n	800412c <floor+0x4c>
 80041ac:	2c00      	cmp	r4, #0
 80041ae:	da02      	bge.n	80041b6 <floor+0xd6>
 80041b0:	2e14      	cmp	r6, #20
 80041b2:	d103      	bne.n	80041bc <floor+0xdc>
 80041b4:	3401      	adds	r4, #1
 80041b6:	ea25 0507 	bic.w	r5, r5, r7
 80041ba:	e7b7      	b.n	800412c <floor+0x4c>
 80041bc:	2301      	movs	r3, #1
 80041be:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80041c2:	fa03 f606 	lsl.w	r6, r3, r6
 80041c6:	4435      	add	r5, r6
 80041c8:	45a8      	cmp	r8, r5
 80041ca:	bf88      	it	hi
 80041cc:	18e4      	addhi	r4, r4, r3
 80041ce:	e7f2      	b.n	80041b6 <floor+0xd6>
 80041d0:	2500      	movs	r5, #0
 80041d2:	462c      	mov	r4, r5
 80041d4:	e7aa      	b.n	800412c <floor+0x4c>
 80041d6:	bf00      	nop
 80041d8:	8800759c 	.word	0x8800759c
 80041dc:	7e37e43c 	.word	0x7e37e43c
 80041e0:	bff00000 	.word	0xbff00000
 80041e4:	000fffff 	.word	0x000fffff

080041e8 <matherr>:
 80041e8:	2000      	movs	r0, #0
 80041ea:	4770      	bx	lr
 80041ec:	0000      	movs	r0, r0
	...

080041f0 <scalbn>:
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	ec55 4b10 	vmov	r4, r5, d0
 80041f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80041fa:	4606      	mov	r6, r0
 80041fc:	462b      	mov	r3, r5
 80041fe:	b9b2      	cbnz	r2, 800422e <scalbn+0x3e>
 8004200:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004204:	4323      	orrs	r3, r4
 8004206:	d03c      	beq.n	8004282 <scalbn+0x92>
 8004208:	2200      	movs	r2, #0
 800420a:	4b33      	ldr	r3, [pc, #204]	; (80042d8 <scalbn+0xe8>)
 800420c:	4629      	mov	r1, r5
 800420e:	ee10 0a10 	vmov	r0, s0
 8004212:	f7fc f9f5 	bl	8000600 <__aeabi_dmul>
 8004216:	4a31      	ldr	r2, [pc, #196]	; (80042dc <scalbn+0xec>)
 8004218:	4296      	cmp	r6, r2
 800421a:	4604      	mov	r4, r0
 800421c:	460d      	mov	r5, r1
 800421e:	460b      	mov	r3, r1
 8004220:	da13      	bge.n	800424a <scalbn+0x5a>
 8004222:	a329      	add	r3, pc, #164	; (adr r3, 80042c8 <scalbn+0xd8>)
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f7fc f9ea 	bl	8000600 <__aeabi_dmul>
 800422c:	e00a      	b.n	8004244 <scalbn+0x54>
 800422e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004232:	428a      	cmp	r2, r1
 8004234:	d10c      	bne.n	8004250 <scalbn+0x60>
 8004236:	ee10 2a10 	vmov	r2, s0
 800423a:	462b      	mov	r3, r5
 800423c:	4620      	mov	r0, r4
 800423e:	4629      	mov	r1, r5
 8004240:	f7fc f82c 	bl	800029c <__adddf3>
 8004244:	4604      	mov	r4, r0
 8004246:	460d      	mov	r5, r1
 8004248:	e01b      	b.n	8004282 <scalbn+0x92>
 800424a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800424e:	3a36      	subs	r2, #54	; 0x36
 8004250:	4432      	add	r2, r6
 8004252:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004256:	428a      	cmp	r2, r1
 8004258:	dd0b      	ble.n	8004272 <scalbn+0x82>
 800425a:	ec45 4b11 	vmov	d1, r4, r5
 800425e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80042d0 <scalbn+0xe0>
 8004262:	f000 f83f 	bl	80042e4 <copysign>
 8004266:	a31a      	add	r3, pc, #104	; (adr r3, 80042d0 <scalbn+0xe0>)
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	ec51 0b10 	vmov	r0, r1, d0
 8004270:	e7da      	b.n	8004228 <scalbn+0x38>
 8004272:	2a00      	cmp	r2, #0
 8004274:	dd08      	ble.n	8004288 <scalbn+0x98>
 8004276:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800427a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800427e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004282:	ec45 4b10 	vmov	d0, r4, r5
 8004286:	bd70      	pop	{r4, r5, r6, pc}
 8004288:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800428c:	da0d      	bge.n	80042aa <scalbn+0xba>
 800428e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004292:	429e      	cmp	r6, r3
 8004294:	ec45 4b11 	vmov	d1, r4, r5
 8004298:	dce1      	bgt.n	800425e <scalbn+0x6e>
 800429a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80042c8 <scalbn+0xd8>
 800429e:	f000 f821 	bl	80042e4 <copysign>
 80042a2:	a309      	add	r3, pc, #36	; (adr r3, 80042c8 <scalbn+0xd8>)
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	e7e0      	b.n	800426c <scalbn+0x7c>
 80042aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80042ae:	3236      	adds	r2, #54	; 0x36
 80042b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80042b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80042b8:	4620      	mov	r0, r4
 80042ba:	4629      	mov	r1, r5
 80042bc:	2200      	movs	r2, #0
 80042be:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <scalbn+0xf0>)
 80042c0:	e7b2      	b.n	8004228 <scalbn+0x38>
 80042c2:	bf00      	nop
 80042c4:	f3af 8000 	nop.w
 80042c8:	c2f8f359 	.word	0xc2f8f359
 80042cc:	01a56e1f 	.word	0x01a56e1f
 80042d0:	8800759c 	.word	0x8800759c
 80042d4:	7e37e43c 	.word	0x7e37e43c
 80042d8:	43500000 	.word	0x43500000
 80042dc:	ffff3cb0 	.word	0xffff3cb0
 80042e0:	3c900000 	.word	0x3c900000

080042e4 <copysign>:
 80042e4:	ec53 2b10 	vmov	r2, r3, d0
 80042e8:	ee11 0a90 	vmov	r0, s3
 80042ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80042f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80042f4:	ea41 0300 	orr.w	r3, r1, r0
 80042f8:	ec43 2b10 	vmov	d0, r2, r3
 80042fc:	4770      	bx	lr
	...

08004300 <__errno>:
 8004300:	4b01      	ldr	r3, [pc, #4]	; (8004308 <__errno+0x8>)
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	2000177c 	.word	0x2000177c

0800430c <_sbrk>:
 800430c:	4b04      	ldr	r3, [pc, #16]	; (8004320 <_sbrk+0x14>)
 800430e:	6819      	ldr	r1, [r3, #0]
 8004310:	4602      	mov	r2, r0
 8004312:	b909      	cbnz	r1, 8004318 <_sbrk+0xc>
 8004314:	4903      	ldr	r1, [pc, #12]	; (8004324 <_sbrk+0x18>)
 8004316:	6019      	str	r1, [r3, #0]
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	4402      	add	r2, r0
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	4770      	bx	lr
 8004320:	20001808 	.word	0x20001808
 8004324:	20001860 	.word	0x20001860

08004328 <_init>:
 8004328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432a:	bf00      	nop
 800432c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432e:	bc08      	pop	{r3}
 8004330:	469e      	mov	lr, r3
 8004332:	4770      	bx	lr

08004334 <_fini>:
 8004334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004336:	bf00      	nop
 8004338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433a:	bc08      	pop	{r3}
 800433c:	469e      	mov	lr, r3
 800433e:	4770      	bx	lr
